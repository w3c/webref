{
  "name": "MediaKeySession",
  "type": "interface",
  "defined": {
    "spec": {
      "title": "Encrypted Media Extensions",
      "url": "https://www.w3.org/TR/encrypted-media/"
    },
    "fragment": "[SecureContext]\ninterface MediaKeySession : EventTarget {\n    readonly attribute DOMString           sessionId;\n    readonly attribute unrestricted double expiration;\n    readonly attribute Promise<void>       closed;\n    readonly attribute MediaKeyStatusMap   keyStatuses;\n             attribute EventHandler        onkeystatuseschange;\n             attribute EventHandler        onmessage;\n    Promise<void>    generateRequest(DOMString initDataType,\n                                     BufferSource initData);\n    Promise<boolean> load(DOMString sessionId);\n    Promise<void>    update(BufferSource response);\n    Promise<void>    close();\n    Promise<void>    remove();\n};"
  },
  "extended": [],
  "inheritance": {
    "name": "EventTarget",
    "type": "interface",
    "defined": {
      "spec": {
        "title": "DOM Standard",
        "url": "https://dom.spec.whatwg.org/"
      },
      "fragment": "[Exposed=*]\ninterface EventTarget {\n  constructor();\n\n  undefined addEventListener(DOMString type, EventListener? callback, optional (AddEventListenerOptions or boolean) options = {});\n  undefined removeEventListener(DOMString type, EventListener? callback, optional (EventListenerOptions or boolean) options = {});\n  boolean dispatchEvent(Event event);\n};",
      "href": "https://dom.spec.whatwg.org/#eventtarget"
    },
    "extended": [],
    "inheritance": null,
    "includes": []
  },
  "includes": []
}