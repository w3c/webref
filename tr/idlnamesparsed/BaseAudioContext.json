{
  "name": "BaseAudioContext",
  "type": "interface",
  "defined": {
    "spec": {
      "title": "Web Audio API",
      "url": "https://www.w3.org/TR/webaudio/"
    },
    "fragment": "[Exposed=Window]\ninterface BaseAudioContext : EventTarget {\n  readonly attribute AudioDestinationNode destination;\n  readonly attribute float sampleRate;\n  readonly attribute double currentTime;\n  readonly attribute AudioListener listener;\n  readonly attribute AudioContextState state;\n  [SameObject, SecureContext]\n  readonly attribute AudioWorklet audioWorklet;\n  attribute EventHandler onstatechange;\n\n  AnalyserNode createAnalyser ();\n  BiquadFilterNode createBiquadFilter ();\n  AudioBuffer createBuffer (unsigned long numberOfChannels,\n                            unsigned long length,\n                            float sampleRate);\n  AudioBufferSourceNode createBufferSource ();\n  ChannelMergerNode createChannelMerger (optional unsigned long numberOfInputs = 6);\n  ChannelSplitterNode createChannelSplitter (\n    optional unsigned long numberOfOutputs = 6);\n  ConstantSourceNode createConstantSource ();\n  ConvolverNode createConvolver ();\n  DelayNode createDelay (optional double maxDelayTime = 1.0);\n  DynamicsCompressorNode createDynamicsCompressor ();\n  GainNode createGain ();\n  IIRFilterNode createIIRFilter (sequence<double> feedforward,\n                                 sequence<double> feedback);\n  OscillatorNode createOscillator ();\n  PannerNode createPanner ();\n  PeriodicWave createPeriodicWave (sequence<float> real,\n                                   sequence<float> imag,\n                                   optional PeriodicWaveConstraints constraints = {});\n  ScriptProcessorNode createScriptProcessor(\n    optional unsigned long bufferSize = 0,\n    optional unsigned long numberOfInputChannels = 2,\n    optional unsigned long numberOfOutputChannels = 2);\n  StereoPannerNode createStereoPanner ();\n  WaveShaperNode createWaveShaper ();\n\n  Promise<AudioBuffer> decodeAudioData (\n    ArrayBuffer audioData,\n    optional DecodeSuccessCallback? successCallback,\n    optional DecodeErrorCallback? errorCallback);\n};",
    "href": "https://www.w3.org/TR/webaudio/#baseaudiocontext"
  },
  "extended": [],
  "inheritance": {
    "name": "EventTarget",
    "type": "interface",
    "defined": {
      "spec": {
        "title": "DOM Standard",
        "url": "https://dom.spec.whatwg.org/"
      },
      "fragment": "[Exposed=*]\ninterface EventTarget {\n  constructor();\n\n  undefined addEventListener(DOMString type, EventListener? callback, optional (AddEventListenerOptions or boolean) options = {});\n  undefined removeEventListener(DOMString type, EventListener? callback, optional (EventListenerOptions or boolean) options = {});\n  boolean dispatchEvent(Event event);\n};",
      "href": "https://dom.spec.whatwg.org/#eventtarget"
    },
    "extended": [],
    "inheritance": null,
    "includes": []
  },
  "includes": []
}