// GENERATED CONTENT - DO NOT EDIT
// Content was automatically extracted by Reffy into reffy-reports
// (https://github.com/tidoust/reffy-reports)
// Source: Web MIDI API (http://www.w3.org/TR/2015/WD-webmidi-20150317/)

partial interface Navigator {
    Promise<MIDIAccess> requestMIDIAccess (optional MIDIOptions options);
};

dictionary MIDIOptions {
    boolean sysex;
};

interface MIDIInputMap {
    readonly maplike<DOMString, MIDIInput>;
};

interface MIDIOutputMap {
    readonly maplike<DOMString, MIDIOutput>;
};

callback MIDISuccessCallback = void (MIDIAccess access, MIDIOptions options);

interface MIDIAccess : EventTarget {
    readonly    attribute MIDIInputMap  inputs;
    readonly    attribute MIDIOutputMap outputs;
                attribute EventHandler  onstatechange;
    readonly    attribute boolean       sysexEnabled;
};

enum MIDIPortType {
    "input",
    "output"
};

enum MIDIPortDeviceState {
    "disconnected",
    "connected"
};

enum MIDIPortConnectionState {
    "open",
    "closed",
    "pending"
};

interface MIDIPort : EventTarget {
    readonly    attribute DOMString               id;
    readonly    attribute DOMString?              manufacturer;
    readonly    attribute DOMString?              name;
    readonly    attribute MIDIPortType            type;
    readonly    attribute DOMString?              version;
    readonly    attribute MIDIPortDeviceState     state;
    readonly    attribute MIDIPortConnectionState connection;
                attribute EventHandler            onstatechange;
    Promise<MIDIPort> open ();
    Promise<MIDIPort> close ();
};

interface MIDIInput : MIDIPort {
                attribute EventHandler onmidimessage;
};

interface MIDIOutput : MIDIPort {
    void send (sequence<octet> data, optional double timestamp);
    void clear ();
};

[Constructor(DOMString type, optional MIDIMessageEventInit eventInitDict)]
interface MIDIMessageEvent : Event {
    readonly    attribute double     receivedTime;
    readonly    attribute Uint8Array data;
};

dictionary MIDIMessageEventInit : EventInit {
    double     receivedTime;
    Uint8Array data;
};

[Constructor(DOMString type, optional MIDIConnectionEventInit eventInitDict)]
interface MIDIConnectionEvent : Event {
    readonly    attribute MIDIPort port;
};

dictionary MIDIConnectionEventInit : EventInit {
    MIDIPort port;
};
