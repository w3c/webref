// GENERATED CONTENT - DO NOT EDIT
// Content was automatically extracted by Reffy into reffy-reports
// (https://github.com/tidoust/reffy-reports)
// Source: Presentation API (https://www.w3.org/TR/2017/CR-presentation-api-20170601/)

partial interface Navigator {
    [SecureContext,
     SameObject]
    readonly attribute Presentation presentation;
};

[SecureContext]
interface Presentation {
};

partial interface Presentation {
    attribute PresentationRequest? defaultRequest;
};

partial interface Presentation {
    readonly attribute PresentationReceiver? receiver;
};

[SecureContext,
 Constructor(USVString url),
 Constructor(sequence<USVString> urls)]
interface PresentationRequest : EventTarget {
    Promise<PresentationConnection>   start();
    Promise<PresentationConnection>   reconnect(USVString presentationId);
    Promise<PresentationAvailability> getAvailability();

    attribute EventHandler onconnectionavailable;
};

[SecureContext]
interface PresentationAvailability : EventTarget {
    readonly attribute boolean      value;

             attribute EventHandler onchange;
};

[SecureContext,
 Constructor(DOMString type, PresentationConnectionAvailableEventInit eventInitDict)]
interface PresentationConnectionAvailableEvent : Event {
    [SameObject]
    readonly attribute PresentationConnection connection;
};

dictionary PresentationConnectionAvailableEventInit : EventInit {
    required PresentationConnection connection;
};

enum PresentationConnectionState {
    "connecting",
    "connected",
    "closed",
    "terminated"
};

enum BinaryType {
    "blob",
    "arraybuffer"
};

[SecureContext]
interface PresentationConnection : EventTarget {
    readonly attribute USVString                   id;
    readonly attribute USVString                   url;
    readonly attribute PresentationConnectionState state;
    void close();
    void terminate();
             attribute EventHandler                onconnect;
             attribute EventHandler                onclose;
             attribute EventHandler                onterminate;

    // Communication
             attribute BinaryType                  binaryType;
             attribute EventHandler                onmessage;
    void send(DOMString message);
    void send(Blob data);
    void send(ArrayBuffer data);
    void send(ArrayBufferView data);
};

enum PresentationConnectionCloseReason {
    "error",
    "closed",
    "wentaway"
};

[SecureContext,
 Constructor(DOMString type, PresentationConnectionCloseEventInit eventInitDict)]
interface PresentationConnectionCloseEvent : Event {
    readonly attribute PresentationConnectionCloseReason reason;
    readonly attribute DOMString                         message;
};

dictionary PresentationConnectionCloseEventInit : EventInit {
    required PresentationConnectionCloseReason reason;
             DOMString                         message = "";
};

[SecureContext]
interface PresentationReceiver {
    readonly attribute Promise<PresentationConnectionList> connectionList;
};

[SecureContext]
interface PresentationConnectionList : EventTarget {
    readonly attribute FrozenArray<PresentationConnection> connections;
             attribute EventHandler                        onconnectionavailable;
};
