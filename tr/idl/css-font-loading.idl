// GENERATED CONTENT - DO NOT EDIT
// Content was automatically extracted by Reffy into reffy-reports
// (https://github.com/tidoust/reffy-reports)
// Source: CSS Font Loading Module Level 3 (http://www.w3.org/TR/2014/WD-css-font-loading-3-20140522/)

typedef (ArrayBuffer or ArrayBufferView) BinaryData;

dictionary FontFaceDescriptors {
  DOMString style = "normal";
  DOMString weight = "normal";
  DOMString stretch = "normal";
  DOMString unicodeRange = "U+0-10FFFF";
  DOMString variant = "normal";
  DOMString featureSettings = "normal";
};

enum FontFaceLoadStatus { "unloaded", "loading", "loaded", "error" };

[Constructor(DOMString family, (DOMString or BinaryData) source,
           FontFaceDescriptors descriptors)]
interface FontFace {
  attribute DOMString family;
  attribute DOMString style;
  attribute DOMString weight;
  attribute DOMString stretch;
  attribute DOMString unicodeRange;
  attribute DOMString variant;
  attribute DOMString featureSettings;

  readonly attribute FontFaceLoadStatus status;

  Promise<FontFace> load();
  attribute Promise<boolean> loaded;
};

dictionary CSSFontFaceLoadEventInit : EventInit {
  sequence<CSSFontFaceRule> fontfaces = null;
};

[Constructor(DOMString type, optional CSSFontFaceLoadEventInit eventInitDict)]
interface CSSFontFaceLoadEvent : Event {
  readonly attribute sequence<CSSFontFaceRule> fontfaces;
};

enum FontFaceSetLoadStatus { "loading", "loaded" };

[SetClass(FontFace)]
interface FontFaceSet {

  // -- events for when loading state changes
  attribute EventHandler onloading;
  attribute EventHandler onloadingdone;
  attribute EventHandler onloadingerror;

  // check and start loads if appropriate
  // and fulfill promise when all loads complete
  Promise<sequence<FontFace>> load(DOMString font, optional DOMString text = " ");

  // return whether all fonts in the fontlist are loaded
  // (does not initiate load if not available)
  boolean check(DOMString font, optional DOMString text = " ");

  // async notification that font loading and layout operations are done
  Promise<FontFaceSet> ready();

  // loading state, "loading" while one or more fonts loading, "loaded" otherwise
  readonly attribute FontFaceLoadStatus status;
};

FontFaceSet implements EventTarget;

[NoInterfaceObject]
interface FontFaceSource {
  readonly attribute FontFaceSet fonts;
};

Document implements FontFaceSource;
WorkerGlobalScope implements FontFaceSource;
