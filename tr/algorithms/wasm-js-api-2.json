{
  "spec": {
    "title": "WebAssembly JavaScript Interface",
    "url": "https://www.w3.org/TR/wasm-js-api-2/"
  },
  "algorithms": [
    {
      "name": "compile a WebAssembly module",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#compile-a-webassembly-module",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"compile-a-webassembly-module\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">compile a WebAssembly module</dfn> from source bytes <var>bytes</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>module</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-module-decode\" id=\"ref-for-embed-module-decode\">module_decode</a>(<var>bytes</var>). If <var>module</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error\">error</a>, return <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error①\">error</a>.</p>"
        },
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-module-validate\" id=\"ref-for-embed-module-validate\">module_validate</a>(<var>module</var>) is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error②\">error</a>, return <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error③\">error</a>.</p>"
        },
        {
          "html": "<p>Return <var>module</var>.</p>"
        }
      ]
    },
    {
      "name": "validate builtins and imported string for a WebAssembly module",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#validate-builtins-and-imported-string-for-a-webassembly-module",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"validate-builtins-and-imported-string-for-a-webassembly-module\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">validate builtins and imported string for a WebAssembly module</dfn> from module <var>module</var>, enabled builtins <var>builtinSetNames</var>, and <var>importedStringModule</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#validate-builtin-set-names\" id=\"ref-for-validate-builtin-set-names\">validating builtin set names</a> for <var>builtinSetNames</var> is false, return false.</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate\">For each</a> <var>import</var> of <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-module-imports\" id=\"ref-for-embed-module-imports\">module_imports</a>(<var>module</var>),",
          "rationale": "if",
          "steps": [
            {
              "html": "If <var>importedStringModule</var> is not null and <var>import</var>[0] equals <var>importedStringModule</var>,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>importExternType</var> be <var>import</var>[2].</p>"
                },
                {
                  "html": "<p>Let <var>stringExternType</var> be <code>global const (ref extern)</code>.</p>"
                },
                {
                  "html": "<p>If <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-match-externtype\" id=\"ref-for-embed-match-externtype\">match_externtype</a>(<var>stringExternType</var>, <var>importExternType</var>) is false, return false</p>"
                }
              ]
            },
            {
              "html": "Else,",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#validate-an-import-for-builtins\" id=\"ref-for-validate-an-import-for-builtins\">validating a import for builtin</a> with <var>import</var> and <var>builtinSetNames</var> is false, return false.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return true.</p>"
        }
      ]
    },
    {
      "name": "WebAssembly/validate(bytes, options)",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-webassembly-validate",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WebAssembly\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"validate(bytes, options)|validate(bytes)\" id=\"dom-webassembly-validate\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>validate(<var>bytes</var>, <var>options</var>)</code></dfn> method, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stableBytes</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-get-buffer-source-copy\" id=\"ref-for-dfn-get-buffer-source-copy\">copy of the bytes held by the buffer</a> <var>bytes</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#compile-a-webassembly-module\" id=\"ref-for-compile-a-webassembly-module\">Compile</a> <var>stableBytes</var> as a WebAssembly module and store the results as <var>module</var>.</p>"
        },
        {
          "html": "<p>If <var>module</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error④\">error</a>, return false.</p>"
        },
        {
          "html": "<p>Let <var>builtinSetNames</var> be <var>options</var>[\"builtins\"].</p>"
        },
        {
          "html": "<p>Let <var>importedStringModule</var> be <var>options</var>[\"importedStringConstants\"].</p>"
        },
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#validate-builtins-and-imported-string-for-a-webassembly-module\" id=\"ref-for-validate-builtins-and-imported-string-for-a-webassembly-module\">validating builtins and imported strings</a> for <var>module</var> with <var>builtinSetNames</var> and <var>importedStringModule</var> returns false, return false.</p>"
        },
        {
          "html": "<p>Return true.</p>"
        }
      ]
    },
    {
      "name": "construct a WebAssembly module object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#construct-a-webassembly-module-object",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"construct-a-webassembly-module-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">construct a WebAssembly module object</dfn> from a module <var>module</var>, source bytes <var>bytes</var>, enabled builtins <var>builtinSetNames</var>, and <var>importedStringModule</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>moduleObject</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#module\" id=\"ref-for-module⑤\">Module</a></code> object.</p>"
        },
        {
          "html": "<p>Set <var>moduleObject</var>.[[Module]] to <var>module</var>.</p>"
        },
        {
          "html": "<p>Set <var>moduleObject</var>.[[Bytes]] to <var>bytes</var>.</p>"
        },
        {
          "html": "<p>Set <var>moduleObject</var>.[[BuiltinSets]] to <var>builtinSetNames</var>.</p>"
        },
        {
          "html": "<p>Set <var>moduleObject</var>.[[ImportedStringModule]] to <var>importedStringModule</var>.</p>"
        },
        {
          "html": "<p>Return <var>moduleObject</var>.</p>"
        }
      ]
    },
    {
      "name": "asynchronously compile a WebAssembly module",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#asynchronously-compile-a-webassembly-module",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"asynchronously-compile-a-webassembly-module\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">asynchronously compile a WebAssembly module</dfn> from source bytes <var>bytes</var> and <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#dictdef-webassemblycompileoptions\" id=\"ref-for-dictdef-webassemblycompileoptions③\">WebAssemblyCompileOptions</a></code> <var>options</var> using optional <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#task-source\" id=\"ref-for-task-source\">task source</a> <var>taskSource</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>promise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise\">a new promise</a>.</p>"
        },
        {
          "html": "Run the following steps <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/infrastructure.html#in-parallel\" id=\"ref-for-in-parallel\">in parallel</a>:",
          "rationale": "queue",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#compile-a-webassembly-module\" id=\"ref-for-compile-a-webassembly-module①\">Compile the WebAssembly module</a> <var>bytes</var> and store the result as <var>module</var>.</p>"
            },
            {
              "html": "<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-task\" id=\"ref-for-queue-a-task\">Queue a task</a> to perform the following steps. If <var>taskSource</var> was provided, queue the task on that task source.",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If <var>module</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error⑤\">error</a>, reject <var>promise</var> with a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-compileerror\" id=\"ref-for-exceptiondef-compileerror\">CompileError</a></code> exception.</p>"
                },
                {
                  "html": "<p>Let <var>builtinSetNames</var> be <var>options</var>[\"builtins\"].</p>"
                },
                {
                  "html": "<p>Let <var>importedStringModule</var> be <var>options</var>[\"importedStringConstants\"].</p>"
                },
                {
                  "html": "<p>If <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#validate-builtins-and-imported-string-for-a-webassembly-module\" id=\"ref-for-validate-builtins-and-imported-string-for-a-webassembly-module①\">validating builtins and imported strings</a> for <var>module</var> with <var>builtinSetNames</var> and <var>importedStringModule</var> is false, reject <var>promise</var> with a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-compileerror\" id=\"ref-for-exceptiondef-compileerror①\">CompileError</a></code> exception.</p>"
                },
                {
                  "html": "Otherwise,",
                  "rationale": "resolve",
                  "steps": [
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#construct-a-webassembly-module-object\" id=\"ref-for-construct-a-webassembly-module-object\">Construct a WebAssembly module object</a> from <var>module</var>, <var>bytes</var>, <var>builtinSetNames</var>, <var>importedStringModule</var>, and let <var>moduleObject</var> be the result.</p>"
                    },
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve\">Resolve</a> <var>promise</var> with <var>moduleObject</var>.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "WebAssembly/compile(bytes, options)",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-webassembly-compile",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WebAssembly\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"compile(bytes, options)|compile(bytes)\" id=\"dom-webassembly-compile\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>compile(<var>bytes</var>, <var>options</var>)</code></dfn> method, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stableBytes</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-get-buffer-source-copy\" id=\"ref-for-dfn-get-buffer-source-copy①\">copy of the bytes held by the buffer</a> <var>bytes</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#asynchronously-compile-a-webassembly-module\" id=\"ref-for-asynchronously-compile-a-webassembly-module\">Asynchronously compile a WebAssembly module</a> from <var>stableBytes</var> using <var>options</var> and return the result.</p>"
        }
      ]
    },
    {
      "name": "instantiate imported strings",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#instantiate-imported-strings",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"instantiate-imported-strings\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">instantiate imported strings</dfn> with module <var>module</var> and <var>importedStringModule</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>importedStringModule</var> is not null.</p>"
        },
        {
          "html": "<p>Let <var>exportsObject</var> be <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinaryobjectcreate\" id=\"ref-for-sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a>(null).</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate①\">For each</a> (<var>moduleName</var>, <var>componentName</var>, <var>externtype</var>) of <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-module-imports\" id=\"ref-for-embed-module-imports①\">module_imports</a>(<var>module</var>),",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>moduleName</var> does not equal <var>importedStringModule</var>, then <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#iteration-continue\" id=\"ref-for-iteration-continue\">continue</a>.</p>"
            },
            {
              "html": "<p>Let <var>stringConstant</var> be <var>componentName</var>.</p>"
            },
            {
              "html": "<p>Let <var>status</var> be <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-createdataproperty\" id=\"ref-for-sec-createdataproperty\">CreateDataProperty</a>(<var>exportsObject</var>, <var>stringConstant</var>, <var>stringConstant</var>).</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>status</var> is true.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <var>exportsObject</var>.</p>"
        }
      ]
    },
    {
      "name": "read-the-imports",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#read-the-imports",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"read-the-imports\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">read the imports</dfn> from a WebAssembly module <var>module</var> from imports object <var>importObject</var>, enabled builtins <var>builtinSetNames</var>, and <var>importedStringModule</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>module</var>.<a data-link-type=\"dfn\" data-refhint-key=\"32e497d6\" href=\"https://webassembly.github.io/spec/core/syntax/modules.html#syntax-module\" id=\"ref-for-syntax-module①\">imports</a> <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty\">is not empty</a>, and <var>importObject</var> is undefined, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Let <var>builtinOrStringImports</var> be the ordered map « ».</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate②\">For each</a> <var>builtinSetName</var> of <var>builtinSetNames</var>,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>builtinOrStringImports</var> does not contain <var>builtinSetName</var></p>"
            },
            {
              "html": "<p>If <var>builtinSetName</var> does not refer to a builtin set, then <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#iteration-continue\" id=\"ref-for-iteration-continue①\">continue</a>.</p>"
            },
            {
              "html": "<p>Let <var>exportsObject</var> be the result of <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#instantiate-a-builtin-set\" id=\"ref-for-instantiate-a-builtin-set\">instantiate a builtin set</a> with <var>builtinSetName</var></p>"
            },
            {
              "html": "<p>Let <var>builtinSetQualifiedName</var> be <var>builtinSetName</var> prefixed with \"wasm:\"</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-set\" id=\"ref-for-map-set\">Set</a> <var>builtinOrStringImports</var>[<var>builtinSetQualifiedName</var>] to <var>exportsObject</var></p>"
            }
          ]
        },
        {
          "html": "If <var>importedStringModule</var> is not null,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>exportsObject</var> be the result of <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#instantiate-imported-strings\" id=\"ref-for-instantiate-imported-strings\">instantiate imported strings</a> with <var>module</var> and <var>importedStringModule</var></p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-set\" id=\"ref-for-map-set①\">Set</a> <var>builtinOrStringImports</var>[<var>importedStringModule</var>] to <var>exportsObject</var></p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>imports</var> be « ».</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate③\">For each</a> (<var>moduleName</var>, <var>componentName</var>, <var>externtype</var>) of <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-module-imports\" id=\"ref-for-embed-module-imports②\">module_imports</a>(<var>module</var>),",
          "rationale": "if",
          "steps": [
            {
              "html": "If <var>builtinOrStringImports</var> <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists\">contains</a> <var>moduleName</var>,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>o</var> be <var>builtinOrStringImports</var>[<var>moduleName</var>].</p>"
                },
                {
                  "html": "If <var>o</var> <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-object-type\" id=\"ref-for-sec-object-type\">is not an Object</a> or if <var>o</var> <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①\">does not contain</a> <var>componentName</var>,",
                  "rationale": "set",
                  "steps": [
                    {
                      "html": "<p>Set <var>o</var> to <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②\">?</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-get-o-p\" id=\"ref-for-sec-get-o-p\">Get</a>(<var>importObject</var>, <var>moduleName</var>).</p>"
                    }
                  ]
                }
              ]
            },
            {
              "html": "Else,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>o</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③\">?</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-get-o-p\" id=\"ref-for-sec-get-o-p①\">Get</a>(<var>importObject</var>, <var>moduleName</var>).</p>"
                }
              ]
            },
            {
              "html": "<p>If <var>o</var> <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-object-type\" id=\"ref-for-sec-object-type①\">is not an Object</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①\">TypeError</a></code> exception.</p>"
            },
            {
              "html": "<p>Let <var>v</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④\">?</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-get-o-p\" id=\"ref-for-sec-get-o-p②\">Get</a>(<var>o</var>, <var>componentName</var>).</p>"
            },
            {
              "html": "If <var>externtype</var> is of the form <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#external-types\" id=\"ref-for-external-types\">func</a> <var>functype</var>,",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-iscallable\" id=\"ref-for-sec-iscallable\">IsCallable</a>(<var>v</var>) is false, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-linkerror\" id=\"ref-for-exceptiondef-linkerror\">LinkError</a></code> exception.</p>"
                },
                {
                  "html": "If <var>v</var> has a [[FunctionAddress]] internal slot, and therefore is an <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exported-function\" id=\"ref-for-exported-function①\">Exported Function</a>,",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>funcaddr</var> be the value of <var>v</var>’s [[FunctionAddress]] internal slot.</p>"
                    }
                  ]
                },
                {
                  "html": "Otherwise,",
                  "rationale": "create",
                  "steps": [
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#create-a-host-function\" id=\"ref-for-create-a-host-function\">Create a host function</a> from <var>v</var> and <var>functype</var>, and let <var>funcaddr</var> be the result.</p>"
                    },
                    {
                      "html": "<p>Let <var>index</var> be the number of external functions in <var>imports</var>. This value <var>index</var> is known as the <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"index-of-the-host-function\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">index of the host function</dfn> <var>funcaddr</var>.</p>"
                    }
                  ]
                },
                {
                  "html": "<p>Let <var>externfunc</var> be the <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval\">external value</a> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval①\">func</a> <var>funcaddr</var>.</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append\">Append</a> <var>externfunc</var> to <var>imports</var>.</p>"
                }
              ]
            },
            {
              "html": "If <var>externtype</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"82295e1c\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#external-types\" id=\"ref-for-external-types①\">global</a> <var>mut</var> <var>valtype</var>,",
              "rationale": "if",
              "steps": [
                {
                  "html": "If <var>v</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#global\" id=\"ref-for-global①\">Global</a></code>,",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>globaladdr</var> be <var>v</var>.[[Global]].</p>"
                    }
                  ]
                },
                {
                  "html": "Otherwise,",
                  "rationale": "if",
                  "steps": [
                    {
                      "html": "If <var>valtype</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-numtype\" id=\"ref-for-syntax-numtype\">i64</a> and <var>v</var> <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-bigint-type\" id=\"ref-for-sec-ecmascript-language-types-bigint-type\">is not a BigInt</a>,",
                      "rationale": "throw",
                      "steps": [
                        {
                          "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-linkerror\" id=\"ref-for-exceptiondef-linkerror①\">LinkError</a></code> exception.</p>"
                        }
                      ]
                    },
                    {
                      "html": "If <var>valtype</var> is one of <a data-link-type=\"dfn\" data-refhint-key=\"1eccdce5\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-numtype\" id=\"ref-for-syntax-numtype①\">i32</a>, <a data-link-type=\"dfn\" data-refhint-key=\"a4646532\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-numtype\" id=\"ref-for-syntax-numtype②\">f32</a> or <a data-link-type=\"dfn\" data-refhint-key=\"487b76fe\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-numtype\" id=\"ref-for-syntax-numtype③\">f64</a> and <var>v</var> <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type\" id=\"ref-for-sec-ecmascript-language-types-number-type\">is not a Number</a>,",
                      "rationale": "throw",
                      "steps": [
                        {
                          "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-linkerror\" id=\"ref-for-exceptiondef-linkerror②\">LinkError</a></code> exception.</p>"
                        }
                      ]
                    },
                    {
                      "html": "If <var>valtype</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#vector-types\" id=\"ref-for-vector-types\">v128</a>,",
                      "rationale": "throw",
                      "steps": [
                        {
                          "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-linkerror\" id=\"ref-for-exceptiondef-linkerror③\">LinkError</a></code> exception.</p>"
                        }
                      ]
                    },
                    {
                      "html": "<p>Let <var>value</var> be <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#towebassemblyvalue\" id=\"ref-for-towebassemblyvalue\">ToWebAssemblyValue</a>(<var>v</var>, <var>valtype</var>). If this operation throws a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror②\">TypeError</a></code>, catch it, and throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-linkerror\" id=\"ref-for-exceptiondef-linkerror④\">LinkError</a></code> exception.</p>"
                    },
                    {
                      "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store\">associated store</a>.</p>"
                    },
                    {
                      "html": "<p>Let (<var>store</var>, <var>globaladdr</var>) be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-global-alloc\" id=\"ref-for-embed-global-alloc\">global_alloc</a>(<var>store</var>, <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-mut\" id=\"ref-for-syntax-mut\">const</a> <var>valtype</var>, <var>value</var>).</p>"
                    },
                    {
                      "html": "<p>Set the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent①\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store①\">associated store</a> to <var>store</var>.</p>"
                    }
                  ]
                },
                {
                  "html": "<p>Let <var>externglobal</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval②\">global</a> <var>globaladdr</var>.</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append①\">Append</a> <var>externglobal</var> to <var>imports</var>.</p>"
                }
              ]
            },
            {
              "html": "If <var>externtype</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"2be47a22\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#external-types\" id=\"ref-for-external-types②\">mem</a> <var>memtype</var>,",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If <var>v</var> does not <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements①\">implement</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#memory\" id=\"ref-for-memory②\">Memory</a></code>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-linkerror\" id=\"ref-for-exceptiondef-linkerror⑤\">LinkError</a></code> exception.</p>"
                },
                {
                  "html": "<p>Let <var>externmem</var> be the <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval③\">external value</a> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval④\">mem</a> <var>v</var>.[[Memory]].</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append②\">Append</a> <var>externmem</var> to <var>imports</var>.</p>"
                }
              ]
            },
            {
              "html": "If <var>externtype</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"eb9c1b7f\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#external-types\" id=\"ref-for-external-types③\">table</a> <var>tabletype</var>,",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If <var>v</var> does not <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements②\">implement</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#table\" id=\"ref-for-table①\">Table</a></code>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-linkerror\" id=\"ref-for-exceptiondef-linkerror⑥\">LinkError</a></code> exception.</p>"
                },
                {
                  "html": "<p>Let <var>tableaddr</var> be <var>v</var>.[[Table]].</p>"
                },
                {
                  "html": "<p>Let <var>externtable</var> be the <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval⑤\">external value</a> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval⑥\">table</a> <var>tableaddr</var>.</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append③\">Append</a> <var>externtable</var> to <var>imports</var>.</p>"
                }
              ]
            },
            {
              "html": "If <var>externtype</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"a5c9608b\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#external-types\" id=\"ref-for-external-types④\">tag</a> <var>attribute</var> <var>functype</var>,",
              "rationale": "assert",
              "steps": [
                {
                  "html": "<p class=\"assertion\">Assert: <var>attribute</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-tagtype\" id=\"ref-for-syntax-tagtype\">exception</a>.</p>"
                },
                {
                  "html": "<p>If <var>v</var> does not <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements③\">implement</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tag\" id=\"ref-for-tag②\">Tag</a></code>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-linkerror\" id=\"ref-for-exceptiondef-linkerror⑦\">LinkError</a></code> exception.</p>"
                },
                {
                  "html": "<p>Let <var>tagaddr</var> be <var>v</var>.[[Address]].</p>"
                },
                {
                  "html": "<p>Let <var>externtag</var> be the <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval⑦\">external value</a> <a data-link-type=\"dfn\" data-refhint-key=\"c77be4cb\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval⑧\">tag</a> <var>tagaddr</var>.</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append④\">Append</a> <var>externtag</var> to <var>imports</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <var>imports</var>.</p>"
        }
      ]
    },
    {
      "name": "create an exports object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#create-an-exports-object",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"create-an-exports-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">create an exports object</dfn> from a WebAssembly module <var>module</var> and instance <var>instance</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>exportsObject</var> be <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑤\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinaryobjectcreate\" id=\"ref-for-sec-ordinaryobjectcreate①\">OrdinaryObjectCreate</a>(null).</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate④\">For each</a> (<var>name</var>, <var>externtype</var>) of <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-module-exports\" id=\"ref-for-embed-module-exports\">module_exports</a>(<var>module</var>),",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>externval</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-instance-export\" id=\"ref-for-embed-instance-export\">instance_export</a>(<var>instance</var>, <var>name</var>).</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>externval</var> is not <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error⑥\">error</a>.</p>"
            },
            {
              "html": "If <var>externtype</var> is of the form <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#external-types\" id=\"ref-for-external-types⑤\">func</a> <var>functype</var>,",
              "rationale": "assert",
              "steps": [
                {
                  "html": "<p class=\"assertion\">Assert: <var>externval</var> is of the form <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval⑨\">func</a> <var>funcaddr</var>.</p>"
                },
                {
                  "html": "<p>Let <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval①⓪\">func</a> <var>funcaddr</var> be <var>externval</var>.</p>"
                },
                {
                  "html": "<p>Let <var>func</var> be the result of creating <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#a-new-exported-function\" id=\"ref-for-a-new-exported-function\">a new Exported Function</a> from <var>funcaddr</var>.</p>"
                },
                {
                  "html": "<p>Let <var>value</var> be <var>func</var>.</p>"
                }
              ]
            },
            {
              "html": "If <var>externtype</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"82295e1c\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#external-types\" id=\"ref-for-external-types⑥\">global</a> <var>mut</var> <var>globaltype</var>,",
              "rationale": "assert",
              "steps": [
                {
                  "html": "<p class=\"assertion\">Assert: <var>externval</var> is of the form <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval①①\">global</a> <var>globaladdr</var>.</p>"
                },
                {
                  "html": "<p>Let <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval①②\">global</a> <var>globaladdr</var> be <var>externval</var>.</p>"
                },
                {
                  "html": "<p>Let <var>global</var> be <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#create-a-global-object\" id=\"ref-for-create-a-global-object\">a new Global object</a> created from <var>globaladdr</var>.</p>"
                },
                {
                  "html": "<p>Let <var>value</var> be <var>global</var>.</p>"
                }
              ]
            },
            {
              "html": "If <var>externtype</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"2be47a22\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#external-types\" id=\"ref-for-external-types⑦\">mem</a> <var>memtype</var>,",
              "rationale": "assert",
              "steps": [
                {
                  "html": "<p class=\"assertion\">Assert: <var>externval</var> is of the form <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval①③\">mem</a> <var>memaddr</var>.</p>"
                },
                {
                  "html": "<p>Let <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval①④\">mem</a> <var>memaddr</var> be <var>externval</var>.</p>"
                },
                {
                  "html": "<p>Let <var>memory</var> be <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#create-a-memory-object\" id=\"ref-for-create-a-memory-object\">a new Memory object</a> created from <var>memaddr</var>.</p>"
                },
                {
                  "html": "<p>Let <var>value</var> be <var>memory</var>.</p>"
                }
              ]
            },
            {
              "html": "If <var>externtype</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"eb9c1b7f\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#external-types\" id=\"ref-for-external-types⑧\">table</a> <var>tabletype</var>,",
              "rationale": "assert",
              "steps": [
                {
                  "html": "<p class=\"assertion\">Assert: <var>externval</var> is of the form <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval①⑤\">table</a> <var>tableaddr</var>.</p>"
                },
                {
                  "html": "<p>Let <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval①⑥\">table</a> <var>tableaddr</var> be <var>externval</var>.</p>"
                },
                {
                  "html": "<p>Let <var>table</var> be <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#create-a-table-object\" id=\"ref-for-create-a-table-object\">a new Table object</a> created from <var>tableaddr</var>.</p>"
                },
                {
                  "html": "<p>Let <var>value</var> be <var>table</var>.</p>"
                }
              ]
            },
            {
              "html": "If <var>externtype</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"a5c9608b\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#external-types\" id=\"ref-for-external-types⑨\">tag</a> <var>attribute</var> <var>functype</var>,",
              "rationale": "assert",
              "steps": [
                {
                  "html": "<p class=\"assertion\">Assert: <var>attribute</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-tagtype\" id=\"ref-for-syntax-tagtype①\">exception</a>.</p>"
                },
                {
                  "html": "<p class=\"assertion\">Assert: <var>externval</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"c77be4cb\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval①⑦\">tag</a> <var>tagaddr</var>.</p>"
                },
                {
                  "html": "<p>Let <a data-link-type=\"dfn\" data-refhint-key=\"c77be4cb\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-externval\" id=\"ref-for-syntax-externval①⑧\">tag</a> <var>tagaddr</var> be <var>externval</var>.</p>"
                },
                {
                  "html": "<p>Let <var>tag</var> be <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#create-a-tag-object\" id=\"ref-for-create-a-tag-object\">a new Tag object</a> created from <var>tagaddr</var>.</p>"
                },
                {
                  "html": "<p>Let <var>value</var> be <var>tag</var>.</p>"
                }
              ]
            },
            {
              "html": "<p>Let <var>status</var> be <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑥\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-createdataproperty\" id=\"ref-for-sec-createdataproperty①\">CreateDataProperty</a>(<var>exportsObject</var>, <var>name</var>, <var>value</var>).</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>status</var> is true.</p>"
            }
          ]
        },
        {
          "html": "<p>Perform <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑦\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-setintegritylevel\" id=\"ref-for-sec-setintegritylevel\">SetIntegrityLevel</a>(<var>exportsObject</var>, <code>\"frozen\"</code>).</p>"
        },
        {
          "html": "<p>Return <var>exportsObject</var>.</p>"
        }
      ]
    },
    {
      "name": "initialize an instance object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#initialize-an-instance-object",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"initialize-an-instance-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">initialize an instance object</dfn> <var>instanceObject</var> from a WebAssembly module <var>module</var> and instance <var>instance</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#create-an-exports-object\" id=\"ref-for-create-an-exports-object\">Create an exports object</a> from <var>module</var> and <var>instance</var> and let <var>exportsObject</var> be the result.</p>"
        },
        {
          "html": "<p>Set <var>instanceObject</var>.[[Instance]] to <var>instance</var>.</p>"
        },
        {
          "html": "<p>Set <var>instanceObject</var>.[[Exports]] to <var>exportsObject</var>.</p>"
        }
      ]
    },
    {
      "name": "instantiate the core of a WebAssembly module",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#instantiate-the-core-of-a-webassembly-module",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"instantiate-the-core-of-a-webassembly-module\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">instantiate the core of a WebAssembly module</dfn> from a module <var>module</var> and imports <var>imports</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent②\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store②\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let <var>result</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-module-instantiate\" id=\"ref-for-embed-module-instantiate\">module_instantiate</a>(<var>store</var>, <var>module</var>, <var>imports</var>).</p>"
        },
        {
          "html": "<p>If <var>result</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error⑦\">error</a>, throw an appropriate exception type:</p>\n      <ul>\n       <li data-md=\"\">\n        <p>A <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-linkerror\" id=\"ref-for-exceptiondef-linkerror⑧\">LinkError</a></code> exception for most cases which occur during linking.</p>\n       </li><li data-md=\"\">\n        <p>If the error came when running the start function, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-runtimeerror\" id=\"ref-for-exceptiondef-runtimeerror\">RuntimeError</a></code> for most errors which occur from WebAssembly, or the error object propagated from inner ECMAScript code.</p>\n       </li><li data-md=\"\">\n        <p>Another error type if appropriate, for example an out-of-memory exception, as documented in <a href=\"https://www.w3.org/TR/wasm-js-api-2/#errors\">the WebAssembly error mapping</a>.</p>\n      </li></ul>"
        },
        {
          "html": "<p>Let (<var>store</var>, <var>instance</var>) be <var>result</var>.</p>"
        },
        {
          "html": "<p>Set the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent③\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store③\">associated store</a> to <var>store</var>.</p>"
        },
        {
          "html": "<p>Return <var>instance</var>.</p>"
        }
      ]
    },
    {
      "name": "asynchronously instantiate a WebAssembly module",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#asynchronously-instantiate-a-webassembly-module",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"asynchronously-instantiate-a-webassembly-module\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">asynchronously instantiate a WebAssembly module</dfn> from a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#module\" id=\"ref-for-module⑥\">Module</a></code> <var>moduleObject</var> and imports <var>importObject</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>promise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise①\">a new promise</a>.</p>"
        },
        {
          "html": "<p>Let <var>module</var> be <var>moduleObject</var>.[[Module]].</p>"
        },
        {
          "html": "<p>Let <var>builtinSetNames</var> be <var>moduleObject</var>.[[BuiltinSets]].</p>"
        },
        {
          "html": "<p>Let <var>importedStringModule</var> be <var>moduleObject</var>.[[ImportedStringModule]].</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#read-the-imports\" id=\"ref-for-read-the-imports\">Read the imports</a> of <var>module</var> with imports <var>importObject</var>, <var>builtinSetNames</var> and <var>importedStringModule</var>, and let <var>imports</var> be the result.\nIf this operation throws an exception, catch it, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject\">reject</a> <var>promise</var> with the exception, and return <var>promise</var>.</p>"
        },
        {
          "html": "Run the following steps <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/infrastructure.html#in-parallel\" id=\"ref-for-in-parallel①\">in parallel</a>:",
          "rationale": "queue",
          "steps": [
            {
              "html": "<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-task\" id=\"ref-for-queue-a-task①\">Queue a task</a> to perform the following steps:\nNote: Implementation-specific work may be performed here.",
              "rationale": "reject",
              "steps": [
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#instantiate-the-core-of-a-webassembly-module\" id=\"ref-for-instantiate-the-core-of-a-webassembly-module①\">Instantiate the core of a WebAssembly module</a> <var>module</var> with <var>imports</var>, and let <var>instance</var> be the result.\nIf this throws an exception, catch it, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject①\">reject</a> <var>promise</var> with the exception, and terminate these substeps.</p>"
                },
                {
                  "html": "<p>Let <var>instanceObject</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#instance\" id=\"ref-for-instance②\">Instance</a></code>.</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#initialize-an-instance-object\" id=\"ref-for-initialize-an-instance-object\">Initialize</a> <var>instanceObject</var> from <var>module</var> and <var>instance</var>.\nIf this throws an exception, catch it, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject②\">reject</a> <var>promise</var> with the exception, and terminate these substeps.</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve①\">Resolve</a> <var>promise</var> with <var>instanceObject</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "instantiate a promise of a module",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#instantiate-a-promise-of-a-module",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"instantiate-a-promise-of-a-module\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">instantiate a promise of a module</dfn> <var>promiseOfModule</var> with imports <var>importObject</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>promise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise②\">a new promise</a>.</p>"
        },
        {
          "html": "If <var>promiseOfModule</var> was fulfilled with value <var>module</var>:",
          "rationale": "reject",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#asynchronously-instantiate-a-webassembly-module\" id=\"ref-for-asynchronously-instantiate-a-webassembly-module\">Instantiate the WebAssembly module</a> <var>module</var> importing <var>importObject</var>, and let <var>innerPromise</var> be the result.</p>"
            },
            {
              "html": "If <var>innerPromise</var> was fulfilled with value <var>instance</var>.",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>result</var> be the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#dictdef-webassemblyinstantiatedsource\" id=\"ref-for-dictdef-webassemblyinstantiatedsource①\">WebAssemblyInstantiatedSource</a></code> value «[ \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#dom-webassemblyinstantiatedsource-module\" id=\"ref-for-dom-webassemblyinstantiatedsource-module\">module</a></code>\" → <var>module</var>, \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#dom-webassemblyinstantiatedsource-instance\" id=\"ref-for-dom-webassemblyinstantiatedsource-instance\">instance</a></code>\" → <var>instance</var> ]».</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve②\">Resolve</a> <var>promise</var> with <var>result</var>.</p>"
                }
              ],
              "additional": [
                {
                  "html": "If <var>innerPromise</var> was rejected with reason <var>reason</var>:",
                  "rationale": "reject",
                  "steps": [
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject③\">Reject</a> <var>promise</var> with <var>reason</var>.</p>"
                    }
                  ]
                }
              ]
            }
          ],
          "additional": [
            {
              "html": "If <var>promiseOfModule</var> was rejected with reason <var>reason</var>:",
              "rationale": "reject",
              "steps": [
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject④\">Reject</a> <var>promise</var> with <var>reason</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "WebAssembly/instantiate(bytes, importObject, options)",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-webassembly-instantiate",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WebAssembly\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"instantiate(bytes, importObject, options)|instantiate(bytes, importObject)|instantiate(bytes)\" id=\"dom-webassembly-instantiate\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>instantiate(<var>bytes</var>, <var>importObject</var>, <var>options</var>)</code></dfn> method, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stableBytes</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-get-buffer-source-copy\" id=\"ref-for-dfn-get-buffer-source-copy②\">copy of the bytes held by the buffer</a> <var>bytes</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#asynchronously-compile-a-webassembly-module\" id=\"ref-for-asynchronously-compile-a-webassembly-module①\">Asynchronously compile a WebAssembly module</a> from <var>stableBytes</var> using <var>options</var> and let <var>promiseOfModule</var> be the result.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#instantiate-a-promise-of-a-module\" id=\"ref-for-instantiate-a-promise-of-a-module\">Instantiate</a> <var>promiseOfModule</var> with imports <var>importObject</var> and return the result.</p>"
        }
      ]
    },
    {
      "name": "WebAssembly/instantiate(moduleObject, importObject)",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-webassembly-instantiate-moduleobject-importobject",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WebAssembly\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"instantiate(moduleObject, importObject)|instantiate(moduleObject)\" id=\"dom-webassembly-instantiate-moduleobject-importobject\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>instantiate(<var>moduleObject</var>, <var>importObject</var>)</code></dfn> method, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#asynchronously-instantiate-a-webassembly-module\" id=\"ref-for-asynchronously-instantiate-a-webassembly-module①\">Asynchronously instantiate the WebAssembly module</a> <var>moduleObject</var> importing <var>importObject</var>, and return the result.</p>"
        }
      ]
    },
    {
      "name": "WebAssembly/JSTag",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-webassembly-jstag",
      "html": "The getter of the <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WebAssembly\" data-dfn-type=\"attribute\" data-export=\"\" id=\"dom-webassembly-jstag\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>JSTag</code></dfn> attribute of the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#namespacedef-webassembly\" id=\"ref-for-namespacedef-webassembly\">WebAssembly</a></code> Namespace, when invoked, performs the following steps:",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>JSTagAddr</var> be the result of <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#get-the-javascript-exception-tag\" id=\"ref-for-get-the-javascript-exception-tag\">getting the JavaScript exception tag</a>.</p>"
        },
        {
          "html": "<p>Let <var>JSTagObject</var> be the result of <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#create-a-tag-object\" id=\"ref-for-create-a-tag-object①\">creating a Tag object</a> from <var>JSTagAddr</var>.</p>"
        },
        {
          "html": "<p>Return <var>JSTagObject</var>.</p>"
        }
      ]
    },
    {
      "name": "Module/exports(moduleObject)",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-module-exports",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Module\" data-dfn-type=\"method\" data-export=\"\" id=\"dom-module-exports\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>exports(<var>moduleObject</var>)</code></dfn> method, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>module</var> be <var>moduleObject</var>.[[Module]].</p>"
        },
        {
          "html": "<p>Let <var>exports</var> be « ».</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate⑤\">For each</a> (<var>name</var>, <var>type</var>) of <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-module-exports\" id=\"ref-for-embed-module-exports①\">module_exports</a>(<var>module</var>),",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>kind</var> be the <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#string-value-of-the-extern-type\" id=\"ref-for-string-value-of-the-extern-type\">string value of the extern type</a> <var>type</var>.</p>"
            },
            {
              "html": "<p>Let <var>obj</var> be «[ \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#dom-moduleexportdescriptor-name\" id=\"ref-for-dom-moduleexportdescriptor-name\">name</a></code>\" → <var>name</var>, \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#dom-moduleexportdescriptor-kind\" id=\"ref-for-dom-moduleexportdescriptor-kind\">kind</a></code>\" → <var>kind</var> ]».</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append⑤\">Append</a> <var>obj</var> to <var>exports</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <var>exports</var>.</p>"
        }
      ]
    },
    {
      "name": "Module/imports(moduleObject)",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-module-imports",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Module\" data-dfn-type=\"method\" data-export=\"\" id=\"dom-module-imports\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>imports(<var>moduleObject</var>)</code></dfn> method, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>module</var> be <var>moduleObject</var>.[[Module]].</p>"
        },
        {
          "html": "<p>Let <var>builtinSetNames</var> be <var>moduleObject</var>.[[BuiltinSets]].</p>"
        },
        {
          "html": "<p>Let <var>importedStringModule</var> be <var>moduleObject</var>.[[ImportedStringModule]].</p>"
        },
        {
          "html": "<p>Let <var>imports</var> be « ».</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate⑥\">For each</a> (<var>moduleName</var>, <var>name</var>, <var>type</var>) of <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-module-imports\" id=\"ref-for-embed-module-imports③\">module_imports</a>(<var>module</var>),",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#find-a-builtin\" id=\"ref-for-find-a-builtin\">find a builtin</a> for (<var>moduleName</var>, <var>name</var>, <var>type</var>) and <var>builtinSetNames</var> is not null, then <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#iteration-continue\" id=\"ref-for-iteration-continue②\">continue</a>.</p>"
            },
            {
              "html": "<p>If <var>importedStringModule</var> is not null and <var>moduleName</var> equals <var>importedStringModule</var>, then <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#iteration-continue\" id=\"ref-for-iteration-continue③\">continue</a>.</p>"
            },
            {
              "html": "<p>Let <var>kind</var> be the <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#string-value-of-the-extern-type\" id=\"ref-for-string-value-of-the-extern-type①\">string value of the extern type</a> <var>type</var>.</p>"
            },
            {
              "html": "<p>Let <var>obj</var> be «[ \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#dom-moduleimportdescriptor-module\" id=\"ref-for-dom-moduleimportdescriptor-module\">module</a></code>\" → <var>moduleName</var>, \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#dom-moduleimportdescriptor-name\" id=\"ref-for-dom-moduleimportdescriptor-name\">name</a></code>\" → <var>name</var>, \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#dom-moduleimportdescriptor-kind\" id=\"ref-for-dom-moduleimportdescriptor-kind\">kind</a></code>\" → <var>kind</var> ]».</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append⑥\">Append</a> <var>obj</var> to <var>imports</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <var>imports</var>.</p>"
        }
      ]
    },
    {
      "name": "Module/customSections(moduleObject, sectionName)",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-module-customsections",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Module\" data-dfn-type=\"method\" data-export=\"\" id=\"dom-module-customsections\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>customSections(<var>moduleObject</var>, <var>sectionName</var>)</code></dfn> method, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>bytes</var> be <var>moduleObject</var>.[[Bytes]].</p>"
        },
        {
          "html": "<p>Let <var>customSections</var> be « ».</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate⑦\">For each</a> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/binary/modules.html#custom-section\" id=\"ref-for-custom-section\">custom section</a> <var>customSection</var> of <var>bytes</var>, interpreted according to the <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/binary/modules.html#binary-module\" id=\"ref-for-binary-module\">module grammar</a>,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>name</var> be the <code>name</code> of <var>customSection</var>, <a data-link-type=\"dfn\" href=\"https://encoding.spec.whatwg.org/#utf-8-decode-without-bom-or-fail\" id=\"ref-for-utf-8-decode-without-bom-or-fail\">decoded as UTF-8</a>.</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>name</var> is not failure (<var>moduleObject</var>.[[Module]] is <a data-link-type=\"dfn\" data-refhint-key=\"db25377b\" href=\"https://webassembly.github.io/spec/core/valid/modules.html#valid-module\" id=\"ref-for-valid-module①\">valid</a>).</p>"
            },
            {
              "html": "If <var>name</var> equals <var>sectionName</var> as string values,",
              "rationale": "append",
              "steps": [
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append⑦\">Append</a> a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-arraybuffer-objects\" id=\"ref-for-sec-arraybuffer-objects①\">ArrayBuffer</a></code> containing a copy of the bytes in <var>bytes</var> for the range matched by this <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/binary/modules.html#binary-customsec\" id=\"ref-for-binary-customsec\">customsec</a> production to <var>customSections</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <var>customSections</var>.</p>"
        }
      ]
    },
    {
      "name": "Module/Module(bytes, options)",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-module-module",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Module\" data-dfn-type=\"constructor\" data-export=\"\" data-lt=\"Module(bytes, options)|constructor(bytes, options)|Module(bytes)|constructor(bytes)\" id=\"dom-module-module\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>Module(<var>bytes</var>, <var>options</var>)</code></dfn> constructor, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stableBytes</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-get-buffer-source-copy\" id=\"ref-for-dfn-get-buffer-source-copy③\">copy of the bytes held by the buffer</a> <var>bytes</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#compile-a-webassembly-module\" id=\"ref-for-compile-a-webassembly-module②\">Compile the WebAssembly module</a> <var>stableBytes</var> and store the result as <var>module</var>.</p>"
        },
        {
          "html": "<p>If <var>module</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error⑧\">error</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-compileerror\" id=\"ref-for-exceptiondef-compileerror②\">CompileError</a></code> exception.</p>"
        },
        {
          "html": "<p>Let <var>builtinSetNames</var> be <var>options</var>[\"builtins\"].</p>"
        },
        {
          "html": "<p>Let <var>importedStringModule</var> be <var>options</var>[\"importedStringConstants\"].</p>"
        },
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#validate-builtins-and-imported-string-for-a-webassembly-module\" id=\"ref-for-validate-builtins-and-imported-string-for-a-webassembly-module②\">validating builtins and imported strings</a> for <var>module</var> with <var>builtinSetNames</var> and <var>importedStringModule</var> returns false, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-compileerror\" id=\"ref-for-exceptiondef-compileerror③\">CompileError</a></code> exception.</p>"
        },
        {
          "html": "<p>Set <strong>this</strong>.[[Module]] to <var>module</var>.</p>"
        },
        {
          "html": "<p>Set <strong>this</strong>.[[Bytes]] to <var>stableBytes</var>.</p>"
        },
        {
          "html": "<p>Set <strong>this</strong>.[[BuiltinSets]] to <var>builtinSetNames</var>.</p>"
        },
        {
          "html": "<p>Set <strong>this</strong>.[[ImportedStringModule]] to <var>importedStringModule</var>.</p>"
        }
      ]
    },
    {
      "name": "Instance/Instance(module, importObject)",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-instance-instance",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Instance\" data-dfn-type=\"constructor\" data-export=\"\" data-lt=\"Instance(module, importObject)|constructor(module, importObject)|Instance(module)|constructor(module)\" id=\"dom-instance-instance\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>Instance(<var>module</var>, <var>importObject</var>)</code></dfn> constructor, when invoked, runs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>module</var> be <var>module</var>.[[Module]].</p>"
        },
        {
          "html": "<p>Let <var>builtinSetNames</var> be <var>module</var>.[[BuiltinSets]].</p>"
        },
        {
          "html": "<p>Let <var>importedStringModule</var> be <var>module</var>.[[ImportedStringModule]].</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#read-the-imports\" id=\"ref-for-read-the-imports①\">Read the imports</a> of <var>module</var> with imports <var>importObject</var>, <var>builtinSetNames</var>, and <var>importedStringModule</var>, and let <var>imports</var> be the result.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#instantiate-the-core-of-a-webassembly-module\" id=\"ref-for-instantiate-the-core-of-a-webassembly-module②\">Instantiate the core of a WebAssembly module</a> <var>module</var> with <var>imports</var>, and let <var>instance</var> be the result.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#initialize-an-instance-object\" id=\"ref-for-initialize-an-instance-object①\">Initialize</a> <strong>this</strong> from <var>module</var> and <var>instance</var>.</p>"
        }
      ]
    },
    {
      "name": "create a fixed length memory buffer",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#create-a-fixed-length-memory-buffer",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"create-a-fixed-length-memory-buffer\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">create a fixed length memory buffer</dfn> from a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-memaddr\" id=\"ref-for-syntax-memaddr②\">memory address</a> <var>memaddr</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>block</var> be a <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-data-blocks\" id=\"ref-for-sec-data-blocks②\">Data Block</a> which is <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#identified-with\" id=\"ref-for-identified-with①\">identified with</a> the underlying memory of <var>memaddr</var>.</p>"
        },
        {
          "html": "<p>Let <var>buffer</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-arraybuffer-objects\" id=\"ref-for-sec-arraybuffer-objects⑥\">ArrayBuffer</a></code> with the internal slots [[ArrayBufferData]], [[ArrayBufferByteLength]], and [[ArrayBufferDetachKey]].</p>"
        },
        {
          "html": "<p>Set <var>buffer</var>.[[ArrayBufferData]] to <var>block</var>.</p>"
        },
        {
          "html": "<p>Set <var>buffer</var>.[[ArrayBufferByteLength]] to the length of <var>block</var>.</p>"
        },
        {
          "html": "<p>Set <var>buffer</var>.[[ArrayBufferDetachKey]] to \"WebAssembly.Memory\".</p>"
        },
        {
          "html": "<p>Return <var>buffer</var>.</p>"
        }
      ]
    },
    {
      "name": "create a resizable memory buffer",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#create-a-resizable-memory-buffer",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"create-a-resizable-memory-buffer\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">create a resizable memory buffer</dfn> from a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-memaddr\" id=\"ref-for-syntax-memaddr③\">memory address</a> <var>memaddr</var> and a <var>maxsize</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>block</var> be a <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-data-blocks\" id=\"ref-for-sec-data-blocks③\">Data Block</a> which is <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#identified-with\" id=\"ref-for-identified-with②\">identified with</a> the underlying memory of <var>memaddr</var>.</p>"
        },
        {
          "html": "<p>Let <var>length</var> be the length of <var>block</var>.</p>"
        },
        {
          "html": "<p>Let <var>buffer</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-arraybuffer-objects\" id=\"ref-for-sec-arraybuffer-objects⑦\">ArrayBuffer</a></code> with the internal slots [[ArrayBufferData]], [[ArrayBufferByteLength]], [[ArrayBufferMaxByteLength]], and [[ArrayBufferDetachKey]].</p>"
        },
        {
          "html": "<p>Set <var>buffer</var>.[[ArrayBufferData]] to <var>block</var>.</p>"
        },
        {
          "html": "<p>Set <var>buffer</var>.[[ArrayBufferByteLength]] to <var>length</var>.</p>"
        },
        {
          "html": "<p>Set <var>buffer</var>.[[ArrayBufferMaxByteLength]] is <var>maxsize</var>.</p>"
        },
        {
          "html": "<p>Set <var>buffer</var>.[[ArrayBufferDetachKey]] to \"WebAssembly.Memory\".</p>"
        },
        {
          "html": "<p>Return <var>buffer</var>.</p>"
        }
      ]
    },
    {
      "name": "initialize a memory object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#initialize-a-memory-object",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"initialize-a-memory-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">initialize a memory object</dfn> <var>memory</var> from a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-memaddr\" id=\"ref-for-syntax-memaddr④\">memory address</a> <var>memaddr</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>map</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent④\">surrounding agent</a>’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#memory-object-cache\" id=\"ref-for-memory-object-cache\">Memory object cache</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>map</var>[<var>memaddr</var>] doesn’t <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists②\">exist</a>.</p>"
        },
        {
          "html": "<p>Let <var>buffer</var> be the result of <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#create-a-fixed-length-memory-buffer\" id=\"ref-for-create-a-fixed-length-memory-buffer\">creating a fixed length memory buffer</a> from <var>memaddr</var>.</p>"
        },
        {
          "html": "<p>Set <var>memory</var>.[[Memory]] to <var>memaddr</var>.</p>"
        },
        {
          "html": "<p>Set <var>memory</var>.[[BufferObject]] to <var>buffer</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-set\" id=\"ref-for-map-set②\">Set</a> <var>map</var>[<var>memaddr</var>] to <var>memory</var>.</p>"
        }
      ]
    },
    {
      "name": "create a memory object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#create-a-memory-object",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"create-a-memory-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">create a memory object</dfn> from a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-memaddr\" id=\"ref-for-syntax-memaddr⑤\">memory address</a> <var>memaddr</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>map</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent⑤\">surrounding agent</a>’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#memory-object-cache\" id=\"ref-for-memory-object-cache①\">Memory object cache</a>.</p>"
        },
        {
          "html": "If <var>map</var>[<var>memaddr</var>] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists③\">exists</a>,",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return <var>map</var>[<var>memaddr</var>].</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>memory</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new①\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#memory\" id=\"ref-for-memory⑤\">Memory</a></code>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#initialize-a-memory-object\" id=\"ref-for-initialize-a-memory-object\">Initialize</a> <var>memory</var> from <var>memaddr</var>.</p>"
        },
        {
          "html": "<p>Return <var>memory</var>.</p>"
        }
      ]
    },
    {
      "name": "Memory/Memory(descriptor)",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-memory-memory",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Memory\" data-dfn-type=\"constructor\" data-export=\"\" data-lt=\"Memory(descriptor)|constructor(descriptor)\" id=\"dom-memory-memory\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>Memory(<var>descriptor</var>)</code></dfn> constructor, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>descriptor</var>[\"address\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists④\">exists</a>, let <var>addrtype</var> be <var>descriptor</var>[\"address\"]; otherwise, let <var>addrtype</var> be \"i32\".</p>"
        },
        {
          "html": "<p>Let <var>initial</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑧\">?</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#addressvaluetou64\" id=\"ref-for-addressvaluetou64\">AddressValueToU64</a>(<var>descriptor</var>[\"initial\"], <var>addrtype</var>).</p>"
        },
        {
          "html": "<p>If <var>descriptor</var>[\"maximum\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑤\">exists</a>, let <var>maximum</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑨\">?</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#addressvaluetou64\" id=\"ref-for-addressvaluetou64①\">AddressValueToU64</a>(<var>descriptor</var>[\"maximum\"], <var>addrtype</var>); otherwise, let <var>maximum</var> be empty.</p>"
        },
        {
          "html": "<p>Let <var>memtype</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-memtype\" id=\"ref-for-syntax-memtype\">memory type</a> <var>addrtype</var> { <strong>min</strong> <var>initial</var>, <strong>max</strong> <var>maximum</var> }.</p>"
        },
        {
          "html": "<p>If <var>memtype</var> is not <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/valid/types.html#valid-memtype\" id=\"ref-for-valid-memtype\">valid</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-rangeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-rangeerror\">RangeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent⑥\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store④\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let (<var>store</var>, <var>memaddr</var>) be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-mem-alloc\" id=\"ref-for-embed-mem-alloc\">mem_alloc</a>(<var>store</var>, <var>memtype</var>). If allocation fails, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-rangeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-rangeerror①\">RangeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Set the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent⑦\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store⑤\">associated store</a> to <var>store</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#initialize-a-memory-object\" id=\"ref-for-initialize-a-memory-object①\">Initialize</a> <strong>this</strong> from <var>memaddr</var>.</p>"
        }
      ]
    },
    {
      "name": "refresh the Memory buffer",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#refresh-the-memory-buffer",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"refresh-the-memory-buffer\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">refresh the Memory buffer</dfn> of <var>memaddr</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>map</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent⑧\">surrounding agent</a>’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#memory-object-cache\" id=\"ref-for-memory-object-cache②\">Memory object cache</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>map</var>[<var>memaddr</var>] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑥\">exists</a>.</p>"
        },
        {
          "html": "<p>Let <var>memory</var> be <var>map</var>[<var>memaddr</var>].</p>"
        },
        {
          "html": "<p>Let <var>buffer</var> be <var>memory</var>.[[BufferObject]].</p>"
        },
        {
          "html": "If <a data-link-type=\"dfn\" href=\"https://tc39.es/proposal-resizablearraybuffer/#sec-isfixedarraybuffer\" id=\"ref-for-sec-isfixedarraybuffer\">IsFixedLengthArrayBuffer</a>(<var>buffer</var>) is true,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①⓪\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-detacharraybuffer\" id=\"ref-for-sec-detacharraybuffer\">DetachArrayBuffer</a>(<var>buffer</var>, \"WebAssembly.Memory\").</p>"
            },
            {
              "html": "<p>Let <var>buffer</var> be the result of <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#create-a-fixed-length-memory-buffer\" id=\"ref-for-create-a-fixed-length-memory-buffer①\">creating a fixed length memory buffer</a> from <var>memaddr</var>.</p>"
            },
            {
              "html": "<p>Set <var>memory</var>.[[BufferObject]] to <var>buffer</var>.</p>"
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>block</var> be a <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-data-blocks\" id=\"ref-for-sec-data-blocks④\">Data Block</a> which is <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#identified-with\" id=\"ref-for-identified-with③\">identified with</a> the underlying memory of <var>memaddr</var>.</p>"
            },
            {
              "html": "<p>Set <var>buffer</var>.[[ArrayBufferData]] to <var>block</var>.</p>"
            },
            {
              "html": "<p>Set <var>buffer</var>.[[ArrayBufferByteLength]] to the length of <var>block</var>.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "grow the memory buffer",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#grow-the-memory-buffer",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"grow-the-memory-buffer\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">grow the memory buffer</dfn> associated with a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-memaddr\" id=\"ref-for-syntax-memaddr⑥\">memory address</a> <var>memaddr</var> by <var>delta</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent⑨\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store⑥\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let <var>ret</var> be the <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-mem-size\" id=\"ref-for-embed-mem-size\">mem_size</a>(<var>store</var>, <var>memaddr</var>).</p>"
        },
        {
          "html": "<p>Let <var>store</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-mem-grow\" id=\"ref-for-embed-mem-grow\">mem_grow</a>(<var>store</var>, <var>memaddr</var>, <var>delta</var>).</p>"
        },
        {
          "html": "<p>If <var>store</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error⑨\">error</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-rangeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-rangeerror②\">RangeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Set the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent①⓪\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store⑦\">associated store</a> to <var>store</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#refresh-the-memory-buffer\" id=\"ref-for-refresh-the-memory-buffer\">Refresh the memory buffer</a> of <var>memaddr</var>.</p>"
        },
        {
          "html": "<p>Return <var>ret</var>.</p>"
        }
      ]
    },
    {
      "name": "dom-Memory-grow",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-memory-grow",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Memory\" data-dfn-type=\"method\" data-export=\"\" id=\"dom-memory-grow\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>grow(<var>delta</var>)</code></dfn> method, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>memaddr</var> be <strong>this</strong>.[[Memory]].</p>"
        },
        {
          "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent①①\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store⑧\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let <var>addrtype</var> be the <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-addrtype\" id=\"ref-for-syntax-addrtype\">address type</a> in <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-mem-type\" id=\"ref-for-embed-mem-type\">mem_type</a>(<var>store</var>, <var>memaddr</var>).</p>"
        },
        {
          "html": "<p>Let <var>delta64</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①①\">?</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#addressvaluetou64\" id=\"ref-for-addressvaluetou64②\">AddressValueToU64</a>(<var>delta</var>, <var>addrtype</var>).</p>"
        },
        {
          "html": "<p>Let <var>ret</var> be the result of <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#grow-the-memory-buffer\" id=\"ref-for-grow-the-memory-buffer\">growing the memory buffer</a> associated with <var>memaddr</var> by <var>delta64</var>.</p>"
        },
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#u64toaddressvalue\" id=\"ref-for-u64toaddressvalue\">U64ToAddressValue</a>(<var>ret</var>, <var>addrtype</var>).</p>"
        }
      ]
    },
    {
      "name": "memory.grow",
      "html": "",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the top of the stack is not <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values\">i32.const</a> (−1),",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>frame</var> be the <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/conventions.html#exec-notation-textual\" id=\"ref-for-exec-notation-textual\">current frame</a>.</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: due to validation, <var>frame</var>.<a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-frame\" id=\"ref-for-syntax-frame\">module</a>.<a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-moduleinst\" id=\"ref-for-syntax-moduleinst\">memaddrs</a>[0] exists.</p>"
            },
            {
              "html": "<p>Let <var>memaddr</var> be the memory address <var>frame</var>.<a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-frame\" id=\"ref-for-syntax-frame①\">module</a>.<a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-moduleinst\" id=\"ref-for-syntax-moduleinst①\">memaddrs</a>[0].</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#refresh-the-memory-buffer\" id=\"ref-for-refresh-the-memory-buffer①\">Refresh the memory buffer</a> of <var>memaddr</var>.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "dom-Memory-toFixedLengthBuffer",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-memory-tofixedlengthbuffer",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Memory\" data-dfn-type=\"method\" data-export=\"\" id=\"dom-memory-tofixedlengthbuffer\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>toFixedLengthBuffer()</code></dfn> method, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>buffer</var> be <strong>this</strong>.[[BufferObject]].</p>"
        },
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://tc39.es/proposal-resizablearraybuffer/#sec-isfixedarraybuffer\" id=\"ref-for-sec-isfixedarraybuffer①\">IsFixedLengthArrayBuffer</a>(<var>buffer</var>) is true, return <var>buffer</var>.</p>"
        },
        {
          "html": "<p>Let <var>memaddr</var> be <strong>this</strong>.[[Memory]].</p>"
        },
        {
          "html": "<p>Let <var>fixedBuffer</var> be the result of <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#create-a-fixed-length-memory-buffer\" id=\"ref-for-create-a-fixed-length-memory-buffer②\">creating a fixed length memory buffer</a> from <var>memaddr</var>.</p>"
        },
        {
          "html": "<p>Perform <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①②\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-detacharraybuffer\" id=\"ref-for-sec-detacharraybuffer①\">DetachArrayBuffer</a>(<var>buffer</var>, \"WebAssembly.Memory\").</p>"
        },
        {
          "html": "<p>Set <strong>this</strong>.[[BufferObject]] to <var>fixedBuffer</var>.</p>"
        },
        {
          "html": "<p>Return <var>fixedBuffer</var>.</p>"
        }
      ]
    },
    {
      "name": "dom-Memory-toResizableBuffer",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-memory-toresizablebuffer",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Memory\" data-dfn-type=\"method\" data-export=\"\" id=\"dom-memory-toresizablebuffer\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>toResizableBuffer()</code></dfn> method, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>memaddr</var> be <strong>this</strong>.[[Memory]].</p>"
        },
        {
          "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent①②\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store⑨\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let <var>memtype</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-mem-type\" id=\"ref-for-embed-mem-type①\">mem_type</a>(<var>store</var>, <var>memaddr</var>).</p>"
        },
        {
          "html": "If <var>memtype</var> does not have a max,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-throw\" id=\"ref-for-dfn-throw\">Throw</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror③\">TypeError</a></code> exception.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>buffer</var> be <strong>this</strong>.[[BufferObject]].</p>"
        },
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://tc39.es/proposal-resizablearraybuffer/#sec-isfixedarraybuffer\" id=\"ref-for-sec-isfixedarraybuffer②\">IsFixedLengthArrayBuffer</a>(<var>buffer</var>) is false, return <var>buffer</var>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>memtype</var> has a max.</p>"
        },
        {
          "html": "<p>Let <var>maxsize</var> be the max value in <var>memtype</var> * 65536.</p>"
        },
        {
          "html": "<p>Let <var>resizableBuffer</var> be the result of <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#create-a-resizable-memory-buffer\" id=\"ref-for-create-a-resizable-memory-buffer\">creating a resizable memory buffer</a> from <var>memaddr</var> and <var>maxsize</var>.</p>"
        },
        {
          "html": "<p>Perform <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①③\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-detacharraybuffer\" id=\"ref-for-sec-detacharraybuffer②\">DetachArrayBuffer</a>(<var>buffer</var>, \"WebAssembly.Memory\").</p>"
        },
        {
          "html": "<p>Set <strong>this</strong>.[[BufferObject]] to <var>resizableBuffer</var>.</p>"
        },
        {
          "html": "<p>Return <var>resizableBuffer</var>.</p>"
        }
      ]
    },
    {
      "name": "abstract operation HostResizeArrayBuffer",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#HostResizeArrayBuffer",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-export=\"\" id=\"HostResizeArrayBuffer\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">abstract operation <a data-link-type=\"dfn\" href=\"https://tc39.es/proposal-resizablearraybuffer/#sec-hostresizearraybuffer\" id=\"ref-for-sec-hostresizearraybuffer①\">HostResizeArrayBuffer</a></dfn> takes arguments <var>buffer</var> (an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-arraybuffer-objects\" id=\"ref-for-sec-arraybuffer-objects⑨\">ArrayBuffer</a></code>) and <var>newLength</var>. It performs the following steps when called.",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>buffer</var>.[[ArrayBufferDetachKey]] is \"WebAssembly.Memory\",",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>map</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent①③\">surrounding agent</a>’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#memory-object-cache\" id=\"ref-for-memory-object-cache③\">Memory object cache</a>.</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>buffer</var> is the [[BufferObject]] of exactly one value in <var>map</var>.</p>"
            },
            {
              "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-iterate\" id=\"ref-for-map-iterate\">For each</a> <var>memaddr</var> → <var>mem</var> in <var>map</var>,",
              "rationale": "if",
              "steps": [
                {
                  "html": "If <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-samevalue\" id=\"ref-for-sec-samevalue\">SameValue</a>(<var>mem</var>.[[BufferObject]], <var>buffer</var>) is true,",
                  "rationale": "assert",
                  "steps": [
                    {
                      "html": "<p class=\"assertion\">Assert: <var>buffer</var>.[[ArrayBufferByteLength]] modulo 65536 is 0.</p>"
                    },
                    {
                      "html": "<p>Let <var>lengthDelta</var> be <var>newLength</var> - <var>buffer</var>.[[ArrayBufferByteLength]].</p>"
                    },
                    {
                      "html": "If <var>lengthDelta</var> &lt; 0 or <var>lengthDelta</var> modulo 65536 is not 0,",
                      "rationale": "throw",
                      "steps": [
                        {
                          "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-rangeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-rangeerror③\">RangeError</a></code> exception.</p>"
                        }
                      ]
                    },
                    {
                      "html": "<p>Let <var>delta</var> be <var>lengthDelta</var> ÷ 65536.</p>"
                    },
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#grow-the-memory-buffer\" id=\"ref-for-grow-the-memory-buffer①\">Grow the memory buffer</a> associated with <var>memaddr</var> by <var>delta</var>.</p>"
                    }
                  ]
                }
              ]
            },
            {
              "html": "<p>Return <emu-const>handled</emu-const>.</p>"
            }
          ]
        },
        {
          "html": "<p>Otherwise, return <emu-const>unhandled</emu-const>.</p>"
        }
      ]
    },
    {
      "name": "initialize a table object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#initialize-a-table-object",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"initialize-a-table-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">initialize a table object</dfn> <var>table</var> from a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-tableaddr\" id=\"ref-for-syntax-tableaddr②\">table address</a> <var>tableaddr</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>map</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent①④\">surrounding agent</a>’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#table-object-cache\" id=\"ref-for-table-object-cache\">Table object cache</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>map</var>[<var>tableaddr</var>] doesn’t <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑦\">exist</a>.</p>"
        },
        {
          "html": "<p>Set <var>table</var>.[[Table]] to <var>tableaddr</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-set\" id=\"ref-for-map-set③\">Set</a> <var>map</var>[<var>tableaddr</var>] to <var>table</var>.</p>"
        }
      ]
    },
    {
      "name": "create a table object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#create-a-table-object",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"create-a-table-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">create a table object</dfn> from a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-tableaddr\" id=\"ref-for-syntax-tableaddr③\">table address</a> <var>tableaddr</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>map</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent①⑤\">surrounding agent</a>’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#table-object-cache\" id=\"ref-for-table-object-cache①\">Table object cache</a>.</p>"
        },
        {
          "html": "If <var>map</var>[<var>tableaddr</var>] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑧\">exists</a>,",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return <var>map</var>[<var>tableaddr</var>].</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>table</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new②\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#table\" id=\"ref-for-table④\">Table</a></code>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#initialize-a-table-object\" id=\"ref-for-initialize-a-table-object\">Initialize</a> <var>table</var> from <var>tableaddr</var>.</p>"
        },
        {
          "html": "<p>Return <var>table</var>.</p>"
        }
      ]
    },
    {
      "name": "Table/Table(descriptor, value)",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-table-table",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Table\" data-dfn-type=\"constructor\" data-export=\"\" data-lt=\"Table(descriptor, value)|constructor(descriptor, value)|Table(descriptor)|constructor(descriptor)\" id=\"dom-table-table\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>Table(<var>descriptor</var>, <var>value</var>)</code></dfn> constructor, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>elementtype</var> be <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tovaluetype\" id=\"ref-for-tovaluetype\">ToValueType</a>(<var>descriptor</var>[\"element\"]).</p>"
        },
        {
          "html": "If <var>elementtype</var> is not a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/valid/matching.html#match-reftype\" id=\"ref-for-match-reftype\">reftype</a>,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-throw\" id=\"ref-for-dfn-throw①\">Throw</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror④\">TypeError</a></code> exception.</p>"
            }
          ]
        },
        {
          "html": "<p>If <var>descriptor</var>[\"address\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑨\">exists</a>, let <var>addrtype</var> be <var>descriptor</var>[\"address\"]; otherwise, let <var>addrtype</var> be \"i32\".</p>"
        },
        {
          "html": "<p>Let <var>initial</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①④\">?</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#addressvaluetou64\" id=\"ref-for-addressvaluetou64③\">AddressValueToU64</a>(<var>descriptor</var>[\"initial\"], <var>addrtype</var>).</p>"
        },
        {
          "html": "<p>If <var>descriptor</var>[\"maximum\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①⓪\">exists</a>, let <var>maximum</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①⑤\">?</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#addressvaluetou64\" id=\"ref-for-addressvaluetou64④\">AddressValueToU64</a>(<var>descriptor</var>[\"maximum\"], <var>addrtype</var>); otherwise, let <var>maximum</var> be empty.</p>"
        },
        {
          "html": "<p>Let <var>type</var> be the <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-tabletype\" id=\"ref-for-syntax-tabletype\">table type</a> <var>addrtype</var> { <b><a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-limits\" id=\"ref-for-syntax-limits\">min</a></b> <var>initial</var>, <b><a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-limits\" id=\"ref-for-syntax-limits①\">max</a></b> <var>maximum</var> } <var>elementType</var>.</p>"
        },
        {
          "html": "<p>If <var>type</var> is not <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/valid/types.html#valid-tabletype\" id=\"ref-for-valid-tabletype\">valid</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-rangeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-rangeerror④\">RangeError</a></code> exception.</p>"
        },
        {
          "html": "If <var>value</var> is missing,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>ref</var> be <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#defaultvalue\" id=\"ref-for-defaultvalue\">DefaultValue</a>(<var>elementtype</var>).</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>ref</var> is not <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error①⓪\">error</a>.</p>"
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>ref</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①⑥\">?</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#towebassemblyvalue\" id=\"ref-for-towebassemblyvalue①\">ToWebAssemblyValue</a>(<var>value</var>, <var>elementType</var>).</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent①⑥\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store①⓪\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let (<var>store</var>, <var>tableaddr</var>) be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-table-alloc\" id=\"ref-for-embed-table-alloc\">table_alloc</a>(<var>store</var>, <var>type</var>, <var>ref</var>). If allocation fails, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-rangeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-rangeerror⑤\">RangeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Set the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent①⑦\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store①①\">associated store</a> to <var>store</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#initialize-a-table-object\" id=\"ref-for-initialize-a-table-object①\">Initialize</a> <strong>this</strong> from <var>tableaddr</var>.</p>"
        }
      ]
    },
    {
      "name": "dom-Table-grow",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-table-grow",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Table\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"grow(delta, value)|grow(delta)\" id=\"dom-table-grow\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>grow(<var>delta</var>, <var>value</var>)</code></dfn> method, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>tableaddr</var> be <strong>this</strong>.[[Table]].</p>"
        },
        {
          "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent①⑧\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store①②\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let <var>initialSize</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-table-size\" id=\"ref-for-embed-table-size\">table_size</a>(<var>store</var>, <var>tableaddr</var>).</p>"
        },
        {
          "html": "<p>Let (<var>addrtype</var>, <var>limits</var>, <var>elementtype</var>) be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-table-type\" id=\"ref-for-embed-table-type\">table_type</a>(<var>store</var>, <var>tableaddr</var>).</p>"
        },
        {
          "html": "<p>Let <var>delta64</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①⑦\">?</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#addressvaluetou64\" id=\"ref-for-addressvaluetou64⑤\">AddressValueToU64</a>(<var>delta</var>, <var>addrtype</var>).</p>"
        },
        {
          "html": "If <var>value</var> is missing,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>ref</var> be <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#defaultvalue\" id=\"ref-for-defaultvalue①\">DefaultValue</a>(<var>elementtype</var>).</p>"
            },
            {
              "html": "<p>If <var>ref</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error①①\">error</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑤\">TypeError</a></code> exception.</p>"
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>ref</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①⑧\">?</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#towebassemblyvalue\" id=\"ref-for-towebassemblyvalue②\">ToWebAssemblyValue</a>(<var>value</var>, <var>elementtype</var>).</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>result</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-table-grow\" id=\"ref-for-embed-table-grow\">table_grow</a>(<var>store</var>, <var>tableaddr</var>, <var>delta64</var>, <var>ref</var>).</p>"
        },
        {
          "html": "<p>If <var>result</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error①②\">error</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-rangeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-rangeerror⑥\">RangeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Set the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent①⑨\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store①③\">associated store</a> to <var>result</var>.</p>"
        },
        {
          "html": "<p>Return <var>initialSize</var>.</p>"
        }
      ]
    },
    {
      "name": "Table/length",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-table-length",
      "html": "The getter of the <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Table\" data-dfn-type=\"attribute\" data-export=\"\" id=\"dom-table-length\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>length</code></dfn> attribute of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#table\" id=\"ref-for-table⑤\">Table</a></code>, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>tableaddr</var> be <strong>this</strong>.[[Table]].</p>"
        },
        {
          "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent②⓪\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store①④\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let <var>addrtype</var> be the <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-addrtype\" id=\"ref-for-syntax-addrtype①\">address type</a> in <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-table-type\" id=\"ref-for-embed-table-type①\">table_type</a>(<var>store</var>, <var>tableaddr</var>).</p>"
        },
        {
          "html": "<p>Let <var>length64</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-table-size\" id=\"ref-for-embed-table-size①\">table_size</a>(<var>store</var>, <var>tableaddr</var>).</p>"
        },
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#u64toaddressvalue\" id=\"ref-for-u64toaddressvalue①\">U64ToAddressValue</a>(<var>length64</var>, <var>addrtype</var>).</p>"
        }
      ]
    },
    {
      "name": "Table/get(index)",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-table-get",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Table\" data-dfn-type=\"method\" data-export=\"\" id=\"dom-table-get\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>get(<var>index</var>)</code></dfn> method, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>tableaddr</var> be <strong>this</strong>.[[Table]].</p>"
        },
        {
          "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent②①\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store①⑤\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let (<var>addrtype</var>, <var>limits</var>, <var>elementtype</var>) be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-table-type\" id=\"ref-for-embed-table-type②\">table_type</a>(<var>store</var>, <var>tableaddr</var>).</p>"
        },
        {
          "html": "If <var>elementtype</var> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/valid/matching.html#match-reftype\" id=\"ref-for-match-reftype①\">matches</a> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype\">exnref</a>,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑥\">TypeError</a></code> exception.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>index64</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands①⑨\">?</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#addressvaluetou64\" id=\"ref-for-addressvaluetou64⑥\">AddressValueToU64</a>(<var>index</var>, <var>addrtype</var>).</p>"
        },
        {
          "html": "<p>Let <var>result</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-table-read\" id=\"ref-for-embed-table-read\">table_read</a>(<var>store</var>, <var>tableaddr</var>, <var>index64</var>).</p>"
        },
        {
          "html": "<p>If <var>result</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error①③\">error</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-rangeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-rangeerror⑦\">RangeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tojsvalue\" id=\"ref-for-tojsvalue\">ToJSValue</a>(<var>result</var>).</p>"
        }
      ]
    },
    {
      "name": "Table/set(index, value)",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-table-set",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Table\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"set(index, value)|set(index)\" id=\"dom-table-set\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>set(<var>index</var>, <var>value</var>)</code></dfn> method, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>tableaddr</var> be <strong>this</strong>.[[Table]].</p>"
        },
        {
          "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent②②\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store①⑥\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let (<var>addrtype</var>, <var>limits</var>, <var>elementtype</var>) be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-table-type\" id=\"ref-for-embed-table-type③\">table_type</a>(<var>store</var>, <var>tableaddr</var>).</p>"
        },
        {
          "html": "If <var>elementtype</var> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/valid/matching.html#match-reftype\" id=\"ref-for-match-reftype②\">matches</a> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype①\">exnref</a>,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑦\">TypeError</a></code> exception.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>index64</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②⓪\">?</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#addressvaluetou64\" id=\"ref-for-addressvaluetou64⑦\">AddressValueToU64</a>(<var>index</var>, <var>addrtype</var>).</p>"
        },
        {
          "html": "If <var>value</var> is missing,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>ref</var> be <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#defaultvalue\" id=\"ref-for-defaultvalue②\">DefaultValue</a>(<var>elementtype</var>).</p>"
            },
            {
              "html": "<p>If <var>ref</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error①④\">error</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑧\">TypeError</a></code> exception.</p>"
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>ref</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②①\">?</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#towebassemblyvalue\" id=\"ref-for-towebassemblyvalue③\">ToWebAssemblyValue</a>(<var>value</var>, <var>elementtype</var>).</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>store</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-table-write\" id=\"ref-for-embed-table-write\">table_write</a>(<var>store</var>, <var>tableaddr</var>, <var>index64</var>, <var>ref</var>).</p>"
        },
        {
          "html": "<p>If <var>store</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error①⑤\">error</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-rangeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-rangeerror⑧\">RangeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Set the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent②③\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store①⑦\">associated store</a> to <var>store</var>.</p>"
        }
      ]
    },
    {
      "name": "initialize a global object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#initialize-a-global-object",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"initialize-a-global-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">initialize a global object</dfn> <var>global</var> from a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-globaladdr\" id=\"ref-for-syntax-globaladdr②\">global address</a> <var>globaladdr</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>map</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent②④\">surrounding agent</a>’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#global-object-cache\" id=\"ref-for-global-object-cache\">Global object cache</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>map</var>[<var>globaladdr</var>] doesn’t <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①①\">exist</a>.</p>"
        },
        {
          "html": "<p>Set <var>global</var>.[[Global]] to <var>globaladdr</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-set\" id=\"ref-for-map-set④\">Set</a> <var>map</var>[<var>globaladdr</var>] to <var>global</var>.</p>"
        }
      ]
    },
    {
      "name": "create a global object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#create-a-global-object",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"create-a-global-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">create a global object</dfn> from a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-globaladdr\" id=\"ref-for-syntax-globaladdr③\">global address</a> <var>globaladdr</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>map</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent②⑤\">surrounding agent</a>’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#global-object-cache\" id=\"ref-for-global-object-cache①\">Global object cache</a>.</p>"
        },
        {
          "html": "If <var>map</var>[<var>globaladdr</var>] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①②\">exists</a>,",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return <var>map</var>[<var>globaladdr</var>].</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>global</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new③\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#global\" id=\"ref-for-global④\">Global</a></code>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#initialize-a-global-object\" id=\"ref-for-initialize-a-global-object\">Initialize</a> <var>global</var> from <var>globaladdr</var>.</p>"
        },
        {
          "html": "<p>Return <var>global</var>.</p>"
        }
      ]
    },
    {
      "name": "ToValueType",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#tovaluetype",
      "html": "The algorithm <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"tovaluetype\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ToValueType</dfn>(<var>s</var>) performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>s</var> equals \"i32\", return <a data-link-type=\"dfn\" data-refhint-key=\"1eccdce5\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-numtype\" id=\"ref-for-syntax-numtype④\">i32</a>.</p>"
        },
        {
          "html": "<p>If <var>s</var> equals \"i64\", return <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-numtype\" id=\"ref-for-syntax-numtype⑤\">i64</a>.</p>"
        },
        {
          "html": "<p>If <var>s</var> equals \"f32\", return <a data-link-type=\"dfn\" data-refhint-key=\"a4646532\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-numtype\" id=\"ref-for-syntax-numtype⑥\">f32</a>.</p>"
        },
        {
          "html": "<p>If <var>s</var> equals \"f64\", return <a data-link-type=\"dfn\" data-refhint-key=\"487b76fe\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-numtype\" id=\"ref-for-syntax-numtype⑦\">f64</a>.</p>"
        },
        {
          "html": "<p>If <var>s</var> equals \"v128\", return <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#vector-types\" id=\"ref-for-vector-types①\">v128</a>.</p>"
        },
        {
          "html": "<p>If <var>s</var> equals \"anyfunc\", return <a data-link-type=\"dfn\" data-refhint-key=\"706a103c\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype②\">funcref</a>.</p>"
        },
        {
          "html": "<p>If <var>s</var> equals \"externref\", return <a data-link-type=\"dfn\" data-refhint-key=\"92193adb\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype③\">externref</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: This step is not reached.</p>"
        }
      ]
    },
    {
      "name": "DefaultValue",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#defaultvalue",
      "html": "The algorithm <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"defaultvalue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">DefaultValue</dfn>(<var>valuetype</var>) performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>valuetype</var> equals <a data-link-type=\"dfn\" data-refhint-key=\"92193adb\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype④\">externref</a>, return <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#towebassemblyvalue\" id=\"ref-for-towebassemblyvalue④\">ToWebAssemblyValue</a>(undefined, <var>valuetype</var>).</p>"
        },
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-val-default\" id=\"ref-for-embed-val-default\">val_default</a>(<var>valuetype</var>).</p>"
        }
      ]
    },
    {
      "name": "Global/Global(descriptor, v)",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-global-global",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Global\" data-dfn-type=\"constructor\" data-export=\"\" data-lt=\"Global(descriptor, v)|constructor(descriptor, v)|Global(descriptor)|constructor(descriptor)\" id=\"dom-global-global\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>Global(<var>descriptor</var>, <var>v</var>)</code></dfn> constructor, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>mutable</var> be <var>descriptor</var>[\"mutable\"].</p>"
        },
        {
          "html": "<p>Let <var>valuetype</var> be <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tovaluetype\" id=\"ref-for-tovaluetype①\">ToValueType</a>(<var>descriptor</var>[\"value\"]).</p>"
        },
        {
          "html": "If <var>valuetype</var> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/valid/matching.html#match-valtype\" id=\"ref-for-match-valtype\">matches</a> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#vector-types\" id=\"ref-for-vector-types②\">v128</a> or <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype⑤\">exnref</a>,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑨\">TypeError</a></code> exception.</p>"
            }
          ]
        },
        {
          "html": "If <var>v</var> is missing,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>value</var> be <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#defaultvalue\" id=\"ref-for-defaultvalue③\">DefaultValue</a>(<var>valuetype</var>).</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>value</var> is not <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error①⑥\">error</a>.</p>"
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>value</var> be <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#towebassemblyvalue\" id=\"ref-for-towebassemblyvalue⑤\">ToWebAssemblyValue</a>(<var>v</var>, <var>valuetype</var>).</p>"
            }
          ]
        },
        {
          "html": "<p>If <var>mutable</var> is true, let <var>globaltype</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e638887d\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-mut\" id=\"ref-for-syntax-mut①\">var</a> <var>valuetype</var>; otherwise, let <var>globaltype</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-mut\" id=\"ref-for-syntax-mut②\">const</a> <var>valuetype</var>.</p>"
        },
        {
          "html": "<p>Let <var>store</var> be the current agent’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store①⑧\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let (<var>store</var>, <var>globaladdr</var>) be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-global-alloc\" id=\"ref-for-embed-global-alloc①\">global_alloc</a>(<var>store</var>, <var>globaltype</var>, <var>value</var>). </p>"
        },
        {
          "html": "<p>Set the current agent’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store①⑨\">associated store</a> to <var>store</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#initialize-a-global-object\" id=\"ref-for-initialize-a-global-object①\">Initialize</a> <strong>this</strong> from <var>globaladdr</var>.</p>"
        }
      ]
    },
    {
      "name": "GetGlobalValue",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#getglobalvalue",
      "html": "The algorithm <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"getglobalvalue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">GetGlobalValue</dfn>(<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#global\" id=\"ref-for-global⑤\">Global</a></code> <var>global</var>) performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>store</var> be the current agent’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store②⓪\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let <var>globaladdr</var> be <var>global</var>.[[Global]].</p>"
        },
        {
          "html": "<p>Let <var>globaltype</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-global-type\" id=\"ref-for-embed-global-type\">global_type</a>(<var>store</var>, <var>globaladdr</var>).</p>"
        },
        {
          "html": "<p>If <var>globaltype</var> is of the form <var>mut</var> <var>valuetype</var> where <var>valuetype</var> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/valid/matching.html#match-valtype\" id=\"ref-for-match-valtype①\">matches</a> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#vector-types\" id=\"ref-for-vector-types③\">v128</a> or <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype⑥\">exnref</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①⓪\">TypeError</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>value</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-global-read\" id=\"ref-for-embed-global-read\">global_read</a>(<var>store</var>, <var>globaladdr</var>).</p>"
        },
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tojsvalue\" id=\"ref-for-tojsvalue①\">ToJSValue</a>(<var>value</var>).</p>"
        }
      ]
    },
    {
      "name": "Global/value",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-global-value",
      "html": "The getter of the <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Global\" data-dfn-type=\"attribute\" data-export=\"\" id=\"dom-global-value\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>value</code></dfn> attribute of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#global\" id=\"ref-for-global⑥\">Global</a></code>, when invoked, performs the following steps:\n\n    \n    <p>The setter of the value attribute of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#global\" id=\"ref-for-global⑦\">Global</a></code>, when invoked, performs the following steps:</p>",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#getglobalvalue\" id=\"ref-for-getglobalvalue\">GetGlobalValue</a>(<strong>this</strong>).</p>"
        }
      ]
    },
    {
      "name": "Global/value",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-global-value",
      "html": "The getter of the <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Global\" data-dfn-type=\"attribute\" data-export=\"\" id=\"dom-global-value\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>value</code></dfn> attribute of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#global\" id=\"ref-for-global⑥\">Global</a></code>, when invoked, performs the following steps:\n\n    \n    <p>The setter of the value attribute of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#global\" id=\"ref-for-global⑦\">Global</a></code>, when invoked, performs the following steps:</p>",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>store</var> be the current agent’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store②①\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let <var>globaladdr</var> be <strong>this</strong>.[[Global]].</p>"
        },
        {
          "html": "<p>Let <var>mut</var> <var>valuetype</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-global-type\" id=\"ref-for-embed-global-type①\">global_type</a>(<var>store</var>, <var>globaladdr</var>).</p>"
        },
        {
          "html": "<p>If <var>valuetype</var> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/valid/matching.html#match-valtype\" id=\"ref-for-match-valtype②\">matches</a> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#vector-types\" id=\"ref-for-vector-types④\">v128</a> or <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype⑦\">exnref</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①①\">TypeError</a></code>.</p>"
        },
        {
          "html": "<p>If <var>mut</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-mut\" id=\"ref-for-syntax-mut③\">const</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①②\">TypeError</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>value</var> be <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#towebassemblyvalue\" id=\"ref-for-towebassemblyvalue⑥\">ToWebAssemblyValue</a>(<strong>the given value</strong>, <var>valuetype</var>).</p>"
        },
        {
          "html": "<p>Let <var>store</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-global-write\" id=\"ref-for-embed-global-write\">global_write</a>(<var>store</var>, <var>globaladdr</var>, <var>value</var>).</p>"
        },
        {
          "html": "<p>If <var>store</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error①⑦\">error</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-rangeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-rangeerror⑨\">RangeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Set the current agent’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store②②\">associated store</a> to <var>store</var>.</p>"
        }
      ]
    },
    {
      "name": "Global/valueOf()",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-global-valueof",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Global\" data-dfn-type=\"method\" data-export=\"\" id=\"dom-global-valueof\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>valueOf()</code></dfn> method, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#getglobalvalue\" id=\"ref-for-getglobalvalue①\">GetGlobalValue</a>(<strong>this</strong>).</p>"
        }
      ]
    },
    {
      "name": "name of the WebAssembly function",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#name-of-the-webassembly-function",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"name-of-the-webassembly-function\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">name of the WebAssembly function</dfn> <var>funcaddr</var> is found by performing the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent②⑦\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store②④\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let <var>funcinst</var> be <var>store</var>.funcs[<var>funcaddr</var>].</p>"
        },
        {
          "html": "If <var>funcinst</var> is of the form {type <var>functype</var>, hostcode <var>hostfunc</var>},",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>hostfunc</var> is a JavaScript object and <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-iscallable\" id=\"ref-for-sec-iscallable①\">IsCallable</a>(<var>hostfunc</var>) is true.</p>"
            },
            {
              "html": "<p>Let <var>index</var> be the <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#index-of-the-host-function\" id=\"ref-for-index-of-the-host-function\">index of the host function</a> <var>funcaddr</var>.</p>"
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>moduleinst</var> be <var>funcinst</var>.module.</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>funcaddr</var> is contained in <var>moduleinst</var>.funcaddrs.</p>"
            },
            {
              "html": "<p>Let <var>index</var> be the index of <var>moduleinst</var>.funcaddrs where <var>funcaddr</var> is found.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②②\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tostring\" id=\"ref-for-sec-tostring\">ToString</a>(<var>index</var>).</p>"
        }
      ]
    },
    {
      "name": "a new Exported Function",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#a-new-exported-function",
      "html": "To create <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"a-new-exported-function\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">a new Exported Function</dfn> from a WebAssembly <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-funcaddr\" id=\"ref-for-syntax-funcaddr②\">function address</a> <var>funcaddr</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>map</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent②⑧\">surrounding agent</a>’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exported-function-cache\" id=\"ref-for-exported-function-cache\">Exported Function cache</a>.</p>"
        },
        {
          "html": "If <var>map</var>[<var>funcaddr</var>] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①③\">exists</a>,",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return <var>map</var>[<var>funcaddr</var>].</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>steps</var> be \"<a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#call-an-exported-function\" id=\"ref-for-call-an-exported-function\">call the Exported Function</a> <var>funcaddr</var> with arguments.\"</p>"
        },
        {
          "html": "<p>Let <var>realm</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#current-realm\" id=\"ref-for-current-realm\">current Realm</a>.</p>"
        },
        {
          "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent②⑨\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store②⑤\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let <var>functype</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-func-type\" id=\"ref-for-embed-func-type\">func_type</a>(<var>store</var>, <var>funcaddr</var>).</p>"
        },
        {
          "html": "<p>Let [<var>paramTypes</var>] → [<var>resultTypes</var>] be <var>functype</var>.</p>"
        },
        {
          "html": "<p>Let <var>arity</var> be <var>paramTypes</var>’s <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-size\" id=\"ref-for-list-size\">size</a>.</p>"
        },
        {
          "html": "<p>Let <var>name</var> be the <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#name-of-the-webassembly-function\" id=\"ref-for-name-of-the-webassembly-function\">name of the WebAssembly function</a> <var>funcaddr</var>.</p>"
        },
        {
          "html": "<p>Let <var>function</var> be <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②③\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-createbuiltinfunction\" id=\"ref-for-sec-createbuiltinfunction\">CreateBuiltinFunction</a>(<var>steps</var>, <var>arity</var>, <var>name</var>, « [[FunctionAddress]] », <var>realm</var>).</p>"
        },
        {
          "html": "<p>Set <var>function</var>.[[FunctionAddress]] to <var>funcaddr</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-set\" id=\"ref-for-map-set⑤\">Set</a> <var>map</var>[<var>funcaddr</var>] to <var>function</var>.</p>"
        },
        {
          "html": "<p>Return <var>function</var>.</p>"
        }
      ]
    },
    {
      "name": "call an Exported Function",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#call-an-exported-function",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"call-an-exported-function\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">call an Exported Function</dfn> with <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-funcaddr\" id=\"ref-for-syntax-funcaddr③\">function address</a> <var>funcaddr</var> and a <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list①\">list</a> of JavaScript arguments <var>argValues</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent③⓪\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store②⑥\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let <var>functype</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-func-type\" id=\"ref-for-embed-func-type①\">func_type</a>(<var>store</var>, <var>funcaddr</var>).</p>"
        },
        {
          "html": "<p>Let [<var>parameters</var>] → [<var>results</var>] be <var>functype</var>.</p>"
        },
        {
          "html": "<p>If any type in <var>parameters</var> or <var>results</var> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/valid/matching.html#match-valtype\" id=\"ref-for-match-valtype③\">matches</a> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#vector-types\" id=\"ref-for-vector-types⑤\">v128</a> or <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype⑧\">exnref</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①③\">TypeError</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>args</var> be « ».</p>"
        },
        {
          "html": "<p>Let <var>i</var> be 0.</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate⑧\">For each</a> <var>t</var> of <var>parameters</var>,",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>argValues</var>’s <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-size\" id=\"ref-for-list-size①\">size</a> &gt; <var>i</var>, let <var>arg</var> be <var>argValues</var>[<var>i</var>].</p>"
            },
            {
              "html": "<p>Otherwise, let <var>arg</var> be undefined.</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append⑧\">Append</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#towebassemblyvalue\" id=\"ref-for-towebassemblyvalue⑦\">ToWebAssemblyValue</a>(<var>arg</var>, <var>t</var>) to <var>args</var>.</p>"
            },
            {
              "html": "<p>Set <var>i</var> to <var>i</var> + 1.</p>"
            }
          ]
        },
        {
          "html": "<p>Let (<var>store</var>, <var>ret</var>) be the result of <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-func-invoke\" id=\"ref-for-embed-func-invoke\">func_invoke</a>(<var>store</var>, <var>funcaddr</var>, <var>args</var>).</p>"
        },
        {
          "html": "<p>Set the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent③①\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store②⑦\">associated store</a> to <var>store</var>.</p>"
        },
        {
          "html": "<p>If <var>ret</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-error\" id=\"ref-for-embed-error①⑧\">error</a>, throw an exception. This exception should be a WebAssembly <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-runtimeerror\" id=\"ref-for-exceptiondef-runtimeerror①\">RuntimeError</a></code> exception, unless otherwise indicated by <a href=\"https://www.w3.org/TR/wasm-js-api-2/#errors\">the WebAssembly error mapping</a>.</p>"
        },
        {
          "html": "If <var>ret</var> is <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-throw\" id=\"ref-for-dfn-throw②\">THROW</a> <a data-link-type=\"dfn\" data-refhint-key=\"b0f69a43\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values①\">ref.exn</a> <var>exnaddr</var>, then",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>tagaddr</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-exn-tag\" id=\"ref-for-embed-exn-tag\">exn_tag</a>(<var>store</var>, <var>exnaddr</var>).</p>"
            },
            {
              "html": "<p>Let <var>payload</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-exn-read\" id=\"ref-for-embed-exn-read\">exn_read</a>(<var>store</var>, <var>exnaddr</var>).</p>"
            },
            {
              "html": "<p>Let <var>jsTagAddr</var> be the result of <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#get-the-javascript-exception-tag\" id=\"ref-for-get-the-javascript-exception-tag①\">getting the JavaScript exception tag</a>.</p>"
            },
            {
              "html": "If <var>tagaddr</var> is equal to <var>jsTagAddr</var>,",
              "rationale": "throw",
              "steps": [
                {
                  "html": "<p>Throw the result of <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#retrieving-a-host-value\" id=\"ref-for-retrieving-a-host-value\">retrieving a host value</a> from <var>payload</var>[0].</p>"
                }
              ]
            },
            {
              "html": "Otherwise,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>exception</var> be <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#create-an-exception-object\" id=\"ref-for-create-an-exception-object\">a new Exception</a> created from <var>exnaddr</var>.</p>"
                },
                {
                  "html": "<p>Throw <var>exception</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Let <var>outArity</var> be the <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-size\" id=\"ref-for-list-size②\">size</a> of <var>ret</var>.</p>"
        },
        {
          "html": "<p>If <var>outArity</var> is 0, return undefined.</p>"
        },
        {
          "html": "<p>Otherwise, if <var>outArity</var> is 1, return <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tojsvalue\" id=\"ref-for-tojsvalue②\">ToJSValue</a>(<var>ret</var>[0]).</p>"
        },
        {
          "html": "Otherwise,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>values</var> be « ».</p>"
            },
            {
              "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate⑨\">For each</a> <var>r</var> of <var>ret</var>,",
              "rationale": "append",
              "steps": [
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append⑨\">Append</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tojsvalue\" id=\"ref-for-tojsvalue③\">ToJSValue</a>(<var>r</var>) to <var>values</var>.</p>"
                }
              ]
            },
            {
              "html": "<p>Return <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-createarrayfromlist\" id=\"ref-for-sec-createarrayfromlist\">CreateArrayFromList</a>(<var>values</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "run a host function",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#run-a-host-function",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"run-a-host-function\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">run a host function</dfn> from the JavaScript object <var>func</var>, type <var>functype</var>, and <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list②\">list</a> of <a data-link-type=\"dfn\" data-refhint-key=\"8390efce\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values②\">WebAssembly values</a> <var>arguments</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let [<var>parameters</var>] → [<var>results</var>] be <var>functype</var>.</p>"
        },
        {
          "html": "<p>If any type in <var>parameters</var> or <var>results</var> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/valid/matching.html#match-valtype\" id=\"ref-for-match-valtype④\">matches</a> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#vector-types\" id=\"ref-for-vector-types⑥\">v128</a> or <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype⑨\">exnref</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①④\">TypeError</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>jsArguments</var> be « ».</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate①⓪\">For each</a> <var>arg</var> of <var>arguments</var>,",
          "rationale": "append",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append①⓪\">Append</a> <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②④\">!</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tojsvalue\" id=\"ref-for-tojsvalue④\">ToJSValue</a>(<var>arg</var>) to <var>jsArguments</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>ret</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②⑤\">?</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-call\" id=\"ref-for-sec-call\">Call</a>(<var>func</var>, undefined, <var>jsArguments</var>).</p>"
        },
        {
          "html": "<p>Let <var>resultsSize</var> be <var>results</var>’s <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-size\" id=\"ref-for-list-size③\">size</a>.</p>"
        },
        {
          "html": "<p>If <var>resultsSize</var> is 0, return « ».</p>"
        },
        {
          "html": "<p>Otherwise, if <var>resultsSize</var> is 1, return « <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②⑥\">?</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#towebassemblyvalue\" id=\"ref-for-towebassemblyvalue⑧\">ToWebAssemblyValue</a>(<var>ret</var>, <var>results</var>[0]) ».</p>"
        },
        {
          "html": "Otherwise,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>method</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②⑦\">?</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-getmethod\" id=\"ref-for-sec-getmethod\">GetMethod</a>(<var>ret</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-well-known-symbols\" id=\"ref-for-sec-well-known-symbols\">%Symbol.iterator%</a></code>).</p>"
            },
            {
              "html": "<p>If <var>method</var> is undefined, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-throw\" id=\"ref-for-dfn-throw③\">throw</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①⑤\">TypeError</a></code>.</p>"
            },
            {
              "html": "<p>Let <var>values</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②⑧\">?</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-iteratortolist\" id=\"ref-for-sec-iteratortolist\">IteratorToList</a>(<a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands②⑨\">?</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-getiteratorfrommethod\" id=\"ref-for-sec-getiteratorfrommethod\">GetIteratorFromMethod</a>(<var>ret</var>, <var>method</var>)).</p>"
            },
            {
              "html": "<p>Let <var>wasmValues</var> be a new, empty <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list③\">list</a>.</p>"
            },
            {
              "html": "<p>If <var>values</var>’s <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-size\" id=\"ref-for-list-size④\">size</a> is not <var>resultsSize</var>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①⑥\">TypeError</a></code> exception.</p>"
            },
            {
              "html": "For each <var>value</var> and <var>resultType</var> in <var>values</var> and <var>results</var>, paired linearly,",
              "rationale": "append",
              "steps": [
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append①①\">Append</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#towebassemblyvalue\" id=\"ref-for-towebassemblyvalue⑨\">ToWebAssemblyValue</a>(<var>value</var>, <var>resultType</var>) to <var>wasmValues</var>.</p>"
                }
              ]
            },
            {
              "html": "<p>Return <var>wasmValues</var>.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "create a host function",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#create-a-host-function",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"create-a-host-function\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">create a host function</dfn> from the JavaScript object <var>func</var> and type <var>functype</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-iscallable\" id=\"ref-for-sec-iscallable②\">IsCallable</a>(<var>func</var>).</p>"
        },
        {
          "html": "<p>Let <var>stored settings</var> be the <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#incumbent-settings-object\" id=\"ref-for-incumbent-settings-object\">incumbent settings object</a>.</p>"
        },
        {
          "html": "Let <var>hostfunc</var> be a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-hostfunc\" id=\"ref-for-syntax-hostfunc\">host function</a> which performs the following steps when called with arguments <var>arguments</var>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>realm</var> be <var>func</var>’s <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-associated-realm\" id=\"ref-for-dfn-associated-realm\">associated Realm</a>.</p>"
            },
            {
              "html": "<p>Let <var>relevant settings</var> be <var>realm</var>’s <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#concept-realm-settings-object\" id=\"ref-for-concept-realm-settings-object\">settings object</a>.</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#prepare-to-run-script\" id=\"ref-for-prepare-to-run-script\">Prepare to run script</a> with <var>relevant settings</var>.</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#prepare-to-run-a-callback\" id=\"ref-for-prepare-to-run-a-callback\">Prepare to run a callback</a> with <var>stored settings</var>.</p>"
            },
            {
              "html": "<p>Let <var>result</var> be the result of <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#run-a-host-function\" id=\"ref-for-run-a-host-function\">running a host function</a> from <var>func</var>, <var>functype</var>, and <var>arguments</var>.</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-a-callback\" id=\"ref-for-clean-up-after-running-a-callback\">Clean up after running a callback</a> with <var>stored settings</var>.</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-script\" id=\"ref-for-clean-up-after-running-script\">Clean up after running script</a> with <var>relevant settings</var>.</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>result</var>.[[Type]] is <emu-const>throw</emu-const> or <emu-const>normal</emu-const>.</p>"
            },
            {
              "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent③②\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store②⑧\">associated store</a>.</p>"
            },
            {
              "html": "If <var>result</var>.[[Type]] is <emu-const>throw</emu-const>, then:",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>v</var> be <var>result</var>.[[Value]].</p>"
                },
                {
                  "html": "If <var>v</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements④\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exception\" id=\"ref-for-exception①\">Exception</a></code>,",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>address</var> be <var>v</var>.[[Address]].</p>"
                    }
                  ]
                },
                {
                  "html": "Otherwise,",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>type</var> be the result of <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#get-the-javascript-exception-tag\" id=\"ref-for-get-the-javascript-exception-tag②\">getting the JavaScript exception tag</a>.</p>"
                    },
                    {
                      "html": "<p>Let <var>payload</var> be <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③⓪\">!</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#towebassemblyvalue\" id=\"ref-for-towebassemblyvalue①⓪\">ToWebAssemblyValue</a>(<var>v</var>, <a data-link-type=\"dfn\" data-refhint-key=\"92193adb\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype①⓪\">externref</a>).</p>"
                    },
                    {
                      "html": "<p>Let (<var>store</var>, <var>address</var>) be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-exn-alloc\" id=\"ref-for-embed-exn-alloc\">exn_alloc</a>(<var>store</var>, <var>type</var>, « <var>payload</var> »).</p>"
                    },
                    {
                      "html": "<p>Set the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent③③\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store②⑨\">associated store</a> to <var>store</var>.</p>"
                    }
                  ]
                },
                {
                  "html": "<p>Execute the WebAssembly instructions (<a data-link-type=\"dfn\" data-refhint-key=\"b0f69a43\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values③\">ref.exn</a> <var>address</var>) (<a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/instructions.html#exec-throw-ref\" id=\"ref-for-exec-throw-ref\">throw_ref</a>).</p>"
                }
              ]
            },
            {
              "html": "<p>Otherwise, return <var>result</var>.[[Value]].</p>"
            }
          ]
        },
        {
          "html": "<p>Let (<var>store</var>, <var>funcaddr</var>) be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-func-alloc\" id=\"ref-for-embed-func-alloc\">func_alloc</a>(<var>store</var>, <var>functype</var>, <var>hostfunc</var>).</p>"
        },
        {
          "html": "<p>Set the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent③④\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store③⓪\">associated store</a> to <var>store</var>.</p>"
        },
        {
          "html": "<p>Return <var>funcaddr</var>.</p>"
        }
      ]
    },
    {
      "name": "ToJSValue",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#tojsvalue",
      "html": "The algorithm <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"tojsvalue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ToJSValue</dfn>(<var>w</var>) coerces a <a data-link-type=\"dfn\" data-refhint-key=\"8390efce\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values④\">WebAssembly value</a> to a JavaScript value by performing the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>w</var> is not of the form <a data-link-type=\"dfn\" data-refhint-key=\"5e745a1a\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values⑤\">v128.const</a> <var>v128</var>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>w</var> is not of the form <a data-link-type=\"dfn\" data-refhint-key=\"b0f69a43\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values⑥\">ref.exn</a> <var>exnaddr</var>.</p>"
        },
        {
          "html": "If <var>w</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"74913b16\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values⑦\">i64.const</a> <var>u64</var>,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>i64</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/numerics.html#aux-signed\" id=\"ref-for-aux-signed\">signed_64</a>(<var>u64</var>).</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#ℤ\" id=\"ref-for-ℤ\">ℤ</a>(<var>i64</var> interpreted as a <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#mathematical-value\" id=\"ref-for-mathematical-value\">mathematical value</a>).</p>"
            }
          ]
        },
        {
          "html": "If <var>w</var> is of the form <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values⑧\">i32.const</a> <var>u32</var>,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>i32</var> be <a data-link-type=\"dfn\" data-refhint-key=\"71830f3f\" href=\"https://webassembly.github.io/spec/core/exec/numerics.html#aux-signed\" id=\"ref-for-aux-signed①\">signed_32</a>(<var>u32</var>).</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#𝔽\" id=\"ref-for-𝔽\">𝔽</a>(<var>i32</var> interpreted as a <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#mathematical-value\" id=\"ref-for-mathematical-value①\">mathematical value</a>).</p>"
            }
          ]
        },
        {
          "html": "If <var>w</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"dfe8fce9\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values⑨\">f32.const</a> <var>f32</var>,",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>f32</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-float\" id=\"ref-for-syntax-float\">+∞</a> or <a data-link-type=\"dfn\" data-refhint-key=\"fd8a763c\" href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-float\" id=\"ref-for-syntax-float①\">−∞</a>, return <strong>+∞</strong><sub>𝔽</sub> or <strong>-∞</strong><sub>𝔽</sub>, respectively.</p>"
            },
            {
              "html": "<p>If <var>f32</var> is <a data-link-type=\"dfn\" data-refhint-key=\"8b33b0c0\" href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-float\" id=\"ref-for-syntax-float②\">nan</a>, return <strong>NaN</strong>.</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#𝔽\" id=\"ref-for-𝔽①\">𝔽</a>(<var>f32</var> interpreted as a <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#mathematical-value\" id=\"ref-for-mathematical-value②\">mathematical value</a>).</p>"
            }
          ]
        },
        {
          "html": "If <var>w</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"f2c8868c\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values①⓪\">f64.const</a> <var>f64</var>,",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>f64</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-float\" id=\"ref-for-syntax-float③\">+∞</a> or <a data-link-type=\"dfn\" data-refhint-key=\"fd8a763c\" href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-float\" id=\"ref-for-syntax-float④\">−∞</a>, return <strong>+∞</strong><sub>𝔽</sub> or <strong>-∞</strong><sub>𝔽</sub>, respectively.</p>"
            },
            {
              "html": "<p>If <var>f64</var> is <a data-link-type=\"dfn\" data-refhint-key=\"8b33b0c0\" href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-float\" id=\"ref-for-syntax-float⑤\">nan</a>, return <strong>NaN</strong>.</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#𝔽\" id=\"ref-for-𝔽②\">𝔽</a>(<var>f64</var> interpreted as a <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#mathematical-value\" id=\"ref-for-mathematical-value③\">mathematical value</a>).</p>"
            }
          ]
        },
        {
          "html": "<p>If <var>w</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"6b9f083b\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values①①\">ref.null</a> <var>t</var>, return null.</p>"
        },
        {
          "html": "If <var>w</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"2a855222\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values①②\">ref.i31</a> <var>u31</var>,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>i31</var> be <a data-link-type=\"dfn\" data-refhint-key=\"87dd702b\" href=\"https://webassembly.github.io/spec/core/exec/numerics.html#aux-signed\" id=\"ref-for-aux-signed②\">signed_31</a>(<var>u31</var>).</p>"
            },
            {
              "html": "<p>Let return <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#𝔽\" id=\"ref-for-𝔽③\">𝔽</a>(<var>i31</var>).</p>"
            }
          ]
        },
        {
          "html": "<p>If <var>w</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"4a3b2658\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values①③\">ref.struct</a> <var>structaddr</var>, return the result of creating <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#a-new-exported-gc-object\" id=\"ref-for-a-new-exported-gc-object\">a new Exported GC Object</a> from <var>structaddr</var> and \"struct\".</p>"
        },
        {
          "html": "<p>If <var>w</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"b73131e1\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values①④\">ref.array</a> <var>arrayaddr</var>, return the result of creating <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#a-new-exported-gc-object\" id=\"ref-for-a-new-exported-gc-object①\">a new Exported GC Object</a> from <var>arrayaddr</var> and \"array\".</p>"
        },
        {
          "html": "<p>If <var>w</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"e4a6ca14\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values①⑤\">ref.func</a> <var>funcaddr</var>, return the result of creating <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#a-new-exported-function\" id=\"ref-for-a-new-exported-function①\">a new Exported Function</a> from <var>funcaddr</var>.</p>"
        },
        {
          "html": "<p>If <var>w</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"eba518e9\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values①⑥\">ref.host</a> <var>hostaddr</var>, return the result of <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#retrieving-a-host-value\" id=\"ref-for-retrieving-a-host-value①\">retrieving a host value</a> from <var>hostaddr</var>.</p>"
        },
        {
          "html": "<p>If <var>w</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"f3505c41\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values①⑦\">ref.extern</a> <var>ref</var>, return <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tojsvalue\" id=\"ref-for-tojsvalue⑤\">ToJSValue</a>(<var>ref</var>).</p>"
        }
      ]
    },
    {
      "name": "retrieving a host value",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#retrieving-a-host-value",
      "html": "For <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"retrieving-a-host-value\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">retrieving a host value</dfn> from an <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-hostaddr\" id=\"ref-for-syntax-hostaddr①\">host address</a> <var>hostaddr</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>map</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent③⑤\">surrounding agent</a>’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#host-value-cache\" id=\"ref-for-host-value-cache\">host value cache</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>map</var>[<var>hostaddr</var>] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①④\">exists</a>.</p>"
        },
        {
          "html": "<p>Return <var>map</var>[<var>hostaddr</var>].</p>"
        }
      ]
    },
    {
      "name": "ToWebAssemblyValue",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#towebassemblyvalue",
      "html": "The algorithm <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"towebassemblyvalue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ToWebAssemblyValue</dfn>(<var>v</var>, <var>type</var>) coerces a JavaScript value to a <a data-link-type=\"dfn\" data-refhint-key=\"8390efce\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values①⑧\">WebAssembly value</a> by performing the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>type</var> is not <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#vector-types\" id=\"ref-for-vector-types⑦\">v128</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>type</var> does not <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/valid/matching.html#match-valtype\" id=\"ref-for-match-valtype⑤\">match</a> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype①①\">exnref</a>.</p>"
        },
        {
          "html": "If <var>type</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-numtype\" id=\"ref-for-syntax-numtype⑧\">i64</a>,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>i64</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③①\">?</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tobigint64\" id=\"ref-for-sec-tobigint64\">ToBigInt64</a>(<var>v</var>).</p>"
            },
            {
              "html": "<p>Let <var>u64</var> be the unsigned integer such that <var>i64</var> is <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/numerics.html#aux-signed\" id=\"ref-for-aux-signed③\">signed_64</a>(<var>u64</var>).</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" data-refhint-key=\"74913b16\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values①⑨\">i64.const</a> <var>u64</var>.</p>"
            }
          ]
        },
        {
          "html": "If <var>type</var> is <a data-link-type=\"dfn\" data-refhint-key=\"1eccdce5\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-numtype\" id=\"ref-for-syntax-numtype⑨\">i32</a>,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>i32</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③②\">?</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toint32\" id=\"ref-for-sec-toint32\">ToInt32</a>(<var>v</var>).</p>"
            },
            {
              "html": "<p>Let <var>u32</var> be the unsigned integer such that <var>i32</var> is <a data-link-type=\"dfn\" data-refhint-key=\"71830f3f\" href=\"https://webassembly.github.io/spec/core/exec/numerics.html#aux-signed\" id=\"ref-for-aux-signed④\">signed_32</a>(<var>u32</var>).</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values②⓪\">i32.const</a> <var>u32</var>.</p>"
            }
          ]
        },
        {
          "html": "If <var>type</var> is <a data-link-type=\"dfn\" data-refhint-key=\"a4646532\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-numtype\" id=\"ref-for-syntax-numtype①⓪\">f32</a>,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>number</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③③\">?</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tonumber\" id=\"ref-for-sec-tonumber\">ToNumber</a>(<var>v</var>).</p>"
            },
            {
              "html": "If <var>number</var> is <strong>NaN</strong>,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>n</var> be an implementation-defined integer such that <a data-link-type=\"dfn\" data-refhint-key=\"00c2566d\" href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-float\" id=\"ref-for-syntax-float⑥\">canon</a><sub>32</sub> ≤ <var>n</var> &lt; 2<sup><a data-link-type=\"dfn\" data-refhint-key=\"e4515620\" href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-float\" id=\"ref-for-syntax-float⑦\">signif</a>(32)</sup>.</p>"
                },
                {
                  "html": "<p>Let <var>f32</var> be <a data-link-type=\"dfn\" data-refhint-key=\"8b33b0c0\" href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-float\" id=\"ref-for-syntax-float⑧\">nan</a>(n).</p>"
                }
              ]
            },
            {
              "html": "Otherwise,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>f32</var> be <var>number</var> rounded to the nearest representable value using IEEE 754-2019 round to nearest, ties to even mode. <a data-link-type=\"biblio\" href=\"https://www.w3.org/TR/wasm-js-api-2/#biblio-ieee-754\" title=\"IEEE Standard for Floating-Point Arithmetic\">[IEEE-754]</a></p>"
                }
              ]
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" data-refhint-key=\"dfe8fce9\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values②①\">f32.const</a> <var>f32</var>.</p>"
            }
          ]
        },
        {
          "html": "If <var>type</var> is <a data-link-type=\"dfn\" data-refhint-key=\"487b76fe\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-numtype\" id=\"ref-for-syntax-numtype①①\">f64</a>,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>number</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③④\">?</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tonumber\" id=\"ref-for-sec-tonumber①\">ToNumber</a>(<var>v</var>).</p>"
            },
            {
              "html": "If <var>number</var> is <strong>NaN</strong>,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>n</var> be an implementation-defined integer such that <a data-link-type=\"dfn\" data-refhint-key=\"00c2566d\" href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-float\" id=\"ref-for-syntax-float⑨\">canon</a><sub>64</sub> ≤ <var>n</var> &lt; 2<sup><a data-link-type=\"dfn\" data-refhint-key=\"e4515620\" href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-float\" id=\"ref-for-syntax-float①⓪\">signif</a>(64)</sup>.</p>"
                },
                {
                  "html": "<p>Let <var>f64</var> be <a data-link-type=\"dfn\" data-refhint-key=\"8b33b0c0\" href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-float\" id=\"ref-for-syntax-float①①\">nan</a>(n).</p>"
                }
              ]
            },
            {
              "html": "Otherwise,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>f64</var> be <var>number</var>.</p>"
                }
              ]
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" data-refhint-key=\"f2c8868c\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values②②\">f64.const</a> <var>f64</var>.</p>"
            }
          ]
        },
        {
          "html": "If <var>type</var> is of the form <a data-link-type=\"dfn\" data-refhint-key=\"a130a533\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype①②\">ref</a> <var>null</var> <var>heaptype</var>,",
          "rationale": "if",
          "steps": [
            {
              "html": "If <var>v</var> is null,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>r</var> be <a data-link-type=\"dfn\" data-refhint-key=\"6b9f083b\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values②③\">ref.null</a> <var>heaptype</var>.</p>"
                }
              ]
            },
            {
              "html": "Else if <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-match-valtype\" id=\"ref-for-embed-match-valtype\">match_valtype</a>(<var>type</var>, <a data-link-type=\"dfn\" data-refhint-key=\"a130a533\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype①③\">ref</a> <var>null</var> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#heap-types\" id=\"ref-for-heap-types\">extern</a>),",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>ref</var> be <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#towebassemblyvalue\" id=\"ref-for-towebassemblyvalue①①\">ToWebAssemblyValue</a>(<var>v</var>, <a data-link-type=\"dfn\" data-refhint-key=\"a130a533\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype①④\">ref</a> <a data-link-type=\"dfn\" data-refhint-key=\"f4809bf4\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#heap-types\" id=\"ref-for-heap-types①\">any</a>).</p>"
                },
                {
                  "html": "<p>Let <var>r</var> be <a data-link-type=\"dfn\" data-refhint-key=\"f3505c41\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values②④\">ref.extern</a> <var>ref</var>.</p>"
                }
              ]
            },
            {
              "html": "Else if <var>v</var> is an <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exported-function\" id=\"ref-for-exported-function②\">Exported Function</a> and <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-match-valtype\" id=\"ref-for-embed-match-valtype①\">match_valtype</a>(<var>type</var>, <a data-link-type=\"dfn\" data-refhint-key=\"a130a533\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype①⑤\">ref</a> <var>null</var> <a data-link-type=\"dfn\" data-refhint-key=\"cf0d7dd8\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#heap-types\" id=\"ref-for-heap-types②\">func</a>),",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>funcaddr</var> be the value of <var>v</var>’s [[FunctionAddress]] internal slot.</p>"
                },
                {
                  "html": "<p>Let <var>r</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e4a6ca14\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values②⑤\">ref.func</a> <var>funcaddr</var>.</p>"
                }
              ]
            },
            {
              "html": "Else if <var>v</var> <a data-link-type=\"dfn\" data-refhint-key=\"866f3068\" href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type\" id=\"ref-for-sec-ecmascript-language-types-number-type①\">is a Number</a> and <var>v</var> is equal to <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③⑤\">?</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toint32\" id=\"ref-for-sec-toint32①\">ToInt32</a>(<var>v</var>) and <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#ℝ\" id=\"ref-for-ℝ\">ℝ</a>(<var>v</var>) &lt; 2<sup>30</sup> and <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#ℝ\" id=\"ref-for-ℝ①\">ℝ</a>(<var>v</var>) ⩾ -2<sup>30</sup>,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>i31</var> <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③⑥\">?</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toint32\" id=\"ref-for-sec-toint32②\">ToInt32</a>(<var>v</var>).</p>"
                },
                {
                  "html": "<p>Let <var>u31</var> be the unsigned integer such that <var>i31</var> is <a data-link-type=\"dfn\" data-refhint-key=\"87dd702b\" href=\"https://webassembly.github.io/spec/core/exec/numerics.html#aux-signed\" id=\"ref-for-aux-signed⑤\">signed_31</a>(<var>i31</var>).</p>"
                },
                {
                  "html": "<p>Let <var>r</var> be <a data-link-type=\"dfn\" data-refhint-key=\"2a855222\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values②⑥\">ref.i31</a> <var>u31</var>.</p>"
                }
              ]
            },
            {
              "html": "Else if <var>v</var> is an <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exported-gc-object\" id=\"ref-for-exported-gc-object①\">Exported GC Object</a>,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>objectaddr</var> be the value of <var>v</var>’s [[ObjectAddress]] internal slot.</p>"
                },
                {
                  "html": "<p>Let <var>objectkind</var> be the value of <var>v</var>’s [[ObjectKind]] internal slot.</p>"
                },
                {
                  "html": "If <var>objectkind</var> is \"array\",",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>r</var> be <a data-link-type=\"dfn\" data-refhint-key=\"b73131e1\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values②⑦\">ref.array</a> <var>objectaddr</var>.</p>"
                    }
                  ]
                },
                {
                  "html": "If <var>objectkind</var> is \"struct\",",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>r</var> be <a data-link-type=\"dfn\" data-refhint-key=\"4a3b2658\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values②⑧\">ref.struct</a> <var>objectaddr</var>.</p>"
                    }
                  ]
                }
              ]
            },
            {
              "html": "Else,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>map</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent③⑥\">surrounding agent</a>’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#host-value-cache\" id=\"ref-for-host-value-cache①\">host value cache</a>.</p>"
                },
                {
                  "html": "If a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-hostaddr\" id=\"ref-for-syntax-hostaddr②\">host address</a> <var>hostaddr</var> exists such that <var>map</var>[<var>hostaddr</var>] is the same as <var>v</var>,",
                  "rationale": "return",
                  "steps": [
                    {
                      "html": "<p>Return <a data-link-type=\"dfn\" data-refhint-key=\"eba518e9\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values②⑨\">ref.host</a> <var>hostaddr</var>.</p>"
                    }
                  ]
                },
                {
                  "html": "<p>Let <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-hostaddr\" id=\"ref-for-syntax-hostaddr③\">host address</a> <var>hostaddr</var> be the smallest address such that <var>map</var>[<var>hostaddr</var>] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①⑤\">exists</a> is false.</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-set\" id=\"ref-for-map-set⑥\">Set</a> <var>map</var>[<var>hostaddr</var>] to <var>v</var>.</p>"
                },
                {
                  "html": "<p>Let <var>r</var> be <a data-link-type=\"dfn\" data-refhint-key=\"eba518e9\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#values\" id=\"ref-for-values③⓪\">ref.host</a> <var>hostaddr</var>.</p>"
                }
              ]
            },
            {
              "html": "<p>Let <var>store</var> be the current agent’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store③①\">associated store</a>.</p>"
            },
            {
              "html": "<p>Let <var>actualtype</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-ref-type\" id=\"ref-for-embed-ref-type\">ref_type</a>(<var>store</var>, <var>r</var>).</p>"
            },
            {
              "html": "If <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-match-valtype\" id=\"ref-for-embed-match-valtype②\">match_valtype</a>(<var>actualtype</var>, <var>type</var>) is false,",
              "rationale": "throw",
              "steps": [
                {
                  "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①⑦\">TypeError</a></code>.</p>"
                }
              ]
            },
            {
              "html": "<p>Return <var>r</var>.</p>"
            }
          ]
        },
        {
          "html": "<p class=\"assertion\">Assert: This step is not reached.</p>"
        }
      ]
    },
    {
      "name": "AddressValueToU64",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#addressvaluetou64",
      "html": "The algorithm <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"addressvaluetou64\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">AddressValueToU64</dfn>(<var>v</var>, <var>addrtype</var>) converts a JavaScript value to a WebAssembly <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-int\" id=\"ref-for-syntax-int\">u64</a> for use in embedding operations. It is designed to act like <a data-link-type=\"dfn\" href=\"https://heycam.github.io/webidl/#EnforceRange\" id=\"ref-for-EnforceRange\">[EnforceRange]</a> <a data-link-type=\"dfn\" href=\"https://heycam.github.io/webidl/#idl-unsigned-long\" id=\"ref-for-idl-unsigned-long\">unsigned long</a> for <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#enumdef-addresstype\" id=\"ref-for-enumdef-addresstype②\">AddressType</a></code> \"i32\", and to extend these semantics to <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#enumdef-addresstype\" id=\"ref-for-enumdef-addresstype③\">AddressType</a></code> \"i64\", by performing the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>addrtype</var> is \"i32\",",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>n</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③⑦\">?</a> <a data-link-type=\"abstract-op\" href=\"https://webidl.spec.whatwg.org/#abstract-opdef-converttoint\" id=\"ref-for-abstract-opdef-converttoint\">ConvertToInt</a>(<var>v</var>, 32, \"unsigned\"), where the destination type is associated with <a data-link-type=\"dfn\" href=\"https://heycam.github.io/webidl/#EnforceRange\" id=\"ref-for-EnforceRange①\">[EnforceRange]</a>.</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#ℝ\" id=\"ref-for-ℝ②\">ℝ</a>(<var>n</var>) as a WebAssembly <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-int\" id=\"ref-for-syntax-int①\">u64</a>.</p>"
            }
          ]
        },
        {
          "html": "If <var>addrtype</var> is \"i64\",",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>n</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③⑧\">?</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tobigint\" id=\"ref-for-sec-tobigint\">ToBigInt</a>(<var>v</var>).</p>"
            },
            {
              "html": "<p>If <var>n</var> &lt; 0 or <var>n</var> &gt; 2<sup>64</sup> − 1, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-throw\" id=\"ref-for-dfn-throw④\">throw</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①⑧\">TypeError</a></code>.</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#ℝ\" id=\"ref-for-ℝ③\">ℝ</a>(<var>n</var>) as a WebAssembly <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-int\" id=\"ref-for-syntax-int②\">u64</a>.</p>"
            }
          ]
        },
        {
          "html": "<p class=\"assertion\">Assert: This step is not reached.</p>"
        }
      ]
    },
    {
      "name": "U64ToAddressValue",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#u64toaddressvalue",
      "html": "The algorithm <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"u64toaddressvalue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">U64ToAddressValue</dfn>(<var>v</var>, <var>addrtype</var>) converts a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-int\" id=\"ref-for-syntax-int③\">u64</a> value from a WebAssembly embedding operation to the correct variant of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#typedefdef-addressvalue\" id=\"ref-for-typedefdef-addressvalue①①\">AddressValue</a></code> for an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#enumdef-addresstype\" id=\"ref-for-enumdef-addresstype④\">AddressType</a></code>, by performing the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>addrtype</var> is \"i32\", return <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#𝔽\" id=\"ref-for-𝔽④\">𝔽</a>(<var>v</var> interpreted as a <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#mathematical-value\" id=\"ref-for-mathematical-value④\">mathematical value</a>).</p>"
        },
        {
          "html": "<p>Else if <var>addrtype</var> is \"i64\", return <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#ℤ\" id=\"ref-for-ℤ①\">ℤ</a>(<var>v</var> interpreted as a <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#mathematical-value\" id=\"ref-for-mathematical-value⑤\">mathematical value</a>).</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: This step is not reached.</p>"
        }
      ]
    },
    {
      "name": "initialize a Tag object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#initialize-a-tag-object",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"initialize-a-tag-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">initialize a Tag object</dfn> <var>tag</var> from a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-tagaddr\" id=\"ref-for-syntax-tagaddr③\">tag address</a> <var>tagAddress</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>map</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent③⑦\">surrounding agent</a>’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tag-object-cache\" id=\"ref-for-tag-object-cache\">Tag object cache</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>map</var>[<var>tagAddress</var>] doesn’t <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①⑥\">exist</a>.</p>"
        },
        {
          "html": "<p>Set <var>tag</var>.[[Address]] to <var>tagAddress</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-set\" id=\"ref-for-map-set⑦\">Set</a> <var>map</var>[<var>tagAddress</var>] to <var>tag</var>.</p>"
        }
      ]
    },
    {
      "name": "create a Tag object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#create-a-tag-object",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"create-a-tag-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">create a Tag object</dfn> from a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-tagaddr\" id=\"ref-for-syntax-tagaddr④\">tag address</a> <var>tagAddress</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>map</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent③⑧\">surrounding agent</a>’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tag-object-cache\" id=\"ref-for-tag-object-cache①\">Tag object cache</a>.</p>"
        },
        {
          "html": "If <var>map</var>[<var>tagAddress</var>] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①⑦\">exists</a>,",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return <var>map</var>[<var>tagAddress</var>].</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>tag</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new④\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tag\" id=\"ref-for-tag④\">Tag</a></code>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#initialize-a-tag-object\" id=\"ref-for-initialize-a-tag-object\">Initialize</a> <var>tag</var> from <var>tagAddress</var>.</p>"
        },
        {
          "html": "<p>Return <var>tag</var>.</p>"
        }
      ]
    },
    {
      "name": "Tag/Tag(type)",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-tag-tag",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Tag\" data-dfn-type=\"constructor\" data-export=\"\" data-lt=\"Tag(type)|constructor(type)\" id=\"dom-tag-tag\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>new Tag(<var>type</var>)</code></dfn> constructor steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>parameters</var> be <var>type</var>[\"parameters\"].</p>"
        },
        {
          "html": "<p>Let <var>wasmParameters</var> be «».</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate①①\">For each</a> <var>type</var> of <var>parameters</var>,",
          "rationale": "append",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append①②\">Append</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tovaluetype\" id=\"ref-for-tovaluetype②\">ToValueType</a>(<var>type</var>) to <var>wasmParameters</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>store</var> be the current agent’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store③②\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let (<var>store</var>, <var>tagAddress</var>) be <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tag_alloc\" id=\"ref-for-tag_alloc\">tag_alloc</a>(<var>store</var>, <var>wasmParameters</var>).</p>"
        },
        {
          "html": "<p>Set the current agent’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store③③\">associated store</a> to <var>store</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#initialize-a-tag-object\" id=\"ref-for-initialize-a-tag-object①\">Initialize</a> <strong>this</strong> from <var>tagAddress</var>.</p>"
        }
      ]
    },
    {
      "name": "[[GetPrototypeOf]] internal method of an Exported GC Object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#getprototypeof-internal-method-of-an-exported-gc-object",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"getprototypeof-internal-method-of-an-exported-gc-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">[[GetPrototypeOf]] internal method of an Exported GC Object</dfn> <var>O</var> takes no arguments and returns null. It performs the following steps when called:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return null.</p>"
        }
      ]
    },
    {
      "name": "[[SetPrototypeOf]] internal method of an Exported GC Object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#setprototypeof-internal-method-of-an-exported-gc-object",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"setprototypeof-internal-method-of-an-exported-gc-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">[[SetPrototypeOf]] internal method of an Exported GC Object</dfn> <var>O</var> takes argument <var>V</var> (an Object or null) and returns a boolean. It performs the following steps when called:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return false.</p>"
        }
      ]
    },
    {
      "name": "[[IsExtensible]] internal method of an Exported GC Object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#isextensible-internal-method-of-an-exported-gc-object",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"isextensible-internal-method-of-an-exported-gc-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">[[IsExtensible]] internal method of an Exported GC Object</dfn> <var>O</var> takes no arguments and returns a boolean. It performs the following steps when called:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return false.</p>"
        }
      ]
    },
    {
      "name": "[[PreventExtensions]] internal method of an Exported GC Object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#preventextensions-internal-method-of-an-exported-gc-object",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"preventextensions-internal-method-of-an-exported-gc-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">[[PreventExtensions]] internal method of an Exported GC Object</dfn> <var>O</var> takes no arguments and returns a boolean. It performs the following steps when called:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return false.</p>"
        }
      ]
    },
    {
      "name": "[[GetOwnProperty]] internal method of an Exported GC Object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#getownproperty-internal-method-of-an-exported-gc-object",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"getownproperty-internal-method-of-an-exported-gc-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">[[GetOwnProperty]] internal method of an Exported GC Object</dfn> <var>O</var> takes argument <var>P</var> (a property key) and returns undefined. It performs the following steps when called:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return undefined.</p>"
        }
      ]
    },
    {
      "name": "[[DefineOwnProperty]] internal method of an Exported GC Object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#defineownproperty-internal-method-of-an-exported-gc-object",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"defineownproperty-internal-method-of-an-exported-gc-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">[[DefineOwnProperty]] internal method of an Exported GC Object</dfn> <var>O</var> takes arguments <var>P</var> (a property key) and <var>Desc</var> (a property descriptor) and returns a boolean. It performs the following steps when called:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return false.</p>"
        }
      ]
    },
    {
      "name": "[[HasProperty]] internal method of an Exported GC Object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#hasproperty-internal-method-of-an-exported-gc-object",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"hasproperty-internal-method-of-an-exported-gc-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">[[HasProperty]] internal method of an Exported GC Object</dfn> <var>O</var> takes argument <var>P</var> (a property key) and returns a boolean. It performs the following steps when called:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return false.</p>"
        }
      ]
    },
    {
      "name": "[[Get]] internal method of an Exported GC Object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#get-internal-method-of-an-exported-gc-object",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"get-internal-method-of-an-exported-gc-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">[[Get]] internal method of an Exported GC Object</dfn> <var>O</var> takes arguments <var>P</var> (a property key) and <var>Receiver</var> (an ECMAScript language value) and returns undefined. It performs the following steps when called:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return undefined.</p>"
        }
      ]
    },
    {
      "name": "[[Set]] internal method of an Exported GC Object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#set-internal-method-of-an-exported-gc-object",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"set-internal-method-of-an-exported-gc-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">[[Set]] internal method of an Exported GC Object</dfn> <var>O</var> takes arguments <var>P</var> (a property key), <var>V</var> (an ECMAScript language value), and <var>Receiver</var> (an ECMAScript language value) and throws an exception. It performs the following steps when called:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①⑨\">TypeError</a></code>.</p>"
        }
      ]
    },
    {
      "name": "[[Delete]] internal method of an Exported GC Object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#delete-internal-method-of-an-exported-gc-object",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"delete-internal-method-of-an-exported-gc-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">[[Delete]] internal method of an Exported GC Object</dfn> <var>O</var> takes argument <var>P</var> (a property key) and throws an exception. It performs the following steps when called:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror②⓪\">TypeError</a></code>.</p>"
        }
      ]
    },
    {
      "name": "[[OwnPropertyKeys]] internal method of an Exported GC Object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#ownpropertykeys-internal-method-of-an-exported-gc-object",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"ownpropertykeys-internal-method-of-an-exported-gc-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">[[OwnPropertyKeys]] internal method of an Exported GC Object</dfn> <var>O</var> takes no arguments and returns a list. It performs the following steps when called:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let keys be a new empty list.</p>"
        },
        {
          "html": "<p>Return keys.</p>"
        }
      ]
    },
    {
      "name": "a new Exported GC Object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#a-new-exported-gc-object",
      "html": "To create <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"a-new-exported-gc-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">a new Exported GC Object</dfn> from a WebAssembly <u class=\"link-error\" data-lt=\"object address\" title=\"LINK ERROR: No 'dfn' refs found for 'object address'.\">object address</u> <var>objectaddr</var> and a string <var>objectkind</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>objectkind</var> is either \"array\" or \"struct\".</p>"
        },
        {
          "html": "<p>Let <var>map</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent④⓪\">surrounding agent</a>’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exported-gc-object-cache\" id=\"ref-for-exported-gc-object-cache\">exported GC object cache</a>.</p>"
        },
        {
          "html": "If <var>map</var>[<var>objectaddr</var>] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①⑧\">exists</a>,",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return <var>map</var>[<var>objectaddr</var>].</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>object</var> be <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-makebasicobject\" id=\"ref-for-sec-makebasicobject\">MakeBasicObject</a>(« [[ObjectAddress]] »).</p>"
        },
        {
          "html": "<p>Set <var>object</var>.[[ObjectAddress]] to <var>objectaddr</var>.</p>"
        },
        {
          "html": "<p>Set <var>object</var>.[[ObjectKind]] to <var>objectkind</var>.</p>"
        },
        {
          "html": "<p>Set <var>object</var>.[[GetPrototypeOf]] as specified in <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#getprototypeof-internal-method-of-an-exported-gc-object\" id=\"ref-for-getprototypeof-internal-method-of-an-exported-gc-object\">[[GetPrototypeOf]] internal method of an Exported GC Object</a>.</p>"
        },
        {
          "html": "<p>Set <var>object</var>.[[SetPrototypeOf]] as specified in <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#setprototypeof-internal-method-of-an-exported-gc-object\" id=\"ref-for-setprototypeof-internal-method-of-an-exported-gc-object\">[[SetPrototypeOf]] internal method of an Exported GC Object</a>.</p>"
        },
        {
          "html": "<p>Set <var>object</var>.[[IsExtensible]] as specified in <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#isextensible-internal-method-of-an-exported-gc-object\" id=\"ref-for-isextensible-internal-method-of-an-exported-gc-object\">[[IsExtensible]] internal method of an Exported GC Object</a>.</p>"
        },
        {
          "html": "<p>Set <var>object</var>.[[PreventExtensions]] as specified in <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#preventextensions-internal-method-of-an-exported-gc-object\" id=\"ref-for-preventextensions-internal-method-of-an-exported-gc-object\">[[PreventExtensions]] internal method of an Exported GC Object</a>.</p>"
        },
        {
          "html": "<p>Set <var>object</var>.[[GetOwnProperty]] as specified in <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#getownproperty-internal-method-of-an-exported-gc-object\" id=\"ref-for-getownproperty-internal-method-of-an-exported-gc-object\">[[GetOwnProperty]] internal method of an Exported GC Object</a>.</p>"
        },
        {
          "html": "<p>Set <var>object</var>.[[DefineOwnProperty]] as specified in <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#defineownproperty-internal-method-of-an-exported-gc-object\" id=\"ref-for-defineownproperty-internal-method-of-an-exported-gc-object\">[[DefineOwnProperty]] internal method of an Exported GC Object</a>.</p>"
        },
        {
          "html": "<p>Set <var>object</var>.[[HasProperty]] as specified in <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#hasproperty-internal-method-of-an-exported-gc-object\" id=\"ref-for-hasproperty-internal-method-of-an-exported-gc-object\">[[HasProperty]] internal method of an Exported GC Object</a>.</p>"
        },
        {
          "html": "<p>Set <var>object</var>.[[Get]] as specified in <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#get-internal-method-of-an-exported-gc-object\" id=\"ref-for-get-internal-method-of-an-exported-gc-object\">[[Get]] internal method of an Exported GC Object</a>.</p>"
        },
        {
          "html": "<p>Set <var>object</var>.[[Set]] as specified in <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#set-internal-method-of-an-exported-gc-object\" id=\"ref-for-set-internal-method-of-an-exported-gc-object\">[[Set]] internal method of an Exported GC Object</a>.</p>"
        },
        {
          "html": "<p>Set <var>object</var>.[[Delete]] as specified in <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#delete-internal-method-of-an-exported-gc-object\" id=\"ref-for-delete-internal-method-of-an-exported-gc-object\">[[Delete]] internal method of an Exported GC Object</a>.</p>"
        },
        {
          "html": "<p>Set <var>object</var>.[[OwnPropertyKeys]] as specified in <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#ownpropertykeys-internal-method-of-an-exported-gc-object\" id=\"ref-for-ownpropertykeys-internal-method-of-an-exported-gc-object\">[[OwnPropertyKeys]] internal method of an Exported GC Object</a>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-set\" id=\"ref-for-map-set⑧\">Set</a> <var>map</var>[<var>objectaddr</var>] to <var>object</var>.</p>"
        },
        {
          "html": "<p>Return <var>object</var>.</p>"
        }
      ]
    },
    {
      "name": "initialize an Exception object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#initialize-an-exception-object",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"initialize-an-exception-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">initialize an Exception object</dfn> <var>exn</var> from an <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-exnaddr\" id=\"ref-for-syntax-exnaddr①\">Exception address</a> <var>exnAddress</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>map</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent④①\">surrounding agent</a>’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exception-object-cache\" id=\"ref-for-exception-object-cache\">Exception object cache</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>map</var>[<var>exnAddress</var>] doesn’t <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①⑨\">exist</a>.</p>"
        },
        {
          "html": "<p>Set <var>exn</var>.[[Address]] to <var>exnAddress</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-set\" id=\"ref-for-map-set⑨\">Set</a> <var>map</var>[<var>exnAddress</var>] to <var>exn</var>.</p>"
        },
        {
          "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent④②\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store③⑤\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let <var>tagaddr</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-exn-tag\" id=\"ref-for-embed-exn-tag①\">exn_tag</a>(<var>store</var>, <var>exnAddress</var>).</p>"
        },
        {
          "html": "<p>Let <var>payload</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-exn-read\" id=\"ref-for-embed-exn-read①\">exn_read</a>(<var>store</var>, <var>exnAddress</var>).</p>"
        },
        {
          "html": "<p>Set <var>exn</var>.[[Type]] to <var>tagaddr</var>.</p>"
        },
        {
          "html": "<p>Set <var>exn</var>.[[Payload]] to <var>payload</var>.</p>"
        },
        {
          "html": "<p>Set <var>exn</var>.[[Stack]] to undefined.</p>"
        }
      ]
    },
    {
      "name": "create an Exception object",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#create-an-exception-object",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"create-an-exception-object\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">create an Exception object</dfn> from a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-exnaddr\" id=\"ref-for-syntax-exnaddr②\">exception address</a> <var>exnAddress</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>map</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent④③\">surrounding agent</a>’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exception-object-cache\" id=\"ref-for-exception-object-cache①\">Exception object cache</a>.</p>"
        },
        {
          "html": "If <var>map</var>[<var>exnAddress</var>] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists②⓪\">exists</a>,",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return <var>map</var>[<var>exnAddress</var>].</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>exn</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new⑤\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exception\" id=\"ref-for-exception③\">Exception</a></code>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#initialize-an-exception-object\" id=\"ref-for-initialize-an-exception-object\">Initialize</a> <var>exn</var> from <var>exnAddress</var>.</p>"
        },
        {
          "html": "<p>Return <var>exn</var>.</p>"
        }
      ]
    },
    {
      "name": "Exception/Exception(exceptionTag, payload, options)",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-exception-exception",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Exception\" data-dfn-type=\"constructor\" data-export=\"\" data-lt=\"Exception(exceptionTag, payload, options)|constructor(exceptionTag, payload, options)|Exception(exceptionTag, payload)|constructor(exceptionTag, payload)\" id=\"dom-exception-exception\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>new Exception(<var>exceptionTag</var>, <var>payload</var>, <var>options</var>)</code></dfn>\nconstructor steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>JSTagAddr</var> be the result of <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#get-the-javascript-exception-tag\" id=\"ref-for-get-the-javascript-exception-tag③\">getting the JavaScript exception tag</a>.</p>"
        },
        {
          "html": "If <var>exceptionTag</var>.[[Address]] is equal to <var>JSTagAddr</var>,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror②①\">TypeError</a></code>.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent④④\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store③⑥\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let [<var>types</var>] → [] be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-tag-type\" id=\"ref-for-embed-tag-type\">tag_type</a>(<var>store</var>, <var>exceptionTag</var>.[[Address]]).</p>"
        },
        {
          "html": "If <var>types</var>’s <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-size\" id=\"ref-for-list-size⑤\">size</a> is not <var>payload</var>’s <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-size\" id=\"ref-for-list-size⑥\">size</a>,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror②②\">TypeError</a></code>.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>wasmPayload</var> be « ».</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate①②\">For each</a> <var>value</var> and <var>resultType</var> of <var>payload</var> and <var>types</var>, paired linearly,",
          "rationale": "if",
          "steps": [
            {
              "html": "If <var>resultType</var> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/valid/matching.html#match-valtype\" id=\"ref-for-match-valtype⑥\">matches</a> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#vector-types\" id=\"ref-for-vector-types⑧\">v128</a> or <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype①⑥\">exnref</a>,",
              "rationale": "throw",
              "steps": [
                {
                  "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror②③\">TypeError</a></code>.</p>"
                }
              ]
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append①③\">Append</a> <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands③⑨\">?</a> <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#towebassemblyvalue\" id=\"ref-for-towebassemblyvalue①②\">ToWebAssemblyValue</a>(<var>value</var>, <var>resultType</var>) to <var>wasmPayload</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Let (<var>store</var>, <var>exceptionAddr</var>) be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-exn-alloc\" id=\"ref-for-embed-exn-alloc①\">exn_alloc</a>(<var>store</var>, <var>exceptionTag</var>.[[Address]], <var>wasmPayload</var>)</p>"
        },
        {
          "html": "<p>Set the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent④⑤\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store③⑦\">associated store</a> to <var>store</var>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#initialize-an-exception-object\" id=\"ref-for-initialize-an-exception-object①\">Initialize</a> <strong>this</strong> from <var>exceptionAddr</var>.</p>"
        },
        {
          "html": "If <var>options</var>[\"traceStack\"] is true,",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <strong>this</strong>.[[Stack]] to either a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-DOMString\" id=\"ref-for-idl-DOMString②\">DOMString</a></code> representation of the current call stack or undefined.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "Exception/getArg(index)",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-exception-getarg",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Exception\" data-dfn-type=\"method\" data-export=\"\" id=\"dom-exception-getarg\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>getArg(<var>index</var>)</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent④⑥\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store③⑧\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let <var>tagaddr</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-exn-tag\" id=\"ref-for-embed-exn-tag②\">exn_tag</a>(<var>store</var>, <strong>this</strong>.[[Address]]).</p>"
        },
        {
          "html": "<p>Let <var>payload</var> be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-exn-read\" id=\"ref-for-embed-exn-read②\">exn_read</a>(<var>store</var>, <strong>this</strong>.[[Address]]).</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>tagaddr</var> is equal to <strong>this</strong>.[[Type]].</p>"
        },
        {
          "html": "If <var>index</var> ≥ <var>payload</var>’s <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-size\" id=\"ref-for-list-size⑦\">size</a>,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-rangeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-rangeerror①⓪\">RangeError</a></code>.</p>"
            }
          ]
        },
        {
          "html": "<p>Let [<var>types</var>] → [] be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-tag-type\" id=\"ref-for-embed-tag-type①\">tag_type</a>(<var>store</var>, <var>tagaddr</var>).</p>"
        },
        {
          "html": "If <var>types</var>[<var>index</var>] <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/valid/matching.html#match-valtype\" id=\"ref-for-match-valtype⑦\">matches</a> <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#vector-types\" id=\"ref-for-vector-types⑨\">v128</a> or <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype①⑦\">exnref</a>,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.github.io/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror②④\">TypeError</a></code>.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tojsvalue\" id=\"ref-for-tojsvalue⑥\">ToJSValue</a>(<var>payload</var>[<var>index</var>]).</p>"
        }
      ]
    },
    {
      "name": "Exception/is(exceptionTag)",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-exception-is",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Exception\" data-dfn-type=\"method\" data-export=\"\" id=\"dom-exception-is\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>is(<var>exceptionTag</var>)</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <strong>this</strong>.[[Type]] is not equal to <var>exceptionTag</var>.[[Address]],",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return false.</p>"
            }
          ]
        },
        {
          "html": "<p>Return true.</p>"
        }
      ]
    },
    {
      "name": "Exception/stack",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#dom-exception-stack",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"Exception\" data-dfn-type=\"attribute\" data-export=\"\" id=\"dom-exception-stack\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>stack</code></dfn> getter steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <strong>this</strong>.[[Stack]].</p>"
        }
      ]
    },
    {
      "name": "get the JavaScript exception tag",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#get-the-javascript-exception-tag",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"get-the-javascript-exception-tag\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">get the JavaScript exception tag</dfn>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent④⑦\">surrounding agent</a>’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#javascript-exception-tag\" id=\"ref-for-javascript-exception-tag\">JavaScript exception tag</a> has been initialized,",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>return the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent④⑧\">surrounding agent</a>’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#javascript-exception-tag\" id=\"ref-for-javascript-exception-tag①\">JavaScript exception tag</a></p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>store</var> be the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent④⑨\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store④⓪\">associated store</a>.</p>"
        },
        {
          "html": "<p>Let (<var>store</var>, <var>tagAddress</var>) be <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tag_alloc\" id=\"ref-for-tag_alloc①\">tag_alloc</a>(<var>store</var>, « <a data-link-type=\"dfn\" data-refhint-key=\"92193adb\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-reftype\" id=\"ref-for-syntax-reftype①⑨\">externref</a> » → « »).</p>"
        },
        {
          "html": "<p>Set the current agent’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store④①\">associated store</a> to <var>store</var>.</p>"
        },
        {
          "html": "<p>Set the current agent’s associated <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#javascript-exception-tag\" id=\"ref-for-javascript-exception-tag②\">JavaScript exception tag</a> to <var>tagAddress</var>.</p>"
        },
        {
          "html": "<p>return <var>tagAddress</var>.</p>"
        }
      ]
    },
    {
      "name": "create the WebAssembly namespace object",
      "html": "When the <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-namespace-object\" id=\"ref-for-dfn-namespace-object\">namespace object</a> for the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#namespacedef-webassembly\" id=\"ref-for-namespacedef-webassembly⑧\">WebAssembly</a></code> namespace is <a data-link-type=\"dfn\" href=\"https://heycam.github.io/webidl/#create-a-namespace-object\" id=\"ref-for-create-a-namespace-object\">created</a>, the following steps must be run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>namespaceObject</var> be the <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-namespace-object\" id=\"ref-for-dfn-namespace-object①\">namespace object</a>.</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate①③\">For each</a> <var>error</var> of « \"CompileError\", \"LinkError\", \"RuntimeError\" »,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>constructor</var> be a new object, implementing the <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-nativeerror-object-structure\" id=\"ref-for-sec-nativeerror-object-structure\">NativeError Object Structure</a>, with <var>NativeError</var> set to <var>error</var>.</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④⓪\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-definemethodproperty\" id=\"ref-for-sec-definemethodproperty\">DefineMethodProperty</a>(<var>namespaceObject</var>, <var>error</var>,  <var>constructor</var>, false).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "get the builtins for a builtin set",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#get-the-builtins-for-a-builtin-set",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"get-the-builtins-for-a-builtin-set\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">get the builtins for a builtin set</dfn> with <var>builtinSetName</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return a list of (<var>name</var>, <var>funcType</var>, <var>steps</var>) for the set with name <var>builtinSetName</var> defined within this section.</p>"
        }
      ]
    },
    {
      "name": "find a builtin",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#find-a-builtin",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"find-a-builtin\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">find a builtin</dfn> with <var>import</var> and enabled builtins <var>builtinSetNames</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#validate-builtin-set-names\" id=\"ref-for-validate-builtin-set-names①\">validate builtin set names</a> <var>builtinSetNames</var> is true.</p>"
        },
        {
          "html": "<p>Let <var>importModuleName</var> be <var>import</var>[0].</p>"
        },
        {
          "html": "<p>Let <var>importName</var> be <var>import</var>[1].</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate①④\">For each</a> <var>builtinSetName</var> of <var>builtinSetNames</var>,",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>builtinSetName</var> does not refer to a builtin set, then <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#iteration-continue\" id=\"ref-for-iteration-continue④\">continue</a>.</p>"
            },
            {
              "html": "<p>Let <var>builtinSetQualifiedName</var> be <var>builtinSetName</var> prefixed with \"wasm:\".</p>"
            },
            {
              "html": "If <var>importModuleName</var> equals <var>builtinSetQualifiedName</var>,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>builtins</var> be the result of <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#get-the-builtins-for-a-builtin-set\" id=\"ref-for-get-the-builtins-for-a-builtin-set\">get the builtins for a builtin set</a> <var>builtinSetName</var>.</p>"
                },
                {
                  "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate①⑤\">For each</a> <var>builtin</var> of <var>builtins</var>,",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>builtinName</var> be <var>builtin</var>[0].</p>"
                    },
                    {
                      "html": "<p>If <var>importName</var> equals <var>builtinName</var>, return (<var>builtinSetName</var>, <var>builtin</var>).</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return null.</p>"
        }
      ]
    },
    {
      "name": "validate builtin set names",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#validate-builtin-set-names",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"validate-builtin-set-names\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">validate builtin set names</dfn> with <var>builtinSetNames</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>builtinSetNames</var> contains any duplicates, return false.</p>"
        },
        {
          "html": "<p>Return true.</p>"
        }
      ]
    },
    {
      "name": "create a builtin function",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#create-a-builtin-function",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"create-a-builtin-function\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">create a builtin function</dfn> from type <var>funcType</var> and execution steps <var>steps</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>hostfunc</var> be a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-hostfunc\" id=\"ref-for-syntax-hostfunc①\">host function</a> which executes <var>steps</var> when called.</p>"
        },
        {
          "html": "<p>Let (<var>store</var>, <var>funcaddr</var>) be <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-func-alloc\" id=\"ref-for-embed-func-alloc①\">func_alloc</a>(<var>store</var>, <var>functype</var>, <var>hostfunc</var>).</p>"
        },
        {
          "html": "<p>Set the <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#surrounding-agent\" id=\"ref-for-surrounding-agent⑤⓪\">surrounding agent</a>’s <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#associated-store\" id=\"ref-for-associated-store④②\">associated store</a> to <var>store</var>.</p>"
        },
        {
          "html": "<p>Return <var>funcaddr</var>.</p>"
        }
      ]
    },
    {
      "name": "instantiate a builtin set",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#instantiate-a-builtin-set",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"instantiate-a-builtin-set\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">instantiate a builtin set</dfn> with name <var>builtinSetName</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>builtins</var> be the result of <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#get-the-builtins-for-a-builtin-set\" id=\"ref-for-get-the-builtins-for-a-builtin-set①\">get the builtins for a builtin set</a> <var>builtinSetName</var>.</p>"
        },
        {
          "html": "<p>Let <var>exportsObject</var> be <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④①\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinaryobjectcreate\" id=\"ref-for-sec-ordinaryobjectcreate②\">OrdinaryObjectCreate</a>(null).</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate①⑥\">For each</a> (<var>name</var>, <var>funcType</var>, <var>steps</var>) of <var>builtins</var>,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>funcaddr</var> be the result fo <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#create-a-builtin-function\" id=\"ref-for-create-a-builtin-function\">create a builtin function</a> with <var>funcType</var> and <var>steps</var>.</p>"
            },
            {
              "html": "<p>Let <var>func</var> be the result of creating <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#a-new-exported-function\" id=\"ref-for-a-new-exported-function②\">a new Exported Function</a> from <var>funcaddr</var>.</p>"
            },
            {
              "html": "<p>Let <var>value</var> be <var>func</var>.</p>"
            },
            {
              "html": "<p>Let <var>status</var> be <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④②\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-createdataproperty\" id=\"ref-for-sec-createdataproperty②\">CreateDataProperty</a>(<var>exportsObject</var>, <var>name</var>, <var>value</var>).</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>status</var> is true.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <var>exportsObject</var>.</p>"
        }
      ]
    },
    {
      "name": "validate an import for builtins",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#validate-an-import-for-builtins",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"validate-an-import-for-builtins\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">validate an import for builtins</dfn> with <var>import</var>, enabled builtins <var>builtinSetNames</var>, perform the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#validate-builtin-set-names\" id=\"ref-for-validate-builtin-set-names②\">validate builtin set names</a> <var>builtinSetNames</var> is true.</p>"
        },
        {
          "html": "<p>Let <var>maybeBuiltin</var> be the result of <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#find-a-builtin\" id=\"ref-for-find-a-builtin①\">finding a builtin</a> for <var>import</var> and <var>builtinSetNames</var>.</p>"
        },
        {
          "html": "<p>If <var>maybeBuiltin</var> is null, return true.</p>"
        },
        {
          "html": "<p>Let <var>importExternType</var> be <var>import</var>[2].</p>"
        },
        {
          "html": "<p>Let <var>builtinFuncType</var> be <var>maybeBuiltin</var>[0][1].</p>"
        },
        {
          "html": "<p>Let <var>builtinExternType</var> be <code>func |builtinFuncType|</code>.</p>"
        },
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/appendix/embedding.html#embed-match-externtype\" id=\"ref-for-embed-match-externtype①\">match_externtype</a>(<var>builtinExternType</var>, <var>importExternType</var>).</p>"
        }
      ]
    },
    {
      "name": "UnwrapString",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#abstract-opdef-unwrapstring",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"UnwrapString\" id=\"abstract-opdef-unwrapstring\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">UnwrapString(<var>v</var>)</dfn> abstract operation, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>v</var> <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type\" id=\"ref-for-sec-ecmascript-language-types-string-type\">is not a String</a>,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-runtimeerror\" id=\"ref-for-exceptiondef-runtimeerror③\">RuntimeError</a></code> exception as if a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-trap\" id=\"ref-for-syntax-trap\">trap</a> was executed.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <var>v</var></p>"
        }
      ]
    },
    {
      "name": "FromCharCode",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#abstract-opdef-fromcharcode",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"FromCharCode\" id=\"abstract-opdef-fromcharcode\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">FromCharCode(<var>v</var>)</dfn> abstract operation, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>v</var> is of type <a data-link-type=\"dfn\" data-refhint-key=\"1eccdce5\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-numtype\" id=\"ref-for-syntax-numtype①②\">i32</a>.</p>"
        },
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④③\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-call\" id=\"ref-for-sec-call①\">Call</a>(<a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-string.fromcharcode\" id=\"ref-for-sec-string.fromcharcode\">String.fromCharCode</a>, undefined, « <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tojsvalue\" id=\"ref-for-tojsvalue⑦\">ToJSValue</a>(<var>v</var>) »).</p>"
        }
      ]
    },
    {
      "name": "CharCodeAt",
      "href": "https://www.w3.org/TR/wasm-js-api-2/#abstract-opdef-charcodeat",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"CharCodeAt\" id=\"abstract-opdef-charcodeat\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">CharCodeAt(<var>string</var>, <var>index</var>)</dfn> abstract operation, when invoked, performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>index</var> is of type <a data-link-type=\"dfn\" data-refhint-key=\"1eccdce5\" href=\"https://webassembly.github.io/spec/core/syntax/types.html#syntax-numtype\" id=\"ref-for-syntax-numtype①③\">i32</a>.</p>"
        },
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④④\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-call\" id=\"ref-for-sec-call②\">Call</a>(<a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-string.prototype.charcodeat\" id=\"ref-for-sec-string.prototype.charcodeat\">String.prototype.charCodeAt</a>, <var>string</var>, « <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tojsvalue\" id=\"ref-for-tojsvalue⑧\">ToJSValue</a>(<var>index</var>) »).</p>"
        }
      ]
    },
    {
      "name": "js-string-cast",
      "html": "When this builtin is invoked with parameter <var>v</var>, the following steps must be run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④⑤\">?</a> <a data-link-type=\"abstract-op\" href=\"https://www.w3.org/TR/wasm-js-api-2/#abstract-opdef-unwrapstring\" id=\"ref-for-abstract-opdef-unwrapstring\">UnwrapString</a>(<var>v</var>)</p>"
        }
      ]
    },
    {
      "name": "js-string-test",
      "html": "When this builtin is invoked with parameter <var>v</var>, the following steps must be run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>v</var> <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type\" id=\"ref-for-sec-ecmascript-language-types-string-type①\">is not a String</a>,",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return 0.</p>"
            }
          ]
        },
        {
          "html": "<p>Return 1.</p>"
        }
      ]
    },
    {
      "name": "js-string-fromCharCodeArray",
      "html": "When this builtin is invoked with parameters <var>array</var>, <var>start</var>, and <var>end</var>, the following steps must be run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>array</var> is null,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-runtimeerror\" id=\"ref-for-exceptiondef-runtimeerror④\">RuntimeError</a></code> exception as if a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-trap\" id=\"ref-for-syntax-trap①\">trap</a> was executed.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>length</var> be the number of elements in <var>array</var>.</p>"
        },
        {
          "html": "If <var>start</var> &gt; <var>end</var> or <var>end</var> &gt; <var>length</var>,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-runtimeerror\" id=\"ref-for-exceptiondef-runtimeerror⑤\">RuntimeError</a></code> exception as if a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-trap\" id=\"ref-for-syntax-trap②\">trap</a> was executed.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>result</var> be the empty string.</p>"
        },
        {
          "html": "<p>Let <var>i</var> be <var>start</var>.</p>"
        },
        {
          "html": "While <var>i</var> &lt; <var>end</var>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>charCode</var> be the value of the element stored at index <var>i</var> in <var>array</var>.</p>"
            },
            {
              "html": "<p>Let <var>charCodeString</var> be <a data-link-type=\"abstract-op\" href=\"https://www.w3.org/TR/wasm-js-api-2/#abstract-opdef-fromcharcode\" id=\"ref-for-abstract-opdef-fromcharcode\">FromCharCode</a>(<var>charCode</var>).</p>"
            },
            {
              "html": "<p>Let <var>result</var> be the concatenation of <var>result</var> and <var>charCodeString</var>.</p>"
            },
            {
              "html": "<p>Set <var>i</var> to <var>i</var> + 1.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <var>result</var>.</p>"
        }
      ]
    },
    {
      "name": "js-string-intoCharCodeArray",
      "html": "When this builtin is invoked with parameters <var>string</var>, <var>array</var>, and <var>start</var>, the following steps must be run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>array</var> is null,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-runtimeerror\" id=\"ref-for-exceptiondef-runtimeerror⑥\">RuntimeError</a></code> exception as if a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-trap\" id=\"ref-for-syntax-trap③\">trap</a> was executed.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>string</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④⑥\">?</a> <a data-link-type=\"abstract-op\" href=\"https://www.w3.org/TR/wasm-js-api-2/#abstract-opdef-unwrapstring\" id=\"ref-for-abstract-opdef-unwrapstring①\">UnwrapString</a>(<var>string</var>).</p>"
        },
        {
          "html": "<p>Let <var>stringLength</var> be the <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#string-length\" id=\"ref-for-string-length\">length</a> of <var>string</var>.</p>"
        },
        {
          "html": "<p>Let <var>arrayLength</var> be the number of elements in <var>array</var>.</p>"
        },
        {
          "html": "If <var>start</var> + <var>stringLength</var> &gt; <var>arrayLength</var>,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-runtimeerror\" id=\"ref-for-exceptiondef-runtimeerror⑦\">RuntimeError</a></code> exception as if a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-trap\" id=\"ref-for-syntax-trap④\">trap</a> was executed.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>i</var> be 0.</p>"
        },
        {
          "html": "While <var>i</var> &lt; <var>stringLength</var>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>charCode</var> be <a data-link-type=\"abstract-op\" href=\"https://www.w3.org/TR/wasm-js-api-2/#abstract-opdef-charcodeat\" id=\"ref-for-abstract-opdef-charcodeat\">CharCodeAt</a>(<var>string</var>, <var>i</var>).</p>"
            },
            {
              "html": "<p>Set the element at index <var>start</var> + <var>i</var> in <var>array</var> to <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#towebassemblyvalue\" id=\"ref-for-towebassemblyvalue①③\">ToWebAssemblyValue</a>(<var>charCode</var>).</p>"
            },
            {
              "html": "<p>Set <var>i</var> to <var>i</var> + 1.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <var>stringLength</var>.</p>"
        }
      ]
    },
    {
      "name": "js-string-fromCharCode",
      "html": "When this builtin is invoked with parameter <var>v</var>, the following steps must be run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <a data-link-type=\"abstract-op\" href=\"https://www.w3.org/TR/wasm-js-api-2/#abstract-opdef-fromcharcode\" id=\"ref-for-abstract-opdef-fromcharcode①\">FromCharCode</a>(<var>v</var>).</p>"
        }
      ]
    },
    {
      "name": "js-string-fromCodePoint",
      "html": "When this builtin is invoked with parameter <var>v</var>, the following steps must be run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>v</var> &gt; 0x10ffff,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-runtimeerror\" id=\"ref-for-exceptiondef-runtimeerror⑧\">RuntimeError</a></code> exception as if a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-trap\" id=\"ref-for-syntax-trap⑤\">trap</a> was executed.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④⑦\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-call\" id=\"ref-for-sec-call③\">Call</a>(<a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-string.fromcodepoint\" id=\"ref-for-sec-string.fromcodepoint\">String.fromCodePoint</a>, undefined, « <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tojsvalue\" id=\"ref-for-tojsvalue⑨\">ToJSValue</a>(<var>v</var>) »).</p>"
        }
      ]
    },
    {
      "name": "js-string-charCodeAt",
      "html": "When this builtin is invoked with parameters <var>string</var> and <var>index</var>, the following steps must be run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>string</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④⑧\">?</a> <a data-link-type=\"abstract-op\" href=\"https://www.w3.org/TR/wasm-js-api-2/#abstract-opdef-unwrapstring\" id=\"ref-for-abstract-opdef-unwrapstring②\">UnwrapString</a>(<var>string</var>).</p>"
        },
        {
          "html": "<p>Let <var>length</var> be the <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#string-length\" id=\"ref-for-string-length①\">length</a> of <var>string</var>.</p>"
        },
        {
          "html": "If <var>index</var> &gt;= <var>length</var>,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-runtimeerror\" id=\"ref-for-exceptiondef-runtimeerror⑨\">RuntimeError</a></code> exception as if a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-trap\" id=\"ref-for-syntax-trap⑥\">trap</a> was executed.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <a data-link-type=\"abstract-op\" href=\"https://www.w3.org/TR/wasm-js-api-2/#abstract-opdef-charcodeat\" id=\"ref-for-abstract-opdef-charcodeat①\">CharCodeAt</a>(<var>string</var>, <var>index</var>).</p>"
        }
      ]
    },
    {
      "name": "js-string-codePointAt",
      "html": "When this builtin is invoked with parameters <var>string</var> and <var>index</var>, the following steps must be run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>string</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands④⑨\">?</a> <a data-link-type=\"abstract-op\" href=\"https://www.w3.org/TR/wasm-js-api-2/#abstract-opdef-unwrapstring\" id=\"ref-for-abstract-opdef-unwrapstring③\">UnwrapString</a>(<var>string</var>).</p>"
        },
        {
          "html": "<p>Let <var>length</var> be the <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#string-length\" id=\"ref-for-string-length②\">length</a> of <var>string</var>.</p>"
        },
        {
          "html": "If <var>index</var> &gt;= <var>length</var>,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-runtimeerror\" id=\"ref-for-exceptiondef-runtimeerror①⓪\">RuntimeError</a></code> exception as if a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-trap\" id=\"ref-for-syntax-trap⑦\">trap</a> was executed.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑤⓪\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-call\" id=\"ref-for-sec-call④\">Call</a>(<a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-string.prototype.codepointat\" id=\"ref-for-sec-string.prototype.codepointat\">String.prototype.codePointAt</a>, <var>string</var>, « <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tojsvalue\" id=\"ref-for-tojsvalue①⓪\">ToJSValue</a>(<var>index</var>) »).</p>"
        }
      ]
    },
    {
      "name": "js-string-length",
      "html": "When this builtin is invoked with parameter <var>v</var>, the following steps must be run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>string</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑤①\">?</a> <a data-link-type=\"abstract-op\" href=\"https://www.w3.org/TR/wasm-js-api-2/#abstract-opdef-unwrapstring\" id=\"ref-for-abstract-opdef-unwrapstring④\">UnwrapString</a>(<var>v</var>).</p>"
        },
        {
          "html": "<p>Return the <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#string-length\" id=\"ref-for-string-length③\">length</a> of <var>string</var>.</p>"
        }
      ]
    },
    {
      "name": "js-string-concat",
      "html": "When this builtin is invoked with parameters <var>first</var> and <var>second</var>, the following steps must be run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>first</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑤②\">?</a> <a data-link-type=\"abstract-op\" href=\"https://www.w3.org/TR/wasm-js-api-2/#abstract-opdef-unwrapstring\" id=\"ref-for-abstract-opdef-unwrapstring⑤\">UnwrapString</a>(<var>first</var>).</p>"
        },
        {
          "html": "<p>Let <var>second</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑤③\">?</a> <a data-link-type=\"abstract-op\" href=\"https://www.w3.org/TR/wasm-js-api-2/#abstract-opdef-unwrapstring\" id=\"ref-for-abstract-opdef-unwrapstring⑥\">UnwrapString</a>(<var>second</var>).</p>"
        },
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑤④\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-call\" id=\"ref-for-sec-call⑤\">Call</a>(<a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-string.prototype.concat\" id=\"ref-for-sec-string.prototype.concat\">String.prototype.concat</a>, <var>first</var>, « <var>second</var> »).</p>"
        }
      ]
    },
    {
      "name": "js-string-substring",
      "html": "When this builtin is invoked with parameters <var>string</var>, <var>start</var>, and <var>end</var>, the following steps must be run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>string</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑤⑤\">?</a> <a data-link-type=\"abstract-op\" href=\"https://www.w3.org/TR/wasm-js-api-2/#abstract-opdef-unwrapstring\" id=\"ref-for-abstract-opdef-unwrapstring⑦\">UnwrapString</a>(<var>string</var>).</p>"
        },
        {
          "html": "<p>Let <var>length</var> be the <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#string-length\" id=\"ref-for-string-length④\">length</a> of <var>string</var>.</p>"
        },
        {
          "html": "If <var>start</var> &gt; <var>end</var> or <var>start</var> &gt; <var>length</var>,",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return the empty string.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑤⑥\">!</a> <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-call\" id=\"ref-for-sec-call⑥\">Call</a>(<a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-string.prototype.substring\" id=\"ref-for-sec-string.prototype.substring\">String.prototype.substring</a>, <var>string</var>, « <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tojsvalue\" id=\"ref-for-tojsvalue①①\">ToJSValue</a>(<var>start</var>), <a data-link-type=\"dfn\" href=\"https://www.w3.org/TR/wasm-js-api-2/#tojsvalue\" id=\"ref-for-tojsvalue①②\">ToJSValue</a>(<var>end</var>) »).</p>"
        }
      ]
    },
    {
      "name": "js-string-equals",
      "html": "When this builtin is invoked with parameters <var>first</var> and <var>second</var>, the following steps must be run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>first</var> is not null and <var>first</var> <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type\" id=\"ref-for-sec-ecmascript-language-types-string-type②\">is not a String</a>,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-runtimeerror\" id=\"ref-for-exceptiondef-runtimeerror①①\">RuntimeError</a></code> exception as if a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-trap\" id=\"ref-for-syntax-trap⑧\">trap</a> was executed.</p>"
            }
          ]
        },
        {
          "html": "If <var>second</var> is not null and <var>second</var> <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type\" id=\"ref-for-sec-ecmascript-language-types-string-type③\">is not a String</a>,",
          "rationale": "throw",
          "steps": [
            {
              "html": "<p>Throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://www.w3.org/TR/wasm-js-api-2/#exceptiondef-runtimeerror\" id=\"ref-for-exceptiondef-runtimeerror①②\">RuntimeError</a></code> exception as if a <a data-link-type=\"dfn\" href=\"https://webassembly.github.io/spec/core/exec/runtime.html#syntax-trap\" id=\"ref-for-syntax-trap⑨\">trap</a> was executed.</p>"
            }
          ]
        },
        {
          "html": "If <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑤⑦\">!</a> <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-isstrictlyequal\" id=\"ref-for-sec-isstrictlyequal\">IsStrictlyEqual</a>(<var>first</var>, <var>second</var>) is true,",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return 1.</p>"
            }
          ]
        },
        {
          "html": "<p>Return 0.</p>"
        }
      ]
    },
    {
      "name": "js-string-compare",
      "html": "When this builtin is invoked with parameters <var>first</var> and <var>second</var>, the following steps must be run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>first</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑤⑧\">?</a> <a data-link-type=\"abstract-op\" href=\"https://www.w3.org/TR/wasm-js-api-2/#abstract-opdef-unwrapstring\" id=\"ref-for-abstract-opdef-unwrapstring⑧\">UnwrapString</a>(<var>first</var>).</p>"
        },
        {
          "html": "<p>Let <var>second</var> be <a data-link-type=\"dfn\" data-refhint-key=\"e09fca85\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑤⑨\">?</a> <a data-link-type=\"abstract-op\" href=\"https://www.w3.org/TR/wasm-js-api-2/#abstract-opdef-unwrapstring\" id=\"ref-for-abstract-opdef-unwrapstring⑨\">UnwrapString</a>(<var>second</var>).</p>"
        },
        {
          "html": "If <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑥⓪\">!</a> <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-isstrictlyequal\" id=\"ref-for-sec-isstrictlyequal①\">IsStrictlyEqual</a>(<var>first</var>, <var>second</var>) is true,",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return 0.</p>"
            }
          ]
        },
        {
          "html": "If <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-returnifabrupt-shorthands\" id=\"ref-for-sec-returnifabrupt-shorthands⑥①\">!</a> <a data-link-type=\"dfn\" href=\"https://tc39.github.io/ecma262/#sec-islessthan\" id=\"ref-for-sec-islessthan\">IsLessThan</a>(<var>first</var>, <var>second</var>, true) is true,",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return -1.</p>"
            }
          ]
        },
        {
          "html": "<p>Return 1.</p>"
        }
      ]
    }
  ]
}