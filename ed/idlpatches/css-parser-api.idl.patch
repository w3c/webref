From ecc28b0340a114a76c3ceb957f28a63ddebc0a50 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Philip=20J=C3=A4genstedt?= <philip@foolip.org>
Date: Tue, 16 Feb 2021 14:19:12 +0100
Subject: [PATCH] Fix css-parser-api.idl

https://github.com/WICG/css-parser-api/issues/18
---
 ed/idl/css-parser-api.idl | 27 +++++++++++++++++----------
 1 file changed, 17 insertions(+), 10 deletions(-)

diff --git a/ed/idl/css-parser-api.idl b/ed/idl/css-parser-api.idl
index ddb0c0d5e..4e34a3f25 100644
--- a/ed/idl/css-parser-api.idl
+++ b/ed/idl/css-parser-api.idl
@@ -7,11 +7,11 @@ typedef (DOMString or ReadableStream) CSSStringSource;
 typedef (DOMString or CSSStyleValue or CSSParserValue) CSSToken;
 
 partial namespace CSS {
-  Promise<sequence<CSSParserRule>> parseStylesheet(CSSStringSource css, optional CSSParserOptions options);
-  Promise<sequence<CSSParserRule>> parseRuleList(CSSStringSource css, optional CSSParserOptions options);
-  Promise<CSSParserRule> parseRule(CSSStringSource css, optional CSSParserOptions options);
-  Promise<sequence<CSSParserRule>> parseDeclarationList(CSSStringSource css, optional CSSParserOptions options);
-  CSSParserDeclaration parseDeclaration(DOMString css, optional CSSParserOptions options);
+  Promise<sequence<CSSParserRule>> parseStylesheet(CSSStringSource css, optional CSSParserOptions options = {});
+  Promise<sequence<CSSParserRule>> parseRuleList(CSSStringSource css, optional CSSParserOptions options = {});
+  Promise<CSSParserRule> parseRule(CSSStringSource css, optional CSSParserOptions options = {});
+  Promise<sequence<CSSParserRule>> parseDeclarationList(CSSStringSource css, optional CSSParserOptions options = {});
+  CSSParserDeclaration parseDeclaration(DOMString css, optional CSSParserOptions options = {});
   CSSToken parseValue(DOMString css);
   sequence<CSSToken> parseValueList(DOMString css);
   sequence<sequence<CSSToken>> parseCommaValueList(DOMString css);
@@ -23,12 +23,14 @@ dictionary CSSParserOptions {
      (contains decls or contains qualified rules) */
 };
 
+[Exposed=Window]
 interface CSSParserRule {
   /* Just a superclass. */
 };
 
-[Constructor(DOMString name, sequence<CSSToken> prelude, optional sequence<CSSParserRule>? body)]
+[Exposed=Window]
 interface CSSParserAtRule : CSSParserRule {
+  constructor(DOMString name, sequence<CSSToken> prelude, optional sequence<CSSParserRule>? body);
   readonly attribute DOMString name;
   readonly attribute FrozenArray<CSSParserValue> prelude;
   readonly attribute FrozenArray<CSSParserRule>? body;
@@ -36,33 +38,38 @@ interface CSSParserAtRule : CSSParserRule {
   stringifier;
 };
 
-[Constructor(sequence<CSSToken> prelude, optional sequence<CSSParserRule>? body)]
+[Exposed=Window]
 interface CSSParserQualifiedRule : CSSParserRule {
+  constructor(sequence<CSSToken> prelude, optional sequence<CSSParserRule>? body);
   readonly attribute FrozenArray<CSSParserValue> prelude;
   readonly attribute FrozenArray<CSSParserRule> body;
   stringifier;
 };
 
-[Constructor(DOMString name, optional sequence<CSSParserRule> body)]
+[Exposed=Window]
 interface CSSParserDeclaration : CSSParserRule {
+  constructor(DOMString name, optional sequence<CSSParserRule> body);
   readonly attribute DOMString name;
   readonly attribute FrozenArray<CSSParserValue> body;
   stringifier;
 };
 
+[Exposed=Window]
 interface CSSParserValue {
   /* Just a superclass. */
 };
 
-[Constructor(DOMString name, sequence<CSSParserValue> body)]
+[Exposed=Window]
 interface CSSParserBlock : CSSParserValue {
+  constructor(DOMString name, sequence<CSSParserValue> body);
   readonly attribute DOMString name; /* "[]", "{}", or "()" */
   readonly attribute FrozenArray<CSSParserValue> body;
   stringifier;
 };
 
-[Constructor(DOMString name, sequence<sequence<CSSParserValue>> args)]
+[Exposed=Window]
 interface CSSParserFunction : CSSParserValue {
+  constructor(DOMString name, sequence<sequence<CSSParserValue>> args);
   readonly attribute DOMString name;
   readonly attribute FrozenArray<FrozenArray<CSSParserValue>> args;
   stringifier;
-- 
2.30.0.365.g02bc693789-goog

