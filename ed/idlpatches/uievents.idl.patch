From a7226b687cb8f5b654392aa191aace5bce1d4912 Mon Sep 17 00:00:00 2001
From: Kagami Sascha Rosylight <saschanaz@outlook.com>
Date: Fri, 19 Mar 2021 03:20:54 +0100
Subject: [PATCH] Fix uievents.idl

https://github.com/w3c/uievents/pull/287
https://github.com/w3c/uievents/pull/296
---
 ed/idl/uievents.idl | 66 ++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 59 insertions(+), 7 deletions(-)

diff --git a/ed/idl/uievents.idl b/ed/idl/uievents.idl
index d5506ef77..716998278 100644
--- a/ed/idl/uievents.idl
+++ b/ed/idl/uievents.idl
@@ -5,7 +5,7 @@
 
 [Exposed=Window]
 interface UIEvent : Event {
-  constructor(DOMString type, optional UIEventInit eventInitDict);
+  constructor(DOMString type, optional UIEventInit eventInitDict = {});
   readonly attribute Window? view;
   readonly attribute long detail;
 };
@@ -17,7 +17,7 @@ dictionary UIEventInit : EventInit {
 
 [Exposed=Window]
 interface FocusEvent : UIEvent {
-  constructor(DOMString type, optional FocusEventInit eventInitDict);
+  constructor(DOMString type, optional FocusEventInit eventInitDict = {});
   readonly attribute EventTarget? relatedTarget;
 };
 
@@ -27,7 +27,7 @@ dictionary FocusEventInit : UIEventInit {
 
 [Exposed=Window]
 interface MouseEvent : UIEvent {
-  constructor(DOMString type, optional MouseEventInit eventInitDict);
+  constructor(DOMString type, optional MouseEventInit eventInitDict = {});
   readonly attribute long screenX;
   readonly attribute long screenY;
   readonly attribute long clientX;
@@ -77,7 +77,7 @@ dictionary EventModifierInit : UIEventInit {
 
 [Exposed=Window]
 interface WheelEvent : MouseEvent {
-  constructor(DOMString type, optional WheelEventInit eventInitDict);
+  constructor(DOMString type, optional WheelEventInit eventInitDict = {});
   // DeltaModeCode
   const unsigned long DOM_DELTA_PIXEL = 0x00;
   const unsigned long DOM_DELTA_LINE  = 0x01;
@@ -98,7 +98,7 @@ dictionary WheelEventInit : MouseEventInit {
 
 [Exposed=Window]
 interface InputEvent : UIEvent {
-  constructor(DOMString type, optional InputEventInit eventInitDict);
+  constructor(DOMString type, optional InputEventInit eventInitDict = {});
   readonly attribute DOMString? data;
   readonly attribute boolean isComposing;
   readonly attribute DOMString inputType;
@@ -112,7 +112,7 @@ dictionary InputEventInit : UIEventInit {
 
 [Exposed=Window]
 interface KeyboardEvent : UIEvent {
-  constructor(DOMString type, optional KeyboardEventInit eventInitDict);
+  constructor(DOMString type, optional KeyboardEventInit eventInitDict = {});
   // KeyLocationCode
   const unsigned long DOM_KEY_LOCATION_STANDARD = 0x00;
   const unsigned long DOM_KEY_LOCATION_LEFT = 0x01;
@@ -144,7 +144,7 @@ dictionary KeyboardEventInit : EventModifierInit {
 
 [Exposed=Window]
 interface CompositionEvent : UIEvent {
-  constructor(DOMString type, optional CompositionEventInit eventInitDict);
+  constructor(DOMString type, optional CompositionEventInit eventInitDict = {});
   readonly attribute DOMString data;
 };
 
@@ -152,11 +152,49 @@ dictionary CompositionEventInit : UIEventInit {
   DOMString data = "";
 };
 
+partial interface UIEvent {
+  // Deprecated in this specification
+  undefined initUIEvent();
+};
+
+partial interface MouseEvent {
+  // Deprecated in this specification
+  undefined initMouseEvent();
+};
+
+partial interface WheelEvent {
+  // Originally introduced (and deprecated) in this specification
+  undefined initWheelEvent();
+};
+
+partial interface KeyboardEvent {
+  // Originally introduced (and deprecated) in this specification
+  undefined initKeyboardEvent(DOMString typeArg,
+                              optional boolean bubblesArg = false,
+                              optional boolean cancelableArg = false,
+                              optional Window? viewArg = null,
+                              optional DOMString keyArg = "",
+                              optional unsigned long locationArg = 0,
+                              optional boolean ctrlKey = false,
+                              optional boolean altKey = false,
+                              optional boolean shiftKey = false,
+                              optional boolean metaKey = false);
+};
+
+partial interface CompositionEvent {
+  // Originally introduced (and deprecated) in this specification
+  undefined initCompositionEvent();
+};
+
 partial interface UIEvent {
   // The following support legacy user agents
   readonly attribute unsigned long which;
 };
 
+partial dictionary UIEventInit {
+  unsigned long which = 0;
+};
+
 partial interface KeyboardEvent {
   // The following support legacy user agents
   readonly attribute unsigned long charCode;
@@ -168,3 +206,17 @@ partial dictionary KeyboardEventInit {
   unsigned long charCode = 0;
   unsigned long keyCode = 0;
 };
+
+interface MutationEvent : Event {
+  // attrChangeType
+  const unsigned short MODIFICATION = 1;
+  const unsigned short ADDITION = 2;
+  const unsigned short REMOVAL = 3;
+  readonly attribute Node? relatedNode;
+  readonly attribute DOMString prevValue;
+  readonly attribute DOMString newValue;
+  readonly attribute DOMString attrName;
+  readonly attribute unsigned short attrChange;
+
+  undefined initMutationEvent();
+};
-- 
2.30.2.windows.1

