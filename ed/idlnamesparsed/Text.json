{
  "name": "Text",
  "defined": {
    "spec": {
      "title": "DOM Standard",
      "url": "https://dom.spec.whatwg.org/"
    },
    "fragment": "[Exposed=Window]\ninterface Text : CharacterData {\n  constructor(optional DOMString data = \"\");\n\n  [NewObject] Text splitText(unsigned long offset);\n  readonly attribute DOMString wholeText;\n};",
    "href": "https://dom.spec.whatwg.org/#text"
  },
  "extended": [
    {
      "spec": {
        "title": "DOM Standard",
        "url": "https://dom.spec.whatwg.org/"
      },
      "fragment": "Text includes Slottable;"
    },
    {
      "spec": {
        "title": "CSSOM View Module",
        "url": "https://www.w3.org/TR/cssom-view-1/"
      },
      "fragment": "Text includes GeometryUtils;"
    }
  ],
  "inheritance": {
    "name": "CharacterData",
    "defined": {
      "spec": {
        "title": "DOM Standard",
        "url": "https://dom.spec.whatwg.org/"
      },
      "fragment": "[Exposed=Window]\ninterface CharacterData : Node {\n  attribute [LegacyNullToEmptyString] DOMString data;\n  readonly attribute unsigned long length;\n  DOMString substringData(unsigned long offset, unsigned long count);\n  undefined appendData(DOMString data);\n  undefined insertData(unsigned long offset, DOMString data);\n  undefined deleteData(unsigned long offset, unsigned long count);\n  undefined replaceData(unsigned long offset, unsigned long count, DOMString data);\n};",
      "href": "https://dom.spec.whatwg.org/#characterdata"
    },
    "extended": [
      {
        "spec": {
          "title": "DOM Standard",
          "url": "https://dom.spec.whatwg.org/"
        },
        "fragment": "CharacterData includes NonDocumentTypeChildNode;"
      },
      {
        "spec": {
          "title": "DOM Standard",
          "url": "https://dom.spec.whatwg.org/"
        },
        "fragment": "CharacterData includes ChildNode;"
      }
    ],
    "inheritance": {
      "name": "Node",
      "defined": {
        "spec": {
          "title": "DOM Standard",
          "url": "https://dom.spec.whatwg.org/"
        },
        "fragment": "[Exposed=Window]\ninterface Node : EventTarget {\n  const unsigned short ELEMENT_NODE = 1;\n  const unsigned short ATTRIBUTE_NODE = 2;\n  const unsigned short TEXT_NODE = 3;\n  const unsigned short CDATA_SECTION_NODE = 4;\n  const unsigned short ENTITY_REFERENCE_NODE = 5; // legacy\n  const unsigned short ENTITY_NODE = 6; // legacy\n  const unsigned short PROCESSING_INSTRUCTION_NODE = 7;\n  const unsigned short COMMENT_NODE = 8;\n  const unsigned short DOCUMENT_NODE = 9;\n  const unsigned short DOCUMENT_TYPE_NODE = 10;\n  const unsigned short DOCUMENT_FRAGMENT_NODE = 11;\n  const unsigned short NOTATION_NODE = 12; // legacy\n  readonly attribute unsigned short nodeType;\n  readonly attribute DOMString nodeName;\n\n  readonly attribute USVString baseURI;\n\n  readonly attribute boolean isConnected;\n  readonly attribute Document? ownerDocument;\n  Node getRootNode(optional GetRootNodeOptions options = {});\n  readonly attribute Node? parentNode;\n  readonly attribute Element? parentElement;\n  boolean hasChildNodes();\n  [SameObject] readonly attribute NodeList childNodes;\n  readonly attribute Node? firstChild;\n  readonly attribute Node? lastChild;\n  readonly attribute Node? previousSibling;\n  readonly attribute Node? nextSibling;\n\n  [CEReactions] attribute DOMString? nodeValue;\n  [CEReactions] attribute DOMString? textContent;\n  [CEReactions] undefined normalize();\n\n  [CEReactions, NewObject] Node cloneNode(optional boolean deep = false);\n  boolean isEqualNode(Node? otherNode);\n  boolean isSameNode(Node? otherNode); // legacy alias of ===\n\n  const unsigned short DOCUMENT_POSITION_DISCONNECTED = 0x01;\n  const unsigned short DOCUMENT_POSITION_PRECEDING = 0x02;\n  const unsigned short DOCUMENT_POSITION_FOLLOWING = 0x04;\n  const unsigned short DOCUMENT_POSITION_CONTAINS = 0x08;\n  const unsigned short DOCUMENT_POSITION_CONTAINED_BY = 0x10;\n  const unsigned short DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;\n  unsigned short compareDocumentPosition(Node other);\n  boolean contains(Node? other);\n\n  DOMString? lookupPrefix(DOMString? namespace);\n  DOMString? lookupNamespaceURI(DOMString? prefix);\n  boolean isDefaultNamespace(DOMString? namespace);\n\n  [CEReactions] Node insertBefore(Node node, Node? child);\n  [CEReactions] Node appendChild(Node node);\n  [CEReactions] Node replaceChild(Node node, Node child);\n  [CEReactions] Node removeChild(Node child);\n};",
        "href": "https://dom.spec.whatwg.org/#node"
      },
      "extended": [],
      "inheritance": {
        "name": "EventTarget",
        "defined": {
          "spec": {
            "title": "DOM Standard",
            "url": "https://dom.spec.whatwg.org/"
          },
          "fragment": "[Exposed=(Window,Worker,AudioWorklet)]\ninterface EventTarget {\n  constructor();\n\n  undefined addEventListener(DOMString type, EventListener? callback, optional (AddEventListenerOptions or boolean) options = {});\n  undefined removeEventListener(DOMString type, EventListener? callback, optional (EventListenerOptions or boolean) options = {});\n  boolean dispatchEvent(Event event);\n};",
          "href": "https://dom.spec.whatwg.org/#eventtarget"
        },
        "extended": [],
        "inheritance": null,
        "includes": []
      },
      "includes": []
    },
    "includes": [
      {
        "name": "NonDocumentTypeChildNode",
        "defined": {
          "spec": {
            "title": "DOM Standard",
            "url": "https://dom.spec.whatwg.org/"
          },
          "fragment": "interface mixin NonDocumentTypeChildNode {\n  readonly attribute Element? previousElementSibling;\n  readonly attribute Element? nextElementSibling;\n};",
          "href": "https://dom.spec.whatwg.org/#nondocumenttypechildnode"
        },
        "extended": [],
        "inheritance": null,
        "includes": []
      },
      {
        "name": "ChildNode",
        "defined": {
          "spec": {
            "title": "DOM Standard",
            "url": "https://dom.spec.whatwg.org/"
          },
          "fragment": "interface mixin ChildNode {\n  [CEReactions, Unscopable] undefined before((Node or DOMString)... nodes);\n  [CEReactions, Unscopable] undefined after((Node or DOMString)... nodes);\n  [CEReactions, Unscopable] undefined replaceWith((Node or DOMString)... nodes);\n  [CEReactions, Unscopable] undefined remove();\n};",
          "href": "https://dom.spec.whatwg.org/#childnode"
        },
        "extended": [],
        "inheritance": null,
        "includes": []
      }
    ]
  },
  "includes": [
    {
      "name": "Slottable",
      "defined": {
        "spec": {
          "title": "DOM Standard",
          "url": "https://dom.spec.whatwg.org/"
        },
        "fragment": "interface mixin Slottable {\n  readonly attribute HTMLSlotElement? assignedSlot;\n};",
        "href": "https://dom.spec.whatwg.org/#slotable"
      },
      "extended": [],
      "inheritance": null,
      "includes": []
    },
    {
      "name": "GeometryUtils",
      "defined": {
        "spec": {
          "title": "CSSOM View Module",
          "url": "https://www.w3.org/TR/cssom-view-1/"
        },
        "fragment": "interface mixin GeometryUtils {\n  sequence<DOMQuad> getBoxQuads(optional BoxQuadOptions options = {});\n  DOMQuad convertQuadFromNode(DOMQuadInit quad, GeometryNode from, optional ConvertCoordinateOptions options = {});\n  DOMQuad convertRectFromNode(DOMRectReadOnly rect, GeometryNode from, optional ConvertCoordinateOptions options = {});\n  DOMPoint convertPointFromNode(DOMPointInit point, GeometryNode from, optional ConvertCoordinateOptions options = {}); // XXX z,w turns into 0\n};",
        "href": "https://drafts.csswg.org/cssom-view/#geometryutils"
      },
      "extended": [],
      "inheritance": null,
      "includes": []
    }
  ]
}