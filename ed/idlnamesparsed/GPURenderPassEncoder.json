{
  "name": "GPURenderPassEncoder",
  "defined": {
    "spec": {
      "title": "WebGPU",
      "url": "https://gpuweb.github.io/gpuweb/"
    },
    "fragment": "[Exposed=Window]\ninterface GPURenderPassEncoder {\n    undefined setViewport(float x, float y,\n                     float width, float height,\n                     float minDepth, float maxDepth);\n\n    undefined setScissorRect(GPUIntegerCoordinate x, GPUIntegerCoordinate y,\n                        GPUIntegerCoordinate width, GPUIntegerCoordinate height);\n\n    undefined setBlendColor(GPUColor color);\n    undefined setStencilReference(GPUStencilValue reference);\n\n    undefined beginOcclusionQuery(GPUSize32 queryIndex);\n    undefined endOcclusionQuery();\n\n    undefined beginPipelineStatisticsQuery(GPUQuerySet querySet, GPUSize32 queryIndex);\n    undefined endPipelineStatisticsQuery();\n\n    undefined writeTimestamp(GPUQuerySet querySet, GPUSize32 queryIndex);\n\n    undefined executeBundles(sequence<GPURenderBundle> bundles);\n    undefined endPass();\n};",
    "href": "https://gpuweb.github.io/gpuweb/#gpurenderpassencoder"
  },
  "extended": [
    {
      "spec": {
        "title": "WebGPU",
        "url": "https://gpuweb.github.io/gpuweb/"
      },
      "fragment": "GPURenderPassEncoder includes GPUObjectBase;"
    },
    {
      "spec": {
        "title": "WebGPU",
        "url": "https://gpuweb.github.io/gpuweb/"
      },
      "fragment": "GPURenderPassEncoder includes GPUProgrammablePassEncoder;"
    },
    {
      "spec": {
        "title": "WebGPU",
        "url": "https://gpuweb.github.io/gpuweb/"
      },
      "fragment": "GPURenderPassEncoder includes GPURenderEncoderBase;"
    }
  ],
  "inheritance": null,
  "includes": [
    {
      "name": "GPUObjectBase",
      "defined": {
        "spec": {
          "title": "WebGPU",
          "url": "https://gpuweb.github.io/gpuweb/"
        },
        "fragment": "interface mixin GPUObjectBase {\n    attribute USVString? label;\n};",
        "href": "https://gpuweb.github.io/gpuweb/#gpuobjectbase"
      },
      "extended": [],
      "inheritance": null,
      "includes": []
    },
    {
      "name": "GPUProgrammablePassEncoder",
      "defined": {
        "spec": {
          "title": "WebGPU",
          "url": "https://gpuweb.github.io/gpuweb/"
        },
        "fragment": "interface mixin GPUProgrammablePassEncoder {\n    undefined setBindGroup(GPUIndex32 index, GPUBindGroup bindGroup,\n                      optional sequence<GPUBufferDynamicOffset> dynamicOffsets = []);\n\n    undefined setBindGroup(GPUIndex32 index, GPUBindGroup bindGroup,\n                      Uint32Array dynamicOffsetsData,\n                      GPUSize64 dynamicOffsetsDataStart,\n                      GPUSize32 dynamicOffsetsDataLength);\n\n    undefined pushDebugGroup(USVString groupLabel);\n    undefined popDebugGroup();\n    undefined insertDebugMarker(USVString markerLabel);\n};",
        "href": "https://gpuweb.github.io/gpuweb/#gpuprogrammablepassencoder"
      },
      "extended": [],
      "inheritance": null,
      "includes": []
    },
    {
      "name": "GPURenderEncoderBase",
      "defined": {
        "spec": {
          "title": "WebGPU",
          "url": "https://gpuweb.github.io/gpuweb/"
        },
        "fragment": "interface mixin GPURenderEncoderBase {\n    undefined setPipeline(GPURenderPipeline pipeline);\n\n    undefined setIndexBuffer(GPUBuffer buffer, GPUIndexFormat indexFormat, optional GPUSize64 offset = 0, optional GPUSize64 size = 0);\n    undefined setVertexBuffer(GPUIndex32 slot, GPUBuffer buffer, optional GPUSize64 offset = 0, optional GPUSize64 size = 0);\n\n    undefined draw(GPUSize32 vertexCount, optional GPUSize32 instanceCount = 1,\n              optional GPUSize32 firstVertex = 0, optional GPUSize32 firstInstance = 0);\n    undefined drawIndexed(GPUSize32 indexCount, optional GPUSize32 instanceCount = 1,\n                     optional GPUSize32 firstIndex = 0,\n                     optional GPUSignedOffset32 baseVertex = 0,\n                     optional GPUSize32 firstInstance = 0);\n\n    undefined drawIndirect(GPUBuffer indirectBuffer, GPUSize64 indirectOffset);\n    undefined drawIndexedIndirect(GPUBuffer indirectBuffer, GPUSize64 indirectOffset);\n};",
        "href": "https://gpuweb.github.io/gpuweb/#gpurenderencoderbase"
      },
      "extended": [],
      "inheritance": null,
      "includes": []
    }
  ]
}