{
  "name": "ShadowRoot",
  "defined": {
    "spec": {
      "title": "DOM Standard",
      "url": "https://dom.spec.whatwg.org/"
    },
    "fragment": "[Exposed=Window]\ninterface ShadowRoot : DocumentFragment {\n  readonly attribute ShadowRootMode mode;\n  readonly attribute Element host;\n  attribute EventHandler onslotchange;\n};",
    "href": "https://dom.spec.whatwg.org/#shadowroot"
  },
  "extended": [
    {
      "spec": {
        "title": "DOM Standard",
        "url": "https://dom.spec.whatwg.org/"
      },
      "fragment": "ShadowRoot includes DocumentOrShadowRoot;"
    },
    {
      "spec": {
        "title": "DOM Parsing and Serialization",
        "url": "https://www.w3.org/TR/DOM-Parsing/"
      },
      "fragment": "ShadowRoot includes InnerHTML;"
    }
  ],
  "inheritance": {
    "name": "DocumentFragment",
    "defined": {
      "spec": {
        "title": "DOM Standard",
        "url": "https://dom.spec.whatwg.org/"
      },
      "fragment": "[Exposed=Window]\ninterface DocumentFragment : Node {\n  constructor();\n};",
      "href": "https://dom.spec.whatwg.org/#documentfragment"
    },
    "extended": [
      {
        "spec": {
          "title": "DOM Standard",
          "url": "https://dom.spec.whatwg.org/"
        },
        "fragment": "DocumentFragment includes NonElementParentNode;"
      },
      {
        "spec": {
          "title": "DOM Standard",
          "url": "https://dom.spec.whatwg.org/"
        },
        "fragment": "DocumentFragment includes ParentNode;"
      }
    ],
    "inheritance": {
      "name": "Node",
      "defined": {
        "spec": {
          "title": "DOM Standard",
          "url": "https://dom.spec.whatwg.org/"
        },
        "fragment": "[Exposed=Window]\ninterface Node : EventTarget {\n  const unsigned short ELEMENT_NODE = 1;\n  const unsigned short ATTRIBUTE_NODE = 2;\n  const unsigned short TEXT_NODE = 3;\n  const unsigned short CDATA_SECTION_NODE = 4;\n  const unsigned short ENTITY_REFERENCE_NODE = 5; // legacy\n  const unsigned short ENTITY_NODE = 6; // legacy\n  const unsigned short PROCESSING_INSTRUCTION_NODE = 7;\n  const unsigned short COMMENT_NODE = 8;\n  const unsigned short DOCUMENT_NODE = 9;\n  const unsigned short DOCUMENT_TYPE_NODE = 10;\n  const unsigned short DOCUMENT_FRAGMENT_NODE = 11;\n  const unsigned short NOTATION_NODE = 12; // legacy\n  readonly attribute unsigned short nodeType;\n  readonly attribute DOMString nodeName;\n\n  readonly attribute USVString baseURI;\n\n  readonly attribute boolean isConnected;\n  readonly attribute Document? ownerDocument;\n  Node getRootNode(optional GetRootNodeOptions options = {});\n  readonly attribute Node? parentNode;\n  readonly attribute Element? parentElement;\n  boolean hasChildNodes();\n  [SameObject] readonly attribute NodeList childNodes;\n  readonly attribute Node? firstChild;\n  readonly attribute Node? lastChild;\n  readonly attribute Node? previousSibling;\n  readonly attribute Node? nextSibling;\n\n  [CEReactions] attribute DOMString? nodeValue;\n  [CEReactions] attribute DOMString? textContent;\n  [CEReactions] undefined normalize();\n\n  [CEReactions, NewObject] Node cloneNode(optional boolean deep = false);\n  boolean isEqualNode(Node? otherNode);\n  boolean isSameNode(Node? otherNode); // legacy alias of ===\n\n  const unsigned short DOCUMENT_POSITION_DISCONNECTED = 0x01;\n  const unsigned short DOCUMENT_POSITION_PRECEDING = 0x02;\n  const unsigned short DOCUMENT_POSITION_FOLLOWING = 0x04;\n  const unsigned short DOCUMENT_POSITION_CONTAINS = 0x08;\n  const unsigned short DOCUMENT_POSITION_CONTAINED_BY = 0x10;\n  const unsigned short DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;\n  unsigned short compareDocumentPosition(Node other);\n  boolean contains(Node? other);\n\n  DOMString? lookupPrefix(DOMString? namespace);\n  DOMString? lookupNamespaceURI(DOMString? prefix);\n  boolean isDefaultNamespace(DOMString? namespace);\n\n  [CEReactions] Node insertBefore(Node node, Node? child);\n  [CEReactions] Node appendChild(Node node);\n  [CEReactions] Node replaceChild(Node node, Node child);\n  [CEReactions] Node removeChild(Node child);\n};",
        "href": "https://dom.spec.whatwg.org/#node"
      },
      "extended": [],
      "inheritance": {
        "name": "EventTarget",
        "defined": {
          "spec": {
            "title": "DOM Standard",
            "url": "https://dom.spec.whatwg.org/"
          },
          "fragment": "[Exposed=(Window,Worker,AudioWorklet)]\ninterface EventTarget {\n  constructor();\n\n  undefined addEventListener(DOMString type, EventListener? callback, optional (AddEventListenerOptions or boolean) options = {});\n  undefined removeEventListener(DOMString type, EventListener? callback, optional (EventListenerOptions or boolean) options = {});\n  boolean dispatchEvent(Event event);\n};",
          "href": "https://dom.spec.whatwg.org/#eventtarget"
        },
        "extended": [],
        "inheritance": null,
        "includes": []
      },
      "includes": []
    },
    "includes": [
      {
        "name": "NonElementParentNode",
        "defined": {
          "spec": {
            "title": "DOM Standard",
            "url": "https://dom.spec.whatwg.org/"
          },
          "fragment": "interface mixin NonElementParentNode {\n  Element? getElementById(DOMString elementId);\n};",
          "href": "https://dom.spec.whatwg.org/#nonelementparentnode"
        },
        "extended": [],
        "inheritance": null,
        "includes": []
      },
      {
        "name": "ParentNode",
        "defined": {
          "spec": {
            "title": "DOM Standard",
            "url": "https://dom.spec.whatwg.org/"
          },
          "fragment": "interface mixin ParentNode {\n  [SameObject] readonly attribute HTMLCollection children;\n  readonly attribute Element? firstElementChild;\n  readonly attribute Element? lastElementChild;\n  readonly attribute unsigned long childElementCount;\n\n  [CEReactions, Unscopable] undefined prepend((Node or DOMString)... nodes);\n  [CEReactions, Unscopable] undefined append((Node or DOMString)... nodes);\n  [CEReactions, Unscopable] undefined replaceChildren((Node or DOMString)... nodes);\n\n  Element? querySelector(DOMString selectors);\n  [NewObject] NodeList querySelectorAll(DOMString selectors);\n};",
          "href": "https://dom.spec.whatwg.org/#parentnode"
        },
        "extended": [],
        "inheritance": null,
        "includes": []
      }
    ]
  },
  "includes": [
    {
      "name": "DocumentOrShadowRoot",
      "defined": {
        "spec": {
          "title": "DOM Standard",
          "url": "https://dom.spec.whatwg.org/"
        },
        "fragment": "interface mixin DocumentOrShadowRoot {\n};",
        "href": "https://dom.spec.whatwg.org/#documentorshadowroot"
      },
      "extended": [
        {
          "spec": {
            "title": "Fullscreen API Standard",
            "url": "https://fullscreen.spec.whatwg.org/"
          },
          "fragment": "partial interface mixin DocumentOrShadowRoot {\n  [LegacyLenientSetter] readonly attribute Element? fullscreenElement;\n};"
        },
        {
          "spec": {
            "title": "HTML Standard",
            "url": "https://html.spec.whatwg.org/multipage/"
          },
          "fragment": "partial interface mixin DocumentOrShadowRoot {\n  readonly attribute Element? activeElement;\n};"
        },
        {
          "spec": {
            "title": "Constructable Stylesheet Objects",
            "url": "https://wicg.github.io/construct-stylesheets/"
          },
          "fragment": "partial interface mixin DocumentOrShadowRoot {\n  attribute FrozenArray<CSSStyleSheet> adoptedStyleSheets;\n};"
        },
        {
          "spec": {
            "title": "CSS Object Model (CSSOM)",
            "url": "https://www.w3.org/TR/cssom-1/"
          },
          "fragment": "partial interface mixin DocumentOrShadowRoot {\n  [SameObject] readonly attribute StyleSheetList styleSheets;\n};"
        },
        {
          "spec": {
            "title": "Picture-in-Picture",
            "url": "https://www.w3.org/TR/picture-in-picture/"
          },
          "fragment": "partial interface mixin DocumentOrShadowRoot {\n  readonly attribute Element? pictureInPictureElement;\n};"
        },
        {
          "spec": {
            "title": "Pointer Lock 2.0",
            "url": "https://www.w3.org/TR/pointerlock-2/"
          },
          "fragment": "partial interface mixin DocumentOrShadowRoot {\n  readonly attribute Element ? pointerLockElement;\n};"
        },
        {
          "spec": {
            "title": "Web Animations",
            "url": "https://www.w3.org/TR/web-animations-1/"
          },
          "fragment": "partial interface mixin DocumentOrShadowRoot {\n    sequence<Animation> getAnimations();\n};"
        }
      ],
      "inheritance": null,
      "includes": []
    },
    {
      "name": "InnerHTML",
      "defined": {
        "spec": {
          "title": "DOM Parsing and Serialization",
          "url": "https://www.w3.org/TR/DOM-Parsing/"
        },
        "fragment": "interface mixin InnerHTML {\n  [CEReactions] attribute [LegacyNullToEmptyString] DOMString innerHTML;\n};",
        "href": "https://w3c.github.io/DOM-Parsing/#dom-innerhtml"
      },
      "extended": [],
      "inheritance": null,
      "includes": []
    }
  ]
}