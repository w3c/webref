{
  "name": "GPUDevice",
  "defined": {
    "spec": {
      "title": "WebGPU",
      "url": "https://gpuweb.github.io/gpuweb/"
    },
    "fragment": "[Exposed=(Window, DedicatedWorker), Serializable]\ninterface GPUDevice : EventTarget {\n    [SameObject] readonly attribute GPUSupportedFeatures features;\n    readonly attribute object limits;\n\n    [SameObject] readonly attribute GPUQueue queue;\n\n    undefined destroy();\n\n    GPUBuffer createBuffer(GPUBufferDescriptor descriptor);\n    GPUTexture createTexture(GPUTextureDescriptor descriptor);\n    GPUSampler createSampler(optional GPUSamplerDescriptor descriptor = {});\n\n    GPUBindGroupLayout createBindGroupLayout(GPUBindGroupLayoutDescriptor descriptor);\n    GPUPipelineLayout createPipelineLayout(GPUPipelineLayoutDescriptor descriptor);\n    GPUBindGroup createBindGroup(GPUBindGroupDescriptor descriptor);\n\n    GPUShaderModule createShaderModule(GPUShaderModuleDescriptor descriptor);\n    GPUComputePipeline createComputePipeline(GPUComputePipelineDescriptor descriptor);\n    GPURenderPipeline createRenderPipeline(GPURenderPipelineDescriptor descriptor);\n    Promise<GPUComputePipeline> createComputePipelineAsync(GPUComputePipelineDescriptor descriptor);\n    Promise<GPURenderPipeline> createRenderPipelineAsync(GPURenderPipelineDescriptor descriptor);\n\n    GPUCommandEncoder createCommandEncoder(optional GPUCommandEncoderDescriptor descriptor = {});\n    GPURenderBundleEncoder createRenderBundleEncoder(GPURenderBundleEncoderDescriptor descriptor);\n\n    GPUQuerySet createQuerySet(GPUQuerySetDescriptor descriptor);\n};",
    "href": "https://gpuweb.github.io/gpuweb/#gpudevice"
  },
  "extended": [
    {
      "spec": {
        "title": "WebGPU",
        "url": "https://gpuweb.github.io/gpuweb/"
      },
      "fragment": "GPUDevice includes GPUObjectBase;"
    },
    {
      "spec": {
        "title": "WebGPU",
        "url": "https://gpuweb.github.io/gpuweb/"
      },
      "fragment": "partial interface GPUDevice {\n    readonly attribute Promise<GPUDeviceLostInfo> lost;\n};"
    },
    {
      "spec": {
        "title": "WebGPU",
        "url": "https://gpuweb.github.io/gpuweb/"
      },
      "fragment": "partial interface GPUDevice {\n    undefined pushErrorScope(GPUErrorFilter filter);\n    Promise<GPUError?> popErrorScope();\n};"
    },
    {
      "spec": {
        "title": "WebGPU",
        "url": "https://gpuweb.github.io/gpuweb/"
      },
      "fragment": "partial interface GPUDevice {\n    [Exposed=(Window, DedicatedWorker)]\n    attribute EventHandler onuncapturederror;\n};"
    }
  ],
  "inheritance": {
    "name": "EventTarget",
    "defined": {
      "spec": {
        "title": "DOM Standard",
        "url": "https://dom.spec.whatwg.org/"
      },
      "fragment": "[Exposed=(Window,Worker,AudioWorklet)]\ninterface EventTarget {\n  constructor();\n\n  undefined addEventListener(DOMString type, EventListener? callback, optional (AddEventListenerOptions or boolean) options = {});\n  undefined removeEventListener(DOMString type, EventListener? callback, optional (EventListenerOptions or boolean) options = {});\n  boolean dispatchEvent(Event event);\n};",
      "href": "https://dom.spec.whatwg.org/#eventtarget"
    },
    "extended": [],
    "inheritance": null,
    "includes": []
  },
  "includes": [
    {
      "name": "GPUObjectBase",
      "defined": {
        "spec": {
          "title": "WebGPU",
          "url": "https://gpuweb.github.io/gpuweb/"
        },
        "fragment": "interface mixin GPUObjectBase {\n    attribute USVString? label;\n};",
        "href": "https://gpuweb.github.io/gpuweb/#gpuobjectbase"
      },
      "extended": [],
      "inheritance": null,
      "includes": []
    }
  ]
}