{
  "name": "WebGL2RenderingContext",
  "defined": {
    "spec": {
      "title": "WebGL 2.0 Specification",
      "url": "https://www.khronos.org/registry/webgl/specs/latest/2.0/"
    },
    "fragment": "[Exposed=(Window,Worker)]\ninterface WebGL2RenderingContext\n{\n};"
  },
  "extended": [
    {
      "spec": {
        "title": "WebGL 2.0 Specification",
        "url": "https://www.khronos.org/registry/webgl/specs/latest/2.0/"
      },
      "fragment": "WebGL2RenderingContext includes WebGLRenderingContextBase;"
    },
    {
      "spec": {
        "title": "WebGL 2.0 Specification",
        "url": "https://www.khronos.org/registry/webgl/specs/latest/2.0/"
      },
      "fragment": "WebGL2RenderingContext includes WebGL2RenderingContextBase;"
    },
    {
      "spec": {
        "title": "WebGL 2.0 Specification",
        "url": "https://www.khronos.org/registry/webgl/specs/latest/2.0/"
      },
      "fragment": "WebGL2RenderingContext includes WebGL2RenderingContextOverloads;"
    }
  ],
  "inheritance": null,
  "includes": [
    {
      "name": "WebGLRenderingContextBase",
      "defined": {
        "spec": {
          "title": "WebGL Specification",
          "url": "https://www.khronos.org/registry/webgl/specs/latest/1.0/"
        },
        "fragment": "interface mixin WebGLRenderingContextBase\n{\n\n    /* ClearBufferMask */\n    const GLenum DEPTH_BUFFER_BIT               = 0x00000100;\n    const GLenum STENCIL_BUFFER_BIT             = 0x00000400;\n    const GLenum COLOR_BUFFER_BIT               = 0x00004000;\n\n    /* BeginMode */\n    const GLenum POINTS                         = 0x0000;\n    const GLenum LINES                          = 0x0001;\n    const GLenum LINE_LOOP                      = 0x0002;\n    const GLenum LINE_STRIP                     = 0x0003;\n    const GLenum TRIANGLES                      = 0x0004;\n    const GLenum TRIANGLE_STRIP                 = 0x0005;\n    const GLenum TRIANGLE_FAN                   = 0x0006;\n\n    /* AlphaFunction (not supported in ES20) */\n    /*      NEVER */\n    /*      LESS */\n    /*      EQUAL */\n    /*      LEQUAL */\n    /*      GREATER */\n    /*      NOTEQUAL */\n    /*      GEQUAL */\n    /*      ALWAYS */\n\n    /* BlendingFactorDest */\n    const GLenum ZERO                           = 0;\n    const GLenum ONE                            = 1;\n    const GLenum SRC_COLOR                      = 0x0300;\n    const GLenum ONE_MINUS_SRC_COLOR            = 0x0301;\n    const GLenum SRC_ALPHA                      = 0x0302;\n    const GLenum ONE_MINUS_SRC_ALPHA            = 0x0303;\n    const GLenum DST_ALPHA                      = 0x0304;\n    const GLenum ONE_MINUS_DST_ALPHA            = 0x0305;\n\n    /* BlendingFactorSrc */\n    /*      ZERO */\n    /*      ONE */\n    const GLenum DST_COLOR                      = 0x0306;\n    const GLenum ONE_MINUS_DST_COLOR            = 0x0307;\n    const GLenum SRC_ALPHA_SATURATE             = 0x0308;\n    /*      SRC_ALPHA */\n    /*      ONE_MINUS_SRC_ALPHA */\n    /*      DST_ALPHA */\n    /*      ONE_MINUS_DST_ALPHA */\n\n    /* BlendEquationSeparate */\n    const GLenum FUNC_ADD                       = 0x8006;\n    const GLenum BLEND_EQUATION                 = 0x8009;\n    const GLenum BLEND_EQUATION_RGB             = 0x8009;   /* same as BLEND_EQUATION */\n    const GLenum BLEND_EQUATION_ALPHA           = 0x883D;\n\n    /* BlendSubtract */\n    const GLenum FUNC_SUBTRACT                  = 0x800A;\n    const GLenum FUNC_REVERSE_SUBTRACT          = 0x800B;\n\n    /* Separate Blend Functions */\n    const GLenum BLEND_DST_RGB                  = 0x80C8;\n    const GLenum BLEND_SRC_RGB                  = 0x80C9;\n    const GLenum BLEND_DST_ALPHA                = 0x80CA;\n    const GLenum BLEND_SRC_ALPHA                = 0x80CB;\n    const GLenum CONSTANT_COLOR                 = 0x8001;\n    const GLenum ONE_MINUS_CONSTANT_COLOR       = 0x8002;\n    const GLenum CONSTANT_ALPHA                 = 0x8003;\n    const GLenum ONE_MINUS_CONSTANT_ALPHA       = 0x8004;\n    const GLenum BLEND_COLOR                    = 0x8005;\n\n    /* Buffer Objects */\n    const GLenum ARRAY_BUFFER                   = 0x8892;\n    const GLenum ELEMENT_ARRAY_BUFFER           = 0x8893;\n    const GLenum ARRAY_BUFFER_BINDING           = 0x8894;\n    const GLenum ELEMENT_ARRAY_BUFFER_BINDING   = 0x8895;\n\n    const GLenum STREAM_DRAW                    = 0x88E0;\n    const GLenum STATIC_DRAW                    = 0x88E4;\n    const GLenum DYNAMIC_DRAW                   = 0x88E8;\n\n    const GLenum BUFFER_SIZE                    = 0x8764;\n    const GLenum BUFFER_USAGE                   = 0x8765;\n\n    const GLenum CURRENT_VERTEX_ATTRIB          = 0x8626;\n\n    /* CullFaceMode */\n    const GLenum FRONT                          = 0x0404;\n    const GLenum BACK                           = 0x0405;\n    const GLenum FRONT_AND_BACK                 = 0x0408;\n\n    /* DepthFunction */\n    /*      NEVER */\n    /*      LESS */\n    /*      EQUAL */\n    /*      LEQUAL */\n    /*      GREATER */\n    /*      NOTEQUAL */\n    /*      GEQUAL */\n    /*      ALWAYS */\n\n    /* EnableCap */\n    /* TEXTURE_2D */\n    const GLenum CULL_FACE                      = 0x0B44;\n    const GLenum BLEND                          = 0x0BE2;\n    const GLenum DITHER                         = 0x0BD0;\n    const GLenum STENCIL_TEST                   = 0x0B90;\n    const GLenum DEPTH_TEST                     = 0x0B71;\n    const GLenum SCISSOR_TEST                   = 0x0C11;\n    const GLenum POLYGON_OFFSET_FILL            = 0x8037;\n    const GLenum SAMPLE_ALPHA_TO_COVERAGE       = 0x809E;\n    const GLenum SAMPLE_COVERAGE                = 0x80A0;\n\n    /* ErrorCode */\n    const GLenum NO_ERROR                       = 0;\n    const GLenum INVALID_ENUM                   = 0x0500;\n    const GLenum INVALID_VALUE                  = 0x0501;\n    const GLenum INVALID_OPERATION              = 0x0502;\n    const GLenum OUT_OF_MEMORY                  = 0x0505;\n\n    /* FrontFaceDirection */\n    const GLenum CW                             = 0x0900;\n    const GLenum CCW                            = 0x0901;\n\n    /* GetPName */\n    const GLenum LINE_WIDTH                     = 0x0B21;\n    const GLenum ALIASED_POINT_SIZE_RANGE       = 0x846D;\n    const GLenum ALIASED_LINE_WIDTH_RANGE       = 0x846E;\n    const GLenum CULL_FACE_MODE                 = 0x0B45;\n    const GLenum FRONT_FACE                     = 0x0B46;\n    const GLenum DEPTH_RANGE                    = 0x0B70;\n    const GLenum DEPTH_WRITEMASK                = 0x0B72;\n    const GLenum DEPTH_CLEAR_VALUE              = 0x0B73;\n    const GLenum DEPTH_FUNC                     = 0x0B74;\n    const GLenum STENCIL_CLEAR_VALUE            = 0x0B91;\n    const GLenum STENCIL_FUNC                   = 0x0B92;\n    const GLenum STENCIL_FAIL                   = 0x0B94;\n    const GLenum STENCIL_PASS_DEPTH_FAIL        = 0x0B95;\n    const GLenum STENCIL_PASS_DEPTH_PASS        = 0x0B96;\n    const GLenum STENCIL_REF                    = 0x0B97;\n    const GLenum STENCIL_VALUE_MASK             = 0x0B93;\n    const GLenum STENCIL_WRITEMASK              = 0x0B98;\n    const GLenum STENCIL_BACK_FUNC              = 0x8800;\n    const GLenum STENCIL_BACK_FAIL              = 0x8801;\n    const GLenum STENCIL_BACK_PASS_DEPTH_FAIL   = 0x8802;\n    const GLenum STENCIL_BACK_PASS_DEPTH_PASS   = 0x8803;\n    const GLenum STENCIL_BACK_REF               = 0x8CA3;\n    const GLenum STENCIL_BACK_VALUE_MASK        = 0x8CA4;\n    const GLenum STENCIL_BACK_WRITEMASK         = 0x8CA5;\n    const GLenum VIEWPORT                       = 0x0BA2;\n    const GLenum SCISSOR_BOX                    = 0x0C10;\n    /*      SCISSOR_TEST */\n    const GLenum COLOR_CLEAR_VALUE              = 0x0C22;\n    const GLenum COLOR_WRITEMASK                = 0x0C23;\n    const GLenum UNPACK_ALIGNMENT               = 0x0CF5;\n    const GLenum PACK_ALIGNMENT                 = 0x0D05;\n    const GLenum MAX_TEXTURE_SIZE               = 0x0D33;\n    const GLenum MAX_VIEWPORT_DIMS              = 0x0D3A;\n    const GLenum SUBPIXEL_BITS                  = 0x0D50;\n    const GLenum RED_BITS                       = 0x0D52;\n    const GLenum GREEN_BITS                     = 0x0D53;\n    const GLenum BLUE_BITS                      = 0x0D54;\n    const GLenum ALPHA_BITS                     = 0x0D55;\n    const GLenum DEPTH_BITS                     = 0x0D56;\n    const GLenum STENCIL_BITS                   = 0x0D57;\n    const GLenum POLYGON_OFFSET_UNITS           = 0x2A00;\n    /*      POLYGON_OFFSET_FILL */\n    const GLenum POLYGON_OFFSET_FACTOR          = 0x8038;\n    const GLenum TEXTURE_BINDING_2D             = 0x8069;\n    const GLenum SAMPLE_BUFFERS                 = 0x80A8;\n    const GLenum SAMPLES                        = 0x80A9;\n    const GLenum SAMPLE_COVERAGE_VALUE          = 0x80AA;\n    const GLenum SAMPLE_COVERAGE_INVERT         = 0x80AB;\n\n    /* GetTextureParameter */\n    /*      TEXTURE_MAG_FILTER */\n    /*      TEXTURE_MIN_FILTER */\n    /*      TEXTURE_WRAP_S */\n    /*      TEXTURE_WRAP_T */\n\n    const GLenum COMPRESSED_TEXTURE_FORMATS     = 0x86A3;\n\n    /* HintMode */\n    const GLenum DONT_CARE                      = 0x1100;\n    const GLenum FASTEST                        = 0x1101;\n    const GLenum NICEST                         = 0x1102;\n\n    /* HintTarget */\n    const GLenum GENERATE_MIPMAP_HINT            = 0x8192;\n\n    /* DataType */\n    const GLenum BYTE                           = 0x1400;\n    const GLenum UNSIGNED_BYTE                  = 0x1401;\n    const GLenum SHORT                          = 0x1402;\n    const GLenum UNSIGNED_SHORT                 = 0x1403;\n    const GLenum INT                            = 0x1404;\n    const GLenum UNSIGNED_INT                   = 0x1405;\n    const GLenum FLOAT                          = 0x1406;\n\n    /* PixelFormat */\n    const GLenum DEPTH_COMPONENT                = 0x1902;\n    const GLenum ALPHA                          = 0x1906;\n    const GLenum RGB                            = 0x1907;\n    const GLenum RGBA                           = 0x1908;\n    const GLenum LUMINANCE                      = 0x1909;\n    const GLenum LUMINANCE_ALPHA                = 0x190A;\n\n    /* PixelType */\n    /*      UNSIGNED_BYTE */\n    const GLenum UNSIGNED_SHORT_4_4_4_4         = 0x8033;\n    const GLenum UNSIGNED_SHORT_5_5_5_1         = 0x8034;\n    const GLenum UNSIGNED_SHORT_5_6_5           = 0x8363;\n\n    /* Shaders */\n    const GLenum FRAGMENT_SHADER                  = 0x8B30;\n    const GLenum VERTEX_SHADER                    = 0x8B31;\n    const GLenum MAX_VERTEX_ATTRIBS               = 0x8869;\n    const GLenum MAX_VERTEX_UNIFORM_VECTORS       = 0x8DFB;\n    const GLenum MAX_VARYING_VECTORS              = 0x8DFC;\n    const GLenum MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;\n    const GLenum MAX_VERTEX_TEXTURE_IMAGE_UNITS   = 0x8B4C;\n    const GLenum MAX_TEXTURE_IMAGE_UNITS          = 0x8872;\n    const GLenum MAX_FRAGMENT_UNIFORM_VECTORS     = 0x8DFD;\n    const GLenum SHADER_TYPE                      = 0x8B4F;\n    const GLenum DELETE_STATUS                    = 0x8B80;\n    const GLenum LINK_STATUS                      = 0x8B82;\n    const GLenum VALIDATE_STATUS                  = 0x8B83;\n    const GLenum ATTACHED_SHADERS                 = 0x8B85;\n    const GLenum ACTIVE_UNIFORMS                  = 0x8B86;\n    const GLenum ACTIVE_ATTRIBUTES                = 0x8B89;\n    const GLenum SHADING_LANGUAGE_VERSION         = 0x8B8C;\n    const GLenum CURRENT_PROGRAM                  = 0x8B8D;\n\n    /* StencilFunction */\n    const GLenum NEVER                          = 0x0200;\n    const GLenum LESS                           = 0x0201;\n    const GLenum EQUAL                          = 0x0202;\n    const GLenum LEQUAL                         = 0x0203;\n    const GLenum GREATER                        = 0x0204;\n    const GLenum NOTEQUAL                       = 0x0205;\n    const GLenum GEQUAL                         = 0x0206;\n    const GLenum ALWAYS                         = 0x0207;\n\n    /* StencilOp */\n    /*      ZERO */\n    const GLenum KEEP                           = 0x1E00;\n    const GLenum REPLACE                        = 0x1E01;\n    const GLenum INCR                           = 0x1E02;\n    const GLenum DECR                           = 0x1E03;\n    const GLenum INVERT                         = 0x150A;\n    const GLenum INCR_WRAP                      = 0x8507;\n    const GLenum DECR_WRAP                      = 0x8508;\n\n    /* StringName */\n    const GLenum VENDOR                         = 0x1F00;\n    const GLenum RENDERER                       = 0x1F01;\n    const GLenum VERSION                        = 0x1F02;\n\n    /* TextureMagFilter */\n    const GLenum NEAREST                        = 0x2600;\n    const GLenum LINEAR                         = 0x2601;\n\n    /* TextureMinFilter */\n    /*      NEAREST */\n    /*      LINEAR */\n    const GLenum NEAREST_MIPMAP_NEAREST         = 0x2700;\n    const GLenum LINEAR_MIPMAP_NEAREST          = 0x2701;\n    const GLenum NEAREST_MIPMAP_LINEAR          = 0x2702;\n    const GLenum LINEAR_MIPMAP_LINEAR           = 0x2703;\n\n    /* TextureParameterName */\n    const GLenum TEXTURE_MAG_FILTER             = 0x2800;\n    const GLenum TEXTURE_MIN_FILTER             = 0x2801;\n    const GLenum TEXTURE_WRAP_S                 = 0x2802;\n    const GLenum TEXTURE_WRAP_T                 = 0x2803;\n\n    /* TextureTarget */\n    const GLenum TEXTURE_2D                     = 0x0DE1;\n    const GLenum TEXTURE                        = 0x1702;\n\n    const GLenum TEXTURE_CUBE_MAP               = 0x8513;\n    const GLenum TEXTURE_BINDING_CUBE_MAP       = 0x8514;\n    const GLenum TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\n    const GLenum TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\n    const GLenum TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\n    const GLenum TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\n    const GLenum TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\n    const GLenum TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851A;\n    const GLenum MAX_CUBE_MAP_TEXTURE_SIZE      = 0x851C;\n\n    /* TextureUnit */\n    const GLenum TEXTURE0                       = 0x84C0;\n    const GLenum TEXTURE1                       = 0x84C1;\n    const GLenum TEXTURE2                       = 0x84C2;\n    const GLenum TEXTURE3                       = 0x84C3;\n    const GLenum TEXTURE4                       = 0x84C4;\n    const GLenum TEXTURE5                       = 0x84C5;\n    const GLenum TEXTURE6                       = 0x84C6;\n    const GLenum TEXTURE7                       = 0x84C7;\n    const GLenum TEXTURE8                       = 0x84C8;\n    const GLenum TEXTURE9                       = 0x84C9;\n    const GLenum TEXTURE10                      = 0x84CA;\n    const GLenum TEXTURE11                      = 0x84CB;\n    const GLenum TEXTURE12                      = 0x84CC;\n    const GLenum TEXTURE13                      = 0x84CD;\n    const GLenum TEXTURE14                      = 0x84CE;\n    const GLenum TEXTURE15                      = 0x84CF;\n    const GLenum TEXTURE16                      = 0x84D0;\n    const GLenum TEXTURE17                      = 0x84D1;\n    const GLenum TEXTURE18                      = 0x84D2;\n    const GLenum TEXTURE19                      = 0x84D3;\n    const GLenum TEXTURE20                      = 0x84D4;\n    const GLenum TEXTURE21                      = 0x84D5;\n    const GLenum TEXTURE22                      = 0x84D6;\n    const GLenum TEXTURE23                      = 0x84D7;\n    const GLenum TEXTURE24                      = 0x84D8;\n    const GLenum TEXTURE25                      = 0x84D9;\n    const GLenum TEXTURE26                      = 0x84DA;\n    const GLenum TEXTURE27                      = 0x84DB;\n    const GLenum TEXTURE28                      = 0x84DC;\n    const GLenum TEXTURE29                      = 0x84DD;\n    const GLenum TEXTURE30                      = 0x84DE;\n    const GLenum TEXTURE31                      = 0x84DF;\n    const GLenum ACTIVE_TEXTURE                 = 0x84E0;\n\n    /* TextureWrapMode */\n    const GLenum REPEAT                         = 0x2901;\n    const GLenum CLAMP_TO_EDGE                  = 0x812F;\n    const GLenum MIRRORED_REPEAT                = 0x8370;\n\n    /* Uniform Types */\n    const GLenum FLOAT_VEC2                     = 0x8B50;\n    const GLenum FLOAT_VEC3                     = 0x8B51;\n    const GLenum FLOAT_VEC4                     = 0x8B52;\n    const GLenum INT_VEC2                       = 0x8B53;\n    const GLenum INT_VEC3                       = 0x8B54;\n    const GLenum INT_VEC4                       = 0x8B55;\n    const GLenum BOOL                           = 0x8B56;\n    const GLenum BOOL_VEC2                      = 0x8B57;\n    const GLenum BOOL_VEC3                      = 0x8B58;\n    const GLenum BOOL_VEC4                      = 0x8B59;\n    const GLenum FLOAT_MAT2                     = 0x8B5A;\n    const GLenum FLOAT_MAT3                     = 0x8B5B;\n    const GLenum FLOAT_MAT4                     = 0x8B5C;\n    const GLenum SAMPLER_2D                     = 0x8B5E;\n    const GLenum SAMPLER_CUBE                   = 0x8B60;\n\n    /* Vertex Arrays */\n    const GLenum VERTEX_ATTRIB_ARRAY_ENABLED        = 0x8622;\n    const GLenum VERTEX_ATTRIB_ARRAY_SIZE           = 0x8623;\n    const GLenum VERTEX_ATTRIB_ARRAY_STRIDE         = 0x8624;\n    const GLenum VERTEX_ATTRIB_ARRAY_TYPE           = 0x8625;\n    const GLenum VERTEX_ATTRIB_ARRAY_NORMALIZED     = 0x886A;\n    const GLenum VERTEX_ATTRIB_ARRAY_POINTER        = 0x8645;\n    const GLenum VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;\n\n    /* Read Format */\n    const GLenum IMPLEMENTATION_COLOR_READ_TYPE   = 0x8B9A;\n    const GLenum IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;\n\n    /* Shader Source */\n    const GLenum COMPILE_STATUS                 = 0x8B81;\n\n    /* Shader Precision-Specified Types */\n    const GLenum LOW_FLOAT                      = 0x8DF0;\n    const GLenum MEDIUM_FLOAT                   = 0x8DF1;\n    const GLenum HIGH_FLOAT                     = 0x8DF2;\n    const GLenum LOW_INT                        = 0x8DF3;\n    const GLenum MEDIUM_INT                     = 0x8DF4;\n    const GLenum HIGH_INT                       = 0x8DF5;\n\n    /* Framebuffer Object. */\n    const GLenum FRAMEBUFFER                    = 0x8D40;\n    const GLenum RENDERBUFFER                   = 0x8D41;\n\n    const GLenum RGBA4                          = 0x8056;\n    const GLenum RGB5_A1                        = 0x8057;\n    const GLenum RGB565                         = 0x8D62;\n    const GLenum DEPTH_COMPONENT16              = 0x81A5;\n    const GLenum STENCIL_INDEX8                 = 0x8D48;\n    const GLenum DEPTH_STENCIL                  = 0x84F9;\n\n    const GLenum RENDERBUFFER_WIDTH             = 0x8D42;\n    const GLenum RENDERBUFFER_HEIGHT            = 0x8D43;\n    const GLenum RENDERBUFFER_INTERNAL_FORMAT   = 0x8D44;\n    const GLenum RENDERBUFFER_RED_SIZE          = 0x8D50;\n    const GLenum RENDERBUFFER_GREEN_SIZE        = 0x8D51;\n    const GLenum RENDERBUFFER_BLUE_SIZE         = 0x8D52;\n    const GLenum RENDERBUFFER_ALPHA_SIZE        = 0x8D53;\n    const GLenum RENDERBUFFER_DEPTH_SIZE        = 0x8D54;\n    const GLenum RENDERBUFFER_STENCIL_SIZE      = 0x8D55;\n\n    const GLenum FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE           = 0x8CD0;\n    const GLenum FRAMEBUFFER_ATTACHMENT_OBJECT_NAME           = 0x8CD1;\n    const GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL         = 0x8CD2;\n    const GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;\n\n    const GLenum COLOR_ATTACHMENT0              = 0x8CE0;\n    const GLenum DEPTH_ATTACHMENT               = 0x8D00;\n    const GLenum STENCIL_ATTACHMENT             = 0x8D20;\n    const GLenum DEPTH_STENCIL_ATTACHMENT       = 0x821A;\n\n    const GLenum NONE                           = 0;\n\n    const GLenum FRAMEBUFFER_COMPLETE                      = 0x8CD5;\n    const GLenum FRAMEBUFFER_INCOMPLETE_ATTACHMENT         = 0x8CD6;\n    const GLenum FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;\n    const GLenum FRAMEBUFFER_INCOMPLETE_DIMENSIONS         = 0x8CD9;\n    const GLenum FRAMEBUFFER_UNSUPPORTED                   = 0x8CDD;\n\n    const GLenum FRAMEBUFFER_BINDING            = 0x8CA6;\n    const GLenum RENDERBUFFER_BINDING           = 0x8CA7;\n    const GLenum MAX_RENDERBUFFER_SIZE          = 0x84E8;\n\n    const GLenum INVALID_FRAMEBUFFER_OPERATION  = 0x0506;\n\n    /* WebGL-specific enums */\n    const GLenum UNPACK_FLIP_Y_WEBGL            = 0x9240;\n    const GLenum UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;\n    const GLenum CONTEXT_LOST_WEBGL             = 0x9242;\n    const GLenum UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\n    const GLenum BROWSER_DEFAULT_WEBGL          = 0x9244;\n\n    [Exposed=Window] readonly attribute (HTMLCanvasElement or OffscreenCanvas) canvas;\n    [Exposed=Worker] readonly attribute OffscreenCanvas canvas;\n    readonly attribute GLsizei drawingBufferWidth;\n    readonly attribute GLsizei drawingBufferHeight;\n\n    [WebGLHandlesContextLoss] WebGLContextAttributes? getContextAttributes();\n    [WebGLHandlesContextLoss] boolean isContextLost();\n\n    sequence<DOMString>? getSupportedExtensions();\n    object? getExtension(DOMString name);\n\n    undefined activeTexture(GLenum texture);\n    undefined attachShader(WebGLProgram program, WebGLShader shader);\n    undefined bindAttribLocation(WebGLProgram program, GLuint index, DOMString name);\n    undefined bindBuffer(GLenum target, WebGLBuffer? buffer);\n    undefined bindFramebuffer(GLenum target, WebGLFramebuffer? framebuffer);\n    undefined bindRenderbuffer(GLenum target, WebGLRenderbuffer? renderbuffer);\n    undefined bindTexture(GLenum target, WebGLTexture? texture);\n    undefined blendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);\n    undefined blendEquation(GLenum mode);\n    undefined blendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);\n    undefined blendFunc(GLenum sfactor, GLenum dfactor);\n    undefined blendFuncSeparate(GLenum srcRGB, GLenum dstRGB,\n                                GLenum srcAlpha, GLenum dstAlpha);\n\n    [WebGLHandlesContextLoss] GLenum checkFramebufferStatus(GLenum target);\n    undefined clear(GLbitfield mask);\n    undefined clearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);\n    undefined clearDepth(GLclampf depth);\n    undefined clearStencil(GLint s);\n    undefined colorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);\n    undefined compileShader(WebGLShader shader);\n\n    undefined copyTexImage2D(GLenum target, GLint level, GLenum internalformat,\n                             GLint x, GLint y, GLsizei width, GLsizei height,\n                             GLint border);\n    undefined copyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\n                                GLint x, GLint y, GLsizei width, GLsizei height);\n\n    WebGLBuffer? createBuffer();\n    WebGLFramebuffer? createFramebuffer();\n    WebGLProgram? createProgram();\n    WebGLRenderbuffer? createRenderbuffer();\n    WebGLShader? createShader(GLenum type);\n    WebGLTexture? createTexture();\n\n    undefined cullFace(GLenum mode);\n\n    undefined deleteBuffer(WebGLBuffer? buffer);\n    undefined deleteFramebuffer(WebGLFramebuffer? framebuffer);\n    undefined deleteProgram(WebGLProgram? program);\n    undefined deleteRenderbuffer(WebGLRenderbuffer? renderbuffer);\n    undefined deleteShader(WebGLShader? shader);\n    undefined deleteTexture(WebGLTexture? texture);\n\n    undefined depthFunc(GLenum func);\n    undefined depthMask(GLboolean flag);\n    undefined depthRange(GLclampf zNear, GLclampf zFar);\n    undefined detachShader(WebGLProgram program, WebGLShader shader);\n    undefined disable(GLenum cap);\n    undefined disableVertexAttribArray(GLuint index);\n    undefined drawArrays(GLenum mode, GLint first, GLsizei count);\n    undefined drawElements(GLenum mode, GLsizei count, GLenum type, GLintptr offset);\n\n    undefined enable(GLenum cap);\n    undefined enableVertexAttribArray(GLuint index);\n    undefined finish();\n    undefined flush();\n    undefined framebufferRenderbuffer(GLenum target, GLenum attachment,\n                                      GLenum renderbuffertarget,\n                                      WebGLRenderbuffer? renderbuffer);\n    undefined framebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget,\n                                   WebGLTexture? texture, GLint level);\n    undefined frontFace(GLenum mode);\n\n    undefined generateMipmap(GLenum target);\n\n    WebGLActiveInfo? getActiveAttrib(WebGLProgram program, GLuint index);\n    WebGLActiveInfo? getActiveUniform(WebGLProgram program, GLuint index);\n    sequence<WebGLShader>? getAttachedShaders(WebGLProgram program);\n\n    [WebGLHandlesContextLoss] GLint getAttribLocation(WebGLProgram program, DOMString name);\n\n    any getBufferParameter(GLenum target, GLenum pname);\n    any getParameter(GLenum pname);\n\n    [WebGLHandlesContextLoss] GLenum getError();\n\n    any getFramebufferAttachmentParameter(GLenum target, GLenum attachment,\n                                          GLenum pname);\n    any getProgramParameter(WebGLProgram program, GLenum pname);\n    DOMString? getProgramInfoLog(WebGLProgram program);\n    any getRenderbufferParameter(GLenum target, GLenum pname);\n    any getShaderParameter(WebGLShader shader, GLenum pname);\n    WebGLShaderPrecisionFormat? getShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype);\n    DOMString? getShaderInfoLog(WebGLShader shader);\n\n    DOMString? getShaderSource(WebGLShader shader);\n\n    any getTexParameter(GLenum target, GLenum pname);\n\n    any getUniform(WebGLProgram program, WebGLUniformLocation location);\n\n    WebGLUniformLocation? getUniformLocation(WebGLProgram program, DOMString name);\n\n    any getVertexAttrib(GLuint index, GLenum pname);\n\n    [WebGLHandlesContextLoss] GLintptr getVertexAttribOffset(GLuint index, GLenum pname);\n\n    undefined hint(GLenum target, GLenum mode);\n    [WebGLHandlesContextLoss] GLboolean isBuffer(WebGLBuffer? buffer);\n    [WebGLHandlesContextLoss] GLboolean isEnabled(GLenum cap);\n    [WebGLHandlesContextLoss] GLboolean isFramebuffer(WebGLFramebuffer? framebuffer);\n    [WebGLHandlesContextLoss] GLboolean isProgram(WebGLProgram? program);\n    [WebGLHandlesContextLoss] GLboolean isRenderbuffer(WebGLRenderbuffer? renderbuffer);\n    [WebGLHandlesContextLoss] GLboolean isShader(WebGLShader? shader);\n    [WebGLHandlesContextLoss] GLboolean isTexture(WebGLTexture? texture);\n    undefined lineWidth(GLfloat width);\n    undefined linkProgram(WebGLProgram program);\n    undefined pixelStorei(GLenum pname, GLint param);\n    undefined polygonOffset(GLfloat factor, GLfloat units);\n\n    undefined renderbufferStorage(GLenum target, GLenum internalformat,\n                                  GLsizei width, GLsizei height);\n    undefined sampleCoverage(GLclampf value, GLboolean invert);\n    undefined scissor(GLint x, GLint y, GLsizei width, GLsizei height);\n\n    undefined shaderSource(WebGLShader shader, DOMString source);\n\n    undefined stencilFunc(GLenum func, GLint ref, GLuint mask);\n    undefined stencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);\n    undefined stencilMask(GLuint mask);\n    undefined stencilMaskSeparate(GLenum face, GLuint mask);\n    undefined stencilOp(GLenum fail, GLenum zfail, GLenum zpass);\n    undefined stencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass);\n\n    undefined texParameterf(GLenum target, GLenum pname, GLfloat param);\n    undefined texParameteri(GLenum target, GLenum pname, GLint param);\n\n    undefined uniform1f(WebGLUniformLocation? location, GLfloat x);\n    undefined uniform2f(WebGLUniformLocation? location, GLfloat x, GLfloat y);\n    undefined uniform3f(WebGLUniformLocation? location, GLfloat x, GLfloat y, GLfloat z);\n    undefined uniform4f(WebGLUniformLocation? location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);\n\n    undefined uniform1i(WebGLUniformLocation? location, GLint x);\n    undefined uniform2i(WebGLUniformLocation? location, GLint x, GLint y);\n    undefined uniform3i(WebGLUniformLocation? location, GLint x, GLint y, GLint z);\n    undefined uniform4i(WebGLUniformLocation? location, GLint x, GLint y, GLint z, GLint w);\n\n    undefined useProgram(WebGLProgram? program);\n    undefined validateProgram(WebGLProgram program);\n\n    undefined vertexAttrib1f(GLuint index, GLfloat x);\n    undefined vertexAttrib2f(GLuint index, GLfloat x, GLfloat y);\n    undefined vertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);\n    undefined vertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);\n\n    undefined vertexAttrib1fv(GLuint index, Float32List values);\n    undefined vertexAttrib2fv(GLuint index, Float32List values);\n    undefined vertexAttrib3fv(GLuint index, Float32List values);\n    undefined vertexAttrib4fv(GLuint index, Float32List values);\n\n    undefined vertexAttribPointer(GLuint index, GLint size, GLenum type,\n                                  GLboolean normalized, GLsizei stride, GLintptr offset);\n\n    undefined viewport(GLint x, GLint y, GLsizei width, GLsizei height);\n};"
      },
      "extended": [
        {
          "spec": {
            "title": "WebXR Device API",
            "url": "https://www.w3.org/TR/webxr/"
          },
          "fragment": "partial interface mixin WebGLRenderingContextBase {\n    [NewObject] Promise<undefined> makeXRCompatible();\n};"
        }
      ],
      "inheritance": null,
      "includes": []
    },
    {
      "name": "WebGL2RenderingContextBase",
      "defined": {
        "spec": {
          "title": "WebGL 2.0 Specification",
          "url": "https://www.khronos.org/registry/webgl/specs/latest/2.0/"
        },
        "fragment": "interface mixin WebGL2RenderingContextBase\n{\n  const GLenum READ_BUFFER                                   = 0x0C02;\n  const GLenum UNPACK_ROW_LENGTH                             = 0x0CF2;\n  const GLenum UNPACK_SKIP_ROWS                              = 0x0CF3;\n  const GLenum UNPACK_SKIP_PIXELS                            = 0x0CF4;\n  const GLenum PACK_ROW_LENGTH                               = 0x0D02;\n  const GLenum PACK_SKIP_ROWS                                = 0x0D03;\n  const GLenum PACK_SKIP_PIXELS                              = 0x0D04;\n  const GLenum COLOR                                         = 0x1800;\n  const GLenum DEPTH                                         = 0x1801;\n  const GLenum STENCIL                                       = 0x1802;\n  const GLenum RED                                           = 0x1903;\n  const GLenum RGB8                                          = 0x8051;\n  const GLenum RGBA8                                         = 0x8058;\n  const GLenum RGB10_A2                                      = 0x8059;\n  const GLenum TEXTURE_BINDING_3D                            = 0x806A;\n  const GLenum UNPACK_SKIP_IMAGES                            = 0x806D;\n  const GLenum UNPACK_IMAGE_HEIGHT                           = 0x806E;\n  const GLenum TEXTURE_3D                                    = 0x806F;\n  const GLenum TEXTURE_WRAP_R                                = 0x8072;\n  const GLenum MAX_3D_TEXTURE_SIZE                           = 0x8073;\n  const GLenum UNSIGNED_INT_2_10_10_10_REV                   = 0x8368;\n  const GLenum MAX_ELEMENTS_VERTICES                         = 0x80E8;\n  const GLenum MAX_ELEMENTS_INDICES                          = 0x80E9;\n  const GLenum TEXTURE_MIN_LOD                               = 0x813A;\n  const GLenum TEXTURE_MAX_LOD                               = 0x813B;\n  const GLenum TEXTURE_BASE_LEVEL                            = 0x813C;\n  const GLenum TEXTURE_MAX_LEVEL                             = 0x813D;\n  const GLenum MIN                                           = 0x8007;\n  const GLenum MAX                                           = 0x8008;\n  const GLenum DEPTH_COMPONENT24                             = 0x81A6;\n  const GLenum MAX_TEXTURE_LOD_BIAS                          = 0x84FD;\n  const GLenum TEXTURE_COMPARE_MODE                          = 0x884C;\n  const GLenum TEXTURE_COMPARE_FUNC                          = 0x884D;\n  const GLenum CURRENT_QUERY                                 = 0x8865;\n  const GLenum QUERY_RESULT                                  = 0x8866;\n  const GLenum QUERY_RESULT_AVAILABLE                        = 0x8867;\n  const GLenum STREAM_READ                                   = 0x88E1;\n  const GLenum STREAM_COPY                                   = 0x88E2;\n  const GLenum STATIC_READ                                   = 0x88E5;\n  const GLenum STATIC_COPY                                   = 0x88E6;\n  const GLenum DYNAMIC_READ                                  = 0x88E9;\n  const GLenum DYNAMIC_COPY                                  = 0x88EA;\n  const GLenum MAX_DRAW_BUFFERS                              = 0x8824;\n  const GLenum DRAW_BUFFER0                                  = 0x8825;\n  const GLenum DRAW_BUFFER1                                  = 0x8826;\n  const GLenum DRAW_BUFFER2                                  = 0x8827;\n  const GLenum DRAW_BUFFER3                                  = 0x8828;\n  const GLenum DRAW_BUFFER4                                  = 0x8829;\n  const GLenum DRAW_BUFFER5                                  = 0x882A;\n  const GLenum DRAW_BUFFER6                                  = 0x882B;\n  const GLenum DRAW_BUFFER7                                  = 0x882C;\n  const GLenum DRAW_BUFFER8                                  = 0x882D;\n  const GLenum DRAW_BUFFER9                                  = 0x882E;\n  const GLenum DRAW_BUFFER10                                 = 0x882F;\n  const GLenum DRAW_BUFFER11                                 = 0x8830;\n  const GLenum DRAW_BUFFER12                                 = 0x8831;\n  const GLenum DRAW_BUFFER13                                 = 0x8832;\n  const GLenum DRAW_BUFFER14                                 = 0x8833;\n  const GLenum DRAW_BUFFER15                                 = 0x8834;\n  const GLenum MAX_FRAGMENT_UNIFORM_COMPONENTS               = 0x8B49;\n  const GLenum MAX_VERTEX_UNIFORM_COMPONENTS                 = 0x8B4A;\n  const GLenum SAMPLER_3D                                    = 0x8B5F;\n  const GLenum SAMPLER_2D_SHADOW                             = 0x8B62;\n  const GLenum FRAGMENT_SHADER_DERIVATIVE_HINT               = 0x8B8B;\n  const GLenum PIXEL_PACK_BUFFER                             = 0x88EB;\n  const GLenum PIXEL_UNPACK_BUFFER                           = 0x88EC;\n  const GLenum PIXEL_PACK_BUFFER_BINDING                     = 0x88ED;\n  const GLenum PIXEL_UNPACK_BUFFER_BINDING                   = 0x88EF;\n  const GLenum FLOAT_MAT2x3                                  = 0x8B65;\n  const GLenum FLOAT_MAT2x4                                  = 0x8B66;\n  const GLenum FLOAT_MAT3x2                                  = 0x8B67;\n  const GLenum FLOAT_MAT3x4                                  = 0x8B68;\n  const GLenum FLOAT_MAT4x2                                  = 0x8B69;\n  const GLenum FLOAT_MAT4x3                                  = 0x8B6A;\n  const GLenum SRGB                                          = 0x8C40;\n  const GLenum SRGB8                                         = 0x8C41;\n  const GLenum SRGB8_ALPHA8                                  = 0x8C43;\n  const GLenum COMPARE_REF_TO_TEXTURE                        = 0x884E;\n  const GLenum RGBA32F                                       = 0x8814;\n  const GLenum RGB32F                                        = 0x8815;\n  const GLenum RGBA16F                                       = 0x881A;\n  const GLenum RGB16F                                        = 0x881B;\n  const GLenum VERTEX_ATTRIB_ARRAY_INTEGER                   = 0x88FD;\n  const GLenum MAX_ARRAY_TEXTURE_LAYERS                      = 0x88FF;\n  const GLenum MIN_PROGRAM_TEXEL_OFFSET                      = 0x8904;\n  const GLenum MAX_PROGRAM_TEXEL_OFFSET                      = 0x8905;\n  const GLenum MAX_VARYING_COMPONENTS                        = 0x8B4B;\n  const GLenum TEXTURE_2D_ARRAY                              = 0x8C1A;\n  const GLenum TEXTURE_BINDING_2D_ARRAY                      = 0x8C1D;\n  const GLenum R11F_G11F_B10F                                = 0x8C3A;\n  const GLenum UNSIGNED_INT_10F_11F_11F_REV                  = 0x8C3B;\n  const GLenum RGB9_E5                                       = 0x8C3D;\n  const GLenum UNSIGNED_INT_5_9_9_9_REV                      = 0x8C3E;\n  const GLenum TRANSFORM_FEEDBACK_BUFFER_MODE                = 0x8C7F;\n  const GLenum MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS    = 0x8C80;\n  const GLenum TRANSFORM_FEEDBACK_VARYINGS                   = 0x8C83;\n  const GLenum TRANSFORM_FEEDBACK_BUFFER_START               = 0x8C84;\n  const GLenum TRANSFORM_FEEDBACK_BUFFER_SIZE                = 0x8C85;\n  const GLenum TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN         = 0x8C88;\n  const GLenum RASTERIZER_DISCARD                            = 0x8C89;\n  const GLenum MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;\n  const GLenum MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS       = 0x8C8B;\n  const GLenum INTERLEAVED_ATTRIBS                           = 0x8C8C;\n  const GLenum SEPARATE_ATTRIBS                              = 0x8C8D;\n  const GLenum TRANSFORM_FEEDBACK_BUFFER                     = 0x8C8E;\n  const GLenum TRANSFORM_FEEDBACK_BUFFER_BINDING             = 0x8C8F;\n  const GLenum RGBA32UI                                      = 0x8D70;\n  const GLenum RGB32UI                                       = 0x8D71;\n  const GLenum RGBA16UI                                      = 0x8D76;\n  const GLenum RGB16UI                                       = 0x8D77;\n  const GLenum RGBA8UI                                       = 0x8D7C;\n  const GLenum RGB8UI                                        = 0x8D7D;\n  const GLenum RGBA32I                                       = 0x8D82;\n  const GLenum RGB32I                                        = 0x8D83;\n  const GLenum RGBA16I                                       = 0x8D88;\n  const GLenum RGB16I                                        = 0x8D89;\n  const GLenum RGBA8I                                        = 0x8D8E;\n  const GLenum RGB8I                                         = 0x8D8F;\n  const GLenum RED_INTEGER                                   = 0x8D94;\n  const GLenum RGB_INTEGER                                   = 0x8D98;\n  const GLenum RGBA_INTEGER                                  = 0x8D99;\n  const GLenum SAMPLER_2D_ARRAY                              = 0x8DC1;\n  const GLenum SAMPLER_2D_ARRAY_SHADOW                       = 0x8DC4;\n  const GLenum SAMPLER_CUBE_SHADOW                           = 0x8DC5;\n  const GLenum UNSIGNED_INT_VEC2                             = 0x8DC6;\n  const GLenum UNSIGNED_INT_VEC3                             = 0x8DC7;\n  const GLenum UNSIGNED_INT_VEC4                             = 0x8DC8;\n  const GLenum INT_SAMPLER_2D                                = 0x8DCA;\n  const GLenum INT_SAMPLER_3D                                = 0x8DCB;\n  const GLenum INT_SAMPLER_CUBE                              = 0x8DCC;\n  const GLenum INT_SAMPLER_2D_ARRAY                          = 0x8DCF;\n  const GLenum UNSIGNED_INT_SAMPLER_2D                       = 0x8DD2;\n  const GLenum UNSIGNED_INT_SAMPLER_3D                       = 0x8DD3;\n  const GLenum UNSIGNED_INT_SAMPLER_CUBE                     = 0x8DD4;\n  const GLenum UNSIGNED_INT_SAMPLER_2D_ARRAY                 = 0x8DD7;\n  const GLenum DEPTH_COMPONENT32F                            = 0x8CAC;\n  const GLenum DEPTH32F_STENCIL8                             = 0x8CAD;\n  const GLenum FLOAT_32_UNSIGNED_INT_24_8_REV                = 0x8DAD;\n  const GLenum FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING         = 0x8210;\n  const GLenum FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE         = 0x8211;\n  const GLenum FRAMEBUFFER_ATTACHMENT_RED_SIZE               = 0x8212;\n  const GLenum FRAMEBUFFER_ATTACHMENT_GREEN_SIZE             = 0x8213;\n  const GLenum FRAMEBUFFER_ATTACHMENT_BLUE_SIZE              = 0x8214;\n  const GLenum FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE             = 0x8215;\n  const GLenum FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE             = 0x8216;\n  const GLenum FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE           = 0x8217;\n  const GLenum FRAMEBUFFER_DEFAULT                           = 0x8218;\n  const GLenum UNSIGNED_INT_24_8                             = 0x84FA;\n  const GLenum DEPTH24_STENCIL8                              = 0x88F0;\n  const GLenum UNSIGNED_NORMALIZED                           = 0x8C17;\n  const GLenum DRAW_FRAMEBUFFER_BINDING                      = 0x8CA6; /* Same as FRAMEBUFFER_BINDING */\n  const GLenum READ_FRAMEBUFFER                              = 0x8CA8;\n  const GLenum DRAW_FRAMEBUFFER                              = 0x8CA9;\n  const GLenum READ_FRAMEBUFFER_BINDING                      = 0x8CAA;\n  const GLenum RENDERBUFFER_SAMPLES                          = 0x8CAB;\n  const GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER          = 0x8CD4;\n  const GLenum MAX_COLOR_ATTACHMENTS                         = 0x8CDF;\n  const GLenum COLOR_ATTACHMENT1                             = 0x8CE1;\n  const GLenum COLOR_ATTACHMENT2                             = 0x8CE2;\n  const GLenum COLOR_ATTACHMENT3                             = 0x8CE3;\n  const GLenum COLOR_ATTACHMENT4                             = 0x8CE4;\n  const GLenum COLOR_ATTACHMENT5                             = 0x8CE5;\n  const GLenum COLOR_ATTACHMENT6                             = 0x8CE6;\n  const GLenum COLOR_ATTACHMENT7                             = 0x8CE7;\n  const GLenum COLOR_ATTACHMENT8                             = 0x8CE8;\n  const GLenum COLOR_ATTACHMENT9                             = 0x8CE9;\n  const GLenum COLOR_ATTACHMENT10                            = 0x8CEA;\n  const GLenum COLOR_ATTACHMENT11                            = 0x8CEB;\n  const GLenum COLOR_ATTACHMENT12                            = 0x8CEC;\n  const GLenum COLOR_ATTACHMENT13                            = 0x8CED;\n  const GLenum COLOR_ATTACHMENT14                            = 0x8CEE;\n  const GLenum COLOR_ATTACHMENT15                            = 0x8CEF;\n  const GLenum FRAMEBUFFER_INCOMPLETE_MULTISAMPLE            = 0x8D56;\n  const GLenum MAX_SAMPLES                                   = 0x8D57;\n  const GLenum HALF_FLOAT                                    = 0x140B;\n  const GLenum RG                                            = 0x8227;\n  const GLenum RG_INTEGER                                    = 0x8228;\n  const GLenum R8                                            = 0x8229;\n  const GLenum RG8                                           = 0x822B;\n  const GLenum R16F                                          = 0x822D;\n  const GLenum R32F                                          = 0x822E;\n  const GLenum RG16F                                         = 0x822F;\n  const GLenum RG32F                                         = 0x8230;\n  const GLenum R8I                                           = 0x8231;\n  const GLenum R8UI                                          = 0x8232;\n  const GLenum R16I                                          = 0x8233;\n  const GLenum R16UI                                         = 0x8234;\n  const GLenum R32I                                          = 0x8235;\n  const GLenum R32UI                                         = 0x8236;\n  const GLenum RG8I                                          = 0x8237;\n  const GLenum RG8UI                                         = 0x8238;\n  const GLenum RG16I                                         = 0x8239;\n  const GLenum RG16UI                                        = 0x823A;\n  const GLenum RG32I                                         = 0x823B;\n  const GLenum RG32UI                                        = 0x823C;\n  const GLenum VERTEX_ARRAY_BINDING                          = 0x85B5;\n  const GLenum R8_SNORM                                      = 0x8F94;\n  const GLenum RG8_SNORM                                     = 0x8F95;\n  const GLenum RGB8_SNORM                                    = 0x8F96;\n  const GLenum RGBA8_SNORM                                   = 0x8F97;\n  const GLenum SIGNED_NORMALIZED                             = 0x8F9C;\n  const GLenum COPY_READ_BUFFER                              = 0x8F36;\n  const GLenum COPY_WRITE_BUFFER                             = 0x8F37;\n  const GLenum COPY_READ_BUFFER_BINDING                      = 0x8F36; /* Same as COPY_READ_BUFFER */\n  const GLenum COPY_WRITE_BUFFER_BINDING                     = 0x8F37; /* Same as COPY_WRITE_BUFFER */\n  const GLenum UNIFORM_BUFFER                                = 0x8A11;\n  const GLenum UNIFORM_BUFFER_BINDING                        = 0x8A28;\n  const GLenum UNIFORM_BUFFER_START                          = 0x8A29;\n  const GLenum UNIFORM_BUFFER_SIZE                           = 0x8A2A;\n  const GLenum MAX_VERTEX_UNIFORM_BLOCKS                     = 0x8A2B;\n  const GLenum MAX_FRAGMENT_UNIFORM_BLOCKS                   = 0x8A2D;\n  const GLenum MAX_COMBINED_UNIFORM_BLOCKS                   = 0x8A2E;\n  const GLenum MAX_UNIFORM_BUFFER_BINDINGS                   = 0x8A2F;\n  const GLenum MAX_UNIFORM_BLOCK_SIZE                        = 0x8A30;\n  const GLenum MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS        = 0x8A31;\n  const GLenum MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS      = 0x8A33;\n  const GLenum UNIFORM_BUFFER_OFFSET_ALIGNMENT               = 0x8A34;\n  const GLenum ACTIVE_UNIFORM_BLOCKS                         = 0x8A36;\n  const GLenum UNIFORM_TYPE                                  = 0x8A37;\n  const GLenum UNIFORM_SIZE                                  = 0x8A38;\n  const GLenum UNIFORM_BLOCK_INDEX                           = 0x8A3A;\n  const GLenum UNIFORM_OFFSET                                = 0x8A3B;\n  const GLenum UNIFORM_ARRAY_STRIDE                          = 0x8A3C;\n  const GLenum UNIFORM_MATRIX_STRIDE                         = 0x8A3D;\n  const GLenum UNIFORM_IS_ROW_MAJOR                          = 0x8A3E;\n  const GLenum UNIFORM_BLOCK_BINDING                         = 0x8A3F;\n  const GLenum UNIFORM_BLOCK_DATA_SIZE                       = 0x8A40;\n  const GLenum UNIFORM_BLOCK_ACTIVE_UNIFORMS                 = 0x8A42;\n  const GLenum UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES          = 0x8A43;\n  const GLenum UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER     = 0x8A44;\n  const GLenum UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER   = 0x8A46;\n  const GLenum INVALID_INDEX                                 = 0xFFFFFFFF;\n  const GLenum MAX_VERTEX_OUTPUT_COMPONENTS                  = 0x9122;\n  const GLenum MAX_FRAGMENT_INPUT_COMPONENTS                 = 0x9125;\n  const GLenum MAX_SERVER_WAIT_TIMEOUT                       = 0x9111;\n  const GLenum OBJECT_TYPE                                   = 0x9112;\n  const GLenum SYNC_CONDITION                                = 0x9113;\n  const GLenum SYNC_STATUS                                   = 0x9114;\n  const GLenum SYNC_FLAGS                                    = 0x9115;\n  const GLenum SYNC_FENCE                                    = 0x9116;\n  const GLenum SYNC_GPU_COMMANDS_COMPLETE                    = 0x9117;\n  const GLenum UNSIGNALED                                    = 0x9118;\n  const GLenum SIGNALED                                      = 0x9119;\n  const GLenum ALREADY_SIGNALED                              = 0x911A;\n  const GLenum TIMEOUT_EXPIRED                               = 0x911B;\n  const GLenum CONDITION_SATISFIED                           = 0x911C;\n  const GLenum WAIT_FAILED                                   = 0x911D;\n  const GLenum SYNC_FLUSH_COMMANDS_BIT                       = 0x00000001;\n  const GLenum VERTEX_ATTRIB_ARRAY_DIVISOR                   = 0x88FE;\n  const GLenum ANY_SAMPLES_PASSED                            = 0x8C2F;\n  const GLenum ANY_SAMPLES_PASSED_CONSERVATIVE               = 0x8D6A;\n  const GLenum SAMPLER_BINDING                               = 0x8919;\n  const GLenum RGB10_A2UI                                    = 0x906F;\n  const GLenum INT_2_10_10_10_REV                            = 0x8D9F;\n  const GLenum TRANSFORM_FEEDBACK                            = 0x8E22;\n  const GLenum TRANSFORM_FEEDBACK_PAUSED                     = 0x8E23;\n  const GLenum TRANSFORM_FEEDBACK_ACTIVE                     = 0x8E24;\n  const GLenum TRANSFORM_FEEDBACK_BINDING                    = 0x8E25;\n  const GLenum TEXTURE_IMMUTABLE_FORMAT                      = 0x912F;\n  const GLenum MAX_ELEMENT_INDEX                             = 0x8D6B;\n  const GLenum TEXTURE_IMMUTABLE_LEVELS                      = 0x82DF;\n\n  const GLint64 TIMEOUT_IGNORED                              = -1;\n\n  /* WebGL-specific enums */\n  const GLenum MAX_CLIENT_WAIT_TIMEOUT_WEBGL                 = 0x9247;\n\n  /* Buffer objects */\n  undefined copyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset,\n                              GLintptr writeOffset, GLsizeiptr size);\n  // MapBufferRange, in particular its read-only and write-only modes,\n  // can not be exposed safely to JavaScript. GetBufferSubData\n  // replaces it for the purpose of fetching data back from the GPU.\n  undefined getBufferSubData(GLenum target, GLintptr srcByteOffset, [AllowShared] ArrayBufferView dstBuffer,\n                             optional GLuint dstOffset = 0, optional GLuint length = 0);\n\n  /* Framebuffer objects */\n  undefined blitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0,\n                            GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);\n  undefined framebufferTextureLayer(GLenum target, GLenum attachment, WebGLTexture? texture, GLint level,\n                                    GLint layer);\n  undefined invalidateFramebuffer(GLenum target, sequence<GLenum> attachments);\n  undefined invalidateSubFramebuffer(GLenum target, sequence<GLenum> attachments,\n                                     GLint x, GLint y, GLsizei width, GLsizei height);\n  undefined readBuffer(GLenum src);\n\n  /* Renderbuffer objects */\n  any getInternalformatParameter(GLenum target, GLenum internalformat, GLenum pname);\n  undefined renderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat,\n                                           GLsizei width, GLsizei height);\n\n  /* Texture objects */\n  undefined texStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width,\n                         GLsizei height);\n  undefined texStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width,\n                         GLsizei height, GLsizei depth);\n\n  undefined texImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height,\n                       GLsizei depth, GLint border, GLenum format, GLenum type, GLintptr pboOffset);\n  undefined texImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height,\n                       GLsizei depth, GLint border, GLenum format, GLenum type,\n                       TexImageSource source); // May throw DOMException\n  undefined texImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height,\n                       GLsizei depth, GLint border, GLenum format, GLenum type, [AllowShared] ArrayBufferView? srcData);\n  undefined texImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height,\n                       GLsizei depth, GLint border, GLenum format, GLenum type, [AllowShared] ArrayBufferView srcData,\n                       GLuint srcOffset);\n\n  undefined texSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset,\n                          GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type,\n                          GLintptr pboOffset);\n  undefined texSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset,\n                          GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type,\n                          TexImageSource source); // May throw DOMException\n  undefined texSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset,\n                          GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type,\n                          [AllowShared] ArrayBufferView? srcData, optional GLuint srcOffset = 0);\n\n  undefined copyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset,\n                              GLint x, GLint y, GLsizei width, GLsizei height);\n\n  undefined compressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width,\n                                 GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, GLintptr offset);\n  undefined compressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width,\n                                 GLsizei height, GLsizei depth, GLint border, [AllowShared] ArrayBufferView srcData,\n                                 optional GLuint srcOffset = 0, optional GLuint srcLengthOverride = 0);\n\n  undefined compressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\n                                    GLint zoffset, GLsizei width, GLsizei height, GLsizei depth,\n                                    GLenum format, GLsizei imageSize, GLintptr offset);\n  undefined compressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\n                                    GLint zoffset, GLsizei width, GLsizei height, GLsizei depth,\n                                    GLenum format, [AllowShared] ArrayBufferView srcData,\n                                    optional GLuint srcOffset = 0,\n                                    optional GLuint srcLengthOverride = 0);\n\n  /* Programs and shaders */\n  [WebGLHandlesContextLoss] GLint getFragDataLocation(WebGLProgram program, DOMString name);\n\n  /* Uniforms */\n  undefined uniform1ui(WebGLUniformLocation? location, GLuint v0);\n  undefined uniform2ui(WebGLUniformLocation? location, GLuint v0, GLuint v1);\n  undefined uniform3ui(WebGLUniformLocation? location, GLuint v0, GLuint v1, GLuint v2);\n  undefined uniform4ui(WebGLUniformLocation? location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);\n\n  undefined uniform1uiv(WebGLUniformLocation? location, Uint32List data, optional GLuint srcOffset = 0,\n                        optional GLuint srcLength = 0);\n  undefined uniform2uiv(WebGLUniformLocation? location, Uint32List data, optional GLuint srcOffset = 0,\n                        optional GLuint srcLength = 0);\n  undefined uniform3uiv(WebGLUniformLocation? location, Uint32List data, optional GLuint srcOffset = 0,\n                        optional GLuint srcLength = 0);\n  undefined uniform4uiv(WebGLUniformLocation? location, Uint32List data, optional GLuint srcOffset = 0,\n                        optional GLuint srcLength = 0);\n  undefined uniformMatrix3x2fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\n                               optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\n  undefined uniformMatrix4x2fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\n                               optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\n\n  undefined uniformMatrix2x3fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\n                               optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\n  undefined uniformMatrix4x3fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\n                               optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\n\n  undefined uniformMatrix2x4fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\n                               optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\n  undefined uniformMatrix3x4fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\n                               optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\n\n  /* Vertex attribs */\n  undefined vertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);\n  undefined vertexAttribI4iv(GLuint index, Int32List values);\n  undefined vertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);\n  undefined vertexAttribI4uiv(GLuint index, Uint32List values);\n  undefined vertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);\n\n  /* Writing to the drawing buffer */\n  undefined vertexAttribDivisor(GLuint index, GLuint divisor);\n  undefined drawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instanceCount);\n  undefined drawElementsInstanced(GLenum mode, GLsizei count, GLenum type, GLintptr offset, GLsizei instanceCount);\n  undefined drawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLintptr offset);\n\n  /* Multiple Render Targets */\n  undefined drawBuffers(sequence<GLenum> buffers);\n\n  undefined clearBufferfv(GLenum buffer, GLint drawbuffer, Float32List values,\n                          optional GLuint srcOffset = 0);\n  undefined clearBufferiv(GLenum buffer, GLint drawbuffer, Int32List values,\n                          optional GLuint srcOffset = 0);\n  undefined clearBufferuiv(GLenum buffer, GLint drawbuffer, Uint32List values,\n                           optional GLuint srcOffset = 0);\n\n  undefined clearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);\n\n  /* Query Objects */\n  WebGLQuery? createQuery();\n  undefined deleteQuery(WebGLQuery? query);\n  [WebGLHandlesContextLoss] GLboolean isQuery(WebGLQuery? query);\n  undefined beginQuery(GLenum target, WebGLQuery query);\n  undefined endQuery(GLenum target);\n  WebGLQuery? getQuery(GLenum target, GLenum pname);\n  any getQueryParameter(WebGLQuery query, GLenum pname);\n\n  /* Sampler Objects */\n  WebGLSampler? createSampler();\n  undefined deleteSampler(WebGLSampler? sampler);\n  [WebGLHandlesContextLoss] GLboolean isSampler(WebGLSampler? sampler);\n  undefined bindSampler(GLuint unit, WebGLSampler? sampler);\n  undefined samplerParameteri(WebGLSampler sampler, GLenum pname, GLint param);\n  undefined samplerParameterf(WebGLSampler sampler, GLenum pname, GLfloat param);\n  any getSamplerParameter(WebGLSampler sampler, GLenum pname);\n\n  /* Sync objects */\n  WebGLSync? fenceSync(GLenum condition, GLbitfield flags);\n  [WebGLHandlesContextLoss] GLboolean isSync(WebGLSync? sync);\n  undefined deleteSync(WebGLSync? sync);\n  GLenum clientWaitSync(WebGLSync sync, GLbitfield flags, GLuint64 timeout);\n  undefined waitSync(WebGLSync sync, GLbitfield flags, GLint64 timeout);\n  any getSyncParameter(WebGLSync sync, GLenum pname);\n\n  /* Transform Feedback */\n  WebGLTransformFeedback? createTransformFeedback();\n  undefined deleteTransformFeedback(WebGLTransformFeedback? tf);\n  [WebGLHandlesContextLoss] GLboolean isTransformFeedback(WebGLTransformFeedback? tf);\n  undefined bindTransformFeedback (GLenum target, WebGLTransformFeedback? tf);\n  undefined beginTransformFeedback(GLenum primitiveMode);\n  undefined endTransformFeedback();\n  undefined transformFeedbackVaryings(WebGLProgram program, sequence<DOMString> varyings, GLenum bufferMode);\n  WebGLActiveInfo? getTransformFeedbackVarying(WebGLProgram program, GLuint index);\n  undefined pauseTransformFeedback();\n  undefined resumeTransformFeedback();\n\n  /* Uniform Buffer Objects and Transform Feedback Buffers */\n  undefined bindBufferBase(GLenum target, GLuint index, WebGLBuffer? buffer);\n  undefined bindBufferRange(GLenum target, GLuint index, WebGLBuffer? buffer, GLintptr offset, GLsizeiptr size);\n  any getIndexedParameter(GLenum target, GLuint index);\n  sequence<GLuint>? getUniformIndices(WebGLProgram program, sequence<DOMString> uniformNames);\n  any getActiveUniforms(WebGLProgram program, sequence<GLuint> uniformIndices, GLenum pname);\n  GLuint getUniformBlockIndex(WebGLProgram program, DOMString uniformBlockName);\n  any getActiveUniformBlockParameter(WebGLProgram program, GLuint uniformBlockIndex, GLenum pname);\n  DOMString? getActiveUniformBlockName(WebGLProgram program, GLuint uniformBlockIndex);\n  undefined uniformBlockBinding(WebGLProgram program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);\n\n  /* Vertex Array Objects */\n  WebGLVertexArrayObject? createVertexArray();\n  undefined deleteVertexArray(WebGLVertexArrayObject? vertexArray);\n  [WebGLHandlesContextLoss] GLboolean isVertexArray(WebGLVertexArrayObject? vertexArray);\n  undefined bindVertexArray(WebGLVertexArrayObject? array);\n};"
      },
      "extended": [],
      "inheritance": null,
      "includes": []
    },
    {
      "name": "WebGL2RenderingContextOverloads",
      "defined": {
        "spec": {
          "title": "WebGL 2.0 Specification",
          "url": "https://www.khronos.org/registry/webgl/specs/latest/2.0/"
        },
        "fragment": "interface mixin WebGL2RenderingContextOverloads\n{\n  // WebGL1:\n  undefined bufferData(GLenum target, GLsizeiptr size, GLenum usage);\n  undefined bufferData(GLenum target, [AllowShared] BufferSource? srcData, GLenum usage);\n  undefined bufferSubData(GLenum target, GLintptr dstByteOffset, [AllowShared] BufferSource srcData);\n  // WebGL2:\n  undefined bufferData(GLenum target, [AllowShared] ArrayBufferView srcData, GLenum usage, GLuint srcOffset,\n                       optional GLuint length = 0);\n  undefined bufferSubData(GLenum target, GLintptr dstByteOffset, [AllowShared] ArrayBufferView srcData,\n                          GLuint srcOffset, optional GLuint length = 0);\n\n  // WebGL1 legacy entrypoints:\n  undefined texImage2D(GLenum target, GLint level, GLint internalformat,\n                       GLsizei width, GLsizei height, GLint border, GLenum format,\n                       GLenum type, [AllowShared] ArrayBufferView? pixels);\n  undefined texImage2D(GLenum target, GLint level, GLint internalformat,\n                       GLenum format, GLenum type, TexImageSource source); // May throw DOMException\n\n  undefined texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\n                          GLsizei width, GLsizei height,\n                          GLenum format, GLenum type, [AllowShared] ArrayBufferView? pixels);\n  undefined texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\n                          GLenum format, GLenum type, TexImageSource source); // May throw DOMException\n\n  // WebGL2 entrypoints:\n  undefined texImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height,\n                       GLint border, GLenum format, GLenum type, GLintptr pboOffset);\n  undefined texImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height,\n                       GLint border, GLenum format, GLenum type,\n                       TexImageSource source); // May throw DOMException\n  undefined texImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height,\n                       GLint border, GLenum format, GLenum type, [AllowShared] ArrayBufferView srcData,\n                       GLuint srcOffset);\n\n  undefined texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width,\n                          GLsizei height, GLenum format, GLenum type, GLintptr pboOffset);\n  undefined texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width,\n                          GLsizei height, GLenum format, GLenum type,\n                          TexImageSource source); // May throw DOMException\n  undefined texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width,\n                          GLsizei height, GLenum format, GLenum type, [AllowShared] ArrayBufferView srcData,\n                          GLuint srcOffset);\n\n  undefined compressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width,\n                                 GLsizei height, GLint border, GLsizei imageSize, GLintptr offset);\n  undefined compressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width,\n                                 GLsizei height, GLint border, [AllowShared] ArrayBufferView srcData,\n                                 optional GLuint srcOffset = 0, optional GLuint srcLengthOverride = 0);\n\n  undefined compressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\n                                    GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, GLintptr offset);\n  undefined compressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,\n                                    GLsizei width, GLsizei height, GLenum format,\n                                    [AllowShared] ArrayBufferView srcData,\n                                    optional GLuint srcOffset = 0,\n                                    optional GLuint srcLengthOverride = 0);\n\n  undefined uniform1fv(WebGLUniformLocation? location, Float32List data, optional GLuint srcOffset = 0,\n                       optional GLuint srcLength = 0);\n  undefined uniform2fv(WebGLUniformLocation? location, Float32List data, optional GLuint srcOffset = 0,\n                       optional GLuint srcLength = 0);\n  undefined uniform3fv(WebGLUniformLocation? location, Float32List data, optional GLuint srcOffset = 0,\n                       optional GLuint srcLength = 0);\n  undefined uniform4fv(WebGLUniformLocation? location, Float32List data, optional GLuint srcOffset = 0,\n                       optional GLuint srcLength = 0);\n\n  undefined uniform1iv(WebGLUniformLocation? location, Int32List data, optional GLuint srcOffset = 0,\n                       optional GLuint srcLength = 0);\n  undefined uniform2iv(WebGLUniformLocation? location, Int32List data, optional GLuint srcOffset = 0,\n                       optional GLuint srcLength = 0);\n  undefined uniform3iv(WebGLUniformLocation? location, Int32List data, optional GLuint srcOffset = 0,\n                       optional GLuint srcLength = 0);\n  undefined uniform4iv(WebGLUniformLocation? location, Int32List data, optional GLuint srcOffset = 0,\n                       optional GLuint srcLength = 0);\n\n  undefined uniformMatrix2fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\n                             optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\n  undefined uniformMatrix3fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\n                             optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\n  undefined uniformMatrix4fv(WebGLUniformLocation? location, GLboolean transpose, Float32List data,\n                             optional GLuint srcOffset = 0, optional GLuint srcLength = 0);\n\n  /* Reading back pixels */\n  // WebGL1:\n  undefined readPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type,\n                       [AllowShared] ArrayBufferView? dstData);\n  // WebGL2:\n  undefined readPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type,\n                       GLintptr offset);\n  undefined readPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type,\n                       [AllowShared] ArrayBufferView dstData, GLuint dstOffset);\n};"
      },
      "extended": [],
      "inheritance": null,
      "includes": []
    }
  ]
}