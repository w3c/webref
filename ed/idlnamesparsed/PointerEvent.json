{
  "name": "PointerEvent",
  "defined": {
    "spec": {
      "title": "Pointer Events",
      "url": "https://www.w3.org/TR/pointerevents3/"
    },
    "fragment": "[Exposed=Window]\ninterface PointerEvent : MouseEvent {\n    constructor(DOMString type, optional PointerEventInit eventInitDict = {});\n    readonly        attribute long        pointerId;\n    readonly        attribute double      width;\n    readonly        attribute double      height;\n    readonly        attribute float       pressure;\n    readonly        attribute float       tangentialPressure;\n    readonly        attribute long        tiltX;\n    readonly        attribute long        tiltY;\n    readonly        attribute long        twist;\n    readonly        attribute double      altitudeAngle;\n    readonly        attribute double      azimuthAngle;\n    readonly        attribute DOMString   pointerType;\n    readonly        attribute boolean     isPrimary;\n    [SecureContext] sequence<PointerEvent> getCoalescedEvents();\n    sequence<PointerEvent> getPredictedEvents();\n};",
    "href": "https://w3c.github.io/pointerevents/#dom-pointerevent"
  },
  "extended": [],
  "inheritance": {
    "name": "MouseEvent",
    "defined": {
      "spec": {
        "title": "UI Events",
        "url": "https://www.w3.org/TR/uievents/"
      },
      "fragment": "[Exposed=Window]\ninterface MouseEvent : UIEvent {\n  constructor(DOMString type, optional MouseEventInit eventInitDict);\n  readonly attribute long screenX;\n  readonly attribute long screenY;\n  readonly attribute long clientX;\n  readonly attribute long clientY;\n\n  readonly attribute boolean ctrlKey;\n  readonly attribute boolean shiftKey;\n  readonly attribute boolean altKey;\n  readonly attribute boolean metaKey;\n\n  readonly attribute short button;\n  readonly attribute unsigned short buttons;\n\n  readonly attribute EventTarget? relatedTarget;\n\n  boolean getModifierState(DOMString keyArg);\n};",
      "href": "https://w3c.github.io/uievents/#mouseevent"
    },
    "extended": [
      {
        "spec": {
          "title": "CSSOM View Module",
          "url": "https://www.w3.org/TR/cssom-view-1/"
        },
        "fragment": "partial interface MouseEvent {\n  readonly attribute double screenX;\n  readonly attribute double screenY;\n  readonly attribute double pageX;\n  readonly attribute double pageY;\n  readonly attribute double clientX;\n  readonly attribute double clientY;\n  readonly attribute double x;\n  readonly attribute double y;\n  readonly attribute double offsetX;\n  readonly attribute double offsetY;\n};"
      },
      {
        "spec": {
          "title": "Pointer Lock 2.0",
          "url": "https://www.w3.org/TR/pointerlock-2/"
        },
        "fragment": "partial interface MouseEvent {\n  readonly attribute long movementX;\n  readonly attribute long movementY;\n};"
      }
    ],
    "inheritance": {
      "name": "UIEvent",
      "defined": {
        "spec": {
          "title": "UI Events",
          "url": "https://www.w3.org/TR/uievents/"
        },
        "fragment": "[Exposed=Window]\ninterface UIEvent : Event {\n  constructor(DOMString type, optional UIEventInit eventInitDict);\n  readonly attribute Window? view;\n  readonly attribute long detail;\n};",
        "href": "https://w3c.github.io/uievents/#uievent"
      },
      "extended": [
        {
          "spec": {
            "title": "Input Device Capabilities",
            "url": "https://wicg.github.io/input-device-capabilities/"
          },
          "fragment": "partial interface UIEvent {\n  readonly attribute InputDeviceCapabilities? sourceCapabilities;\n};"
        },
        {
          "spec": {
            "title": "UI Events",
            "url": "https://www.w3.org/TR/uievents/"
          },
          "fragment": "partial interface UIEvent {\n  // The following support legacy user agents\n  readonly attribute unsigned long which;\n};"
        }
      ],
      "inheritance": {
        "name": "Event",
        "defined": {
          "spec": {
            "title": "DOM Standard",
            "url": "https://dom.spec.whatwg.org/"
          },
          "fragment": "[Exposed=(Window,Worker,AudioWorklet)]\ninterface Event {\n  constructor(DOMString type, optional EventInit eventInitDict = {});\n\n  readonly attribute DOMString type;\n  readonly attribute EventTarget? target;\n  readonly attribute EventTarget? srcElement; // legacy\n  readonly attribute EventTarget? currentTarget;\n  sequence<EventTarget> composedPath();\n\n  const unsigned short NONE = 0;\n  const unsigned short CAPTURING_PHASE = 1;\n  const unsigned short AT_TARGET = 2;\n  const unsigned short BUBBLING_PHASE = 3;\n  readonly attribute unsigned short eventPhase;\n\n  undefined stopPropagation();\n           attribute boolean cancelBubble; // legacy alias of .stopPropagation()\n  undefined stopImmediatePropagation();\n\n  readonly attribute boolean bubbles;\n  readonly attribute boolean cancelable;\n           attribute boolean returnValue;  // legacy\n  undefined preventDefault();\n  readonly attribute boolean defaultPrevented;\n  readonly attribute boolean composed;\n\n  [LegacyUnforgeable] readonly attribute boolean isTrusted;\n  readonly attribute DOMHighResTimeStamp timeStamp;\n\n  undefined initEvent(DOMString type, optional boolean bubbles = false, optional boolean cancelable = false); // legacy\n};",
          "href": "https://dom.spec.whatwg.org/#event"
        },
        "extended": [],
        "inheritance": null,
        "includes": []
      },
      "includes": []
    },
    "includes": []
  },
  "includes": []
}